"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Task_1 = require('../../loader/tasks/Task');
var Timeline_1 = require('../animation/Timeline');
var path = require('path');
var jibo_1 = require('../../jibo');
/**
 * Loads an animation timeline with PixiAnimate.
 * @class TimelineTask
 * @memberof module:jibo/loader
 * @constructor
 * @private
 * @param {String} asset.type Must be "texture" to signify that this asset should be parsed
 *                            specifically for Pixi.js.
 * @param {String} [asset.src] The texture image path.
 * @param {Boolean} [asset.upload=false] Upload the GPU immediate after loading.
 * @param {String} [asset.alpha] The alpha image path, if not using image property.
 * @param {Boolean} [asset.cache=false] `true` to cache the result.
 * @param {String} [asset.id] The ID of the task.
 * @param {Function} [asset.complete] The callback to call when the load is completed.
 */
var TimelineTask = (function (_super) {
    __extends(TimelineTask, _super);
    function TimelineTask(manager, asset) {
        _super.call(this, manager, asset, asset.src);
        /**
         * The timeline source path.
         * @name module:jibo/loader.TimelineTask#src
         * @type {String}
         */
        this.src = asset.src;
        /**
         * Texture are uploaded to the GPU immediately.
         * @name module:jibo/loader.TimelineTask#upload
         * @type {Boolean}
         */
        this.upload = !!asset.upload;
    }
    /**
     * Tests if an asset should be loaded.
     * @method module:jibo/loader.TimelineTask.test
     * @static
     * @param {Object} asset The asset to test.
     * @return {Boolean} `true` if the asset qualifies for this task.
     */
    TimelineTask.test = function (asset) {
        return asset.type === "timeline" && !!asset.src && /\.js$/i.test(asset.src);
    };
    /**
     * Starts the load.
     * @method module:jibo/loader.TimelineTask#start
     * @param {module:jibo/loader.Task~completeCallback} callback Callback to call when the load is done
     */
    TimelineTask.prototype.start = function (callback) {
        var _this = this;
        var timeline = new Timeline_1.default();
        this.simpleLoad(this.src, function (err, results) {
            if (err) {
                return callback(err);
            }
            // Save the library for late
            timeline.library = results;
            _this.load(_this.getAssets(timeline), function (err, results) {
                if (err) {
                    return callback(err);
                }
                // Create a new instance now that assets
                // are loaded
                timeline.addInstance();
                // Upload to the renderer immediately
                if (_this.upload && jibo_1.default.face.renderer) {
                    timeline.upload(jibo_1.default.face.renderer, function () {
                        callback(null, timeline);
                    });
                }
                else {
                    // Callback
                    callback(null, timeline);
                }
            });
        });
    };
    TimelineTask.prototype.getAssets = function (timeline) {
        var basePath = path.dirname(this.src);
        var results = [];
        var assets = timeline.library.stage.assets;
        var _loop_1 = function(id) {
            var src = assets[id];
            // Load a texture
            if (src.search(/\.shapes\.(txt|json)$/i) > -1) {
                results.push({
                    id: id,
                    src: path.join(basePath, src),
                    type: 'shapes',
                    complete: function (err, result) {
                        if (err) {
                            return;
                        }
                        timeline.addShapes(result);
                    }
                });
            }
            else if (src.search(/\.(png|jpg|gif)$/i) > -1) {
                results.push({
                    id: id,
                    src: path.join(basePath, src),
                    type: 'texture',
                    complete: function (err, result) {
                        if (err) {
                            return;
                        }
                        timeline.addTexture(result, id);
                    }
                });
            }
            else if (src.search(/\.json$/i) > -1) {
                results.push({
                    id: id,
                    src: path.join(basePath, src),
                    type: 'spritesheet',
                    complete: function (err, result) {
                        if (err) {
                            return;
                        }
                        timeline.addSpritesheet(result);
                    }
                });
            }
        };
        for (var id in assets) {
            _loop_1(id);
        }
        return results;
    };
    return TimelineTask;
}(Task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TimelineTask;

//# sourceMappingURL=../../map/rendering/tasks/TimelineTask.js.map
