"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Task_1 = require('../../loader/tasks/Task');
var Runtime_1 = require('../../Runtime');
var Spritesheet_1 = require('../animation/Spritesheet');
var path = require('path');
/**
 * Loads an JSON atlas and sets it up for Pixi to use as a collectino of PIXI.Texture objects.
 * @class SpritesheetTask
 * @memberof module:jibo/loader
 * @constructor
 * @private
 * @param {String} asset.type Must be "spritesheet" to signify that this asset should be parsed
 *                            specifically for Pixi.js.
 * @param {String} [asset.src] The JSON atlas path.
 * @param {Boolean} [asset.upload=false] `true` to upload the GPU immediate after loading.
 * @param {Boolean} [asset.cache=false] `true` to cache the result.
 * @param {String} [asset.id] The ID of the task.
 * @param {Function} [asset.complete] The callback to call when the load is completed.
 */
var SpritesheetTask = (function (_super) {
    __extends(SpritesheetTask, _super);
    function SpritesheetTask(manager, asset) {
        _super.call(this, manager, asset, asset.src);
        /**
         * The atlas source path.
         * @name module:jibo/loader.SpritesheetTask#src
         * @type {String}
         */
        this.src = asset.src;
        /**
         * `true` if the texture should be uploaded to the GPU immediately.
         * @name module:jibo/loader.SpritesheetTask#upload
         * @type {Boolean}
         */
        this.upload = !!asset.upload;
    }
    /**
     * Tests if an asset should be loaded.
     * @method module:jibo/loader.SpritesheetTask.test
     * @static
     * @param {Object} asset The asset to test.
     * @return {Boolean} `true` if the asset qualifies for this task.
     */
    SpritesheetTask.test = function (asset) {
        return asset.type === "spritesheet" && !!asset.src && /\.(json)$/i.test(asset.src);
    };
    /**
     * Starts the load.
     * @method module:jibo/loader.SpritesheetTask#start
     * @param {module:jibo/loader.Task~completeCallback} callback Callback to call when the load is done
     */
    SpritesheetTask.prototype.start = function (callback) {
        var _this = this;
        // Do the load
        this.simpleLoad(this.src, function (err, data) {
            if (err) {
                return callback(err);
            }
            if (typeof data !== "object" || !data.meta || !data.frames) {
                return callback(new Error('Spritesheet is not a valid format'));
            }
            var imgSrc = path.join(path.dirname(_this.src), data.meta.image);
            _this.simpleLoad(imgSrc, function (err, image) {
                if (err) {
                    return callback(err);
                }
                //create the BaseTexture
                var baseTexture = new PIXI.BaseTexture(image);
                baseTexture.imageUrl = imgSrc;
                if (_this.upload) {
                    Runtime_1.default.instance.face.renderer.textureManager.updateTexture(baseTexture);
                }
                callback(null, new Spritesheet_1.default(baseTexture, data.frames));
            });
        });
    };
    return SpritesheetTask;
}(Task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SpritesheetTask;

//# sourceMappingURL=../../map/rendering/tasks/SpritesheetTask.js.map
