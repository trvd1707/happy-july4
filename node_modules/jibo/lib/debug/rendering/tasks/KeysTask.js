"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Task_1 = require('../../loader/tasks/Task');
var PathUtils_1 = require('../../utils/PathUtils');
var Sound_1 = require('../../sound/Sound');
var Timeline_1 = require('../animation/Timeline');
var Runtime_1 = require('../../Runtime');
var path = require('path');
var keyframes = require('jibo-keyframes');
var KeysAnimation_1 = require('../animation/KeysAnimation');
var async = require('async');
/**
 * Loads an animation timeline with PixiAnimate.
 * @class KeysTask
 * @memberof module:jibo/loader
 * @constructor
 * @private
 * @param {String} asset.type Must be set to "keys".
 * @param {String} [asset.src] The keys file path.
 * @param {String} [assets.root] The root directory of stored keys file.
 * @param {Boolean} [asset.cache=false] `true` to cache the result.
 * @param {String} [asset.id] The ID of the task.
 * @param {Function} [asset.complete] The callback to call when the load is completed.
 */
var KeysTask = (function (_super) {
    __extends(KeysTask, _super);
    function KeysTask(manager, asset) {
        _super.call(this, manager, asset, asset.src);
        /**
         * The timeline source path.
         * @name module:jibo/loader.KeysTask#src
         * @type {String}
         */
        this.src = asset.src;
        /**
         * The root for the project.
         * @name module:jibo/loader.KeysTask#root
         * @type {String}
         */
        this.root = asset.root;
        /**
         * Load texture immediate to the GPU.
         * @name module:jibo/loader.KeysTask#upload
         * @type {Boolean}
         */
        this.upload = asset.upload === undefined ? true : asset.upload;
    }
    /**
     * Tests if an asset should be loaded.
     * @method module:jibo/loader.KeysTask.test
     * @static
     * @param {Object} asset The asset to test.
     * @return {Boolean} `true` if the asset qualifies for this task.
     */
    KeysTask.test = function (asset) {
        return asset.type === "keys" && !!asset.root && !!asset.src && /\.keys$/i.test(asset.src);
    };
    /**
     * Starts the load.
     * @method module:jibo/loader.KeysTask#start
     * @param {module:jibo/loader.Task~completeCallback} callback Callback to call when the load is done
     */
    KeysTask.prototype.start = function (callback) {
        var _this = this;
        // Create the new player
        var player = new KeysAnimation_1.default(Runtime_1.default.instance.face);
        async.waterfall([
            function (done) {
                // Get the current project root and name
                var root = PathUtils_1.default.findRoot();
                var projectName = PathUtils_1.default.getProjectName(root);
                // Get the assetPack from base directory of the source file
                var parent = PathUtils_1.default.findRoot(path.resolve(_this.src));
                var assetPack = PathUtils_1.default.getProjectName(parent);
                // Get the assetpack
                player.assetPack = assetPack === projectName ? '' : assetPack;
                // Load the JSON keys file
                _this.simpleLoad(_this.src, done);
            },
            function (data, done) {
                // Get the assets definitions from keys
                player.data = data;
                var assets = _this.getAssetsFromKeys(player);
                if (!assets.length) {
                    return done(null, {});
                }
                // Load the timeline and sound objects
                _this.load(assets, done);
            },
            function (results, done) {
                // Register the timeline and sounds
                // with the player object
                for (var id in results) {
                    if (results[id] instanceof Timeline_1.default) {
                        player.addTimeline(id, results[id]);
                    }
                    else if (results[id] instanceof Sound_1.default) {
                        player.addSound(id, results[id]);
                    }
                }
                // Create the builder
                _this.createBuilder(done);
            },
            function (builder, done) {
                player.builder = builder;
                done(null);
            }
        ], function (err, results) {
            if (err) {
                player.destroy();
                callback(err);
                return;
            }
            callback(null, player);
        });
    };
    KeysTask.prototype.getAssetsFromKeys = function (player) {
        var _this = this;
        var assets = [];
        player.data.layers.forEach(function (layer) {
            layer.keyframes.forEach(function (keyframe) {
                var AudioEvent = keyframe.value.AudioEvent;
                var Pixi = keyframe.value.Pixi;
                if (AudioEvent) {
                    assets.push({
                        id: AudioEvent.file,
                        type: 'sound',
                        src: PathUtils_1.default.getAudioUri(AudioEvent.file, player.assetPack)
                    });
                }
                else if (Pixi) {
                    assets.push({
                        id: Pixi,
                        type: 'timeline',
                        upload: _this.upload,
                        src: PathUtils_1.default.getTimelineUri(Pixi, player.assetPack)
                    });
                }
            });
        });
        return assets;
    };
    /**
     * Creates the builder from the keys animation object.
     * @method module:jibo/loader.KeysTask#createBuilder
     * @private
     */
    KeysTask.prototype.createBuilder = function (callback) {
        var _this = this;
        keyframes.keysToAnimObjectAsync(this.src, function (data) {
            var animUtils = Runtime_1.default.instance.animate;
            callback(null, animUtils.createAnimationBuilderFromData(data, _this.root));
        });
    };
    return KeysTask;
}(Task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = KeysTask;

//# sourceMappingURL=../../map/rendering/tasks/KeysTask.js.map
