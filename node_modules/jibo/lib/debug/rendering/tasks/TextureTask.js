"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Task_1 = require('../../loader/tasks/Task');
var ColorAlphaTask_1 = require('./ColorAlphaTask');
var Runtime_1 = require('../../Runtime');
/**
 * Loads an image and sets it up for Pixi to use as a PIXI.Texture.
 * @class TextureTask
 * @memberof module:jibo/loader
 * @constructor
 * @private
 * @param {String} asset.type Must be "texture" to signify that this asset should be parsed
 *                            specifically for Pixi.js.
 * @param {String} [asset.src] The texture image path.
 * @param {Boolean} [asset.upload=false] `true` to upload the GPU immediate after loading.
 * @param {String} [asset.alpha] The alpha image path, if not using image property.
 * @param {Boolean} [asset.cache=false] `true` to cache the result.
 * @param {String} [asset.id] The ID of the task.
 * @param {Function} [asset.complete] The callback to call when the load is completed.
 */
var TextureTask = (function (_super) {
    __extends(TextureTask, _super);
    function TextureTask(manager, asset) {
        _super.call(this, manager, asset, asset.src);
        /**
         * The atlas source path.
         * @name module:jibo/loader.TextureTask#src
         * @type {String}
         */
        this.src = asset.src;
        /**
         * The atlas alpha source path.
         * @name module:jibo/loader.TextureTask#alpha
         * @type {String}
         */
        this.alpha = asset.alpha;
        /**
         * `true` if the texture should be uploaded to the GPU immediately.
         * @name module:jibo/loader.TextureTask#upload
         * @type {Boolean}
         */
        this.upload = !!asset.upload;
    }
    /**
     * Tests if an asset should be loaded.
     * @method module:jibo/loader.TextureTask.test
     * @static
     * @param {Object} asset The asset to test.
     * @return {Boolean} `true` if the asset qualifies for this task.
     */
    TextureTask.test = function (asset) {
        return asset.type === "texture" && !!asset.src && /\.(jpg|jpeg|png|gif)$/i.test(asset.src);
    };
    /**
     * Starts the load.
     * @method module:jibo/loader.TextureTask#start
     * @param {module:jibo/loader.Task~completeCallback} callback Callback to call when the load is done
     */
    TextureTask.prototype.start = function (callback) {
        var _this = this;
        var assets = {};
        assets._color = { src: this.src };
        if (this.alpha) {
            assets._alpha = { src: this.alpha };
        }
        // Do the load
        this.load(assets, function (err, results) {
            if (err) {
                return callback(err);
            }
            var image;
            if (!results._alpha) {
                image = results._color;
            }
            else {
                image = ColorAlphaTask_1.default.mergeAlpha(results._color, results._alpha);
            }
            //create the Texture and BaseTexture
            var baseTexture = new PIXI.BaseTexture(image);
            baseTexture.imageUrl = _this.src;
            var texture = new PIXI.Texture(baseTexture);
            if (_this.upload) {
                Runtime_1.default.instance.face.renderer.textureManager.updateTexture(texture);
            }
            callback(null, texture);
        });
    };
    return TextureTask;
}(Task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TextureTask;

//# sourceMappingURL=../../map/rendering/tasks/TextureTask.js.map
