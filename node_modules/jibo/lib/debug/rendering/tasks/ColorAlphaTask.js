"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Task_1 = require('../../loader/tasks/Task');
/**
 * Internal class for loading an image that has been split into an alpha channel image and a
 * RGB only color image.
 * @class ColorAlphaTask
 * @extends module:jibo/loader.Task
 * @memberof module:jibo/loader
 * @constructor
 * @private
 * @param {Object} asset The data properties.
 * @param {String} asset.src The source path to the color image.
 * @param {String} asset.alpha The source path to the alpha image.
 * @param {Boolean} [asset.cache=false] `true` to cache the result.
 * @param {String} [asset.id] ID of asset.
 * @param {Function} [asset.complete] The event to call when done.
 * @param {Object} [asset.sizes=null] Define if certain sizes are not supported.
 */
var ColorAlphaTask = (function (_super) {
    __extends(ColorAlphaTask, _super);
    function ColorAlphaTask(manager, asset) {
        _super.call(this, manager, asset, asset.color);
        /**
         * The atlas color source path.
         * @type {String}
         * @name module:jibo/loader.ColorAlphaTask#src
         */
        this.src = asset.src;
        /**
         * The atlas alpha source path.
         * @type {String}
         * @name module:jibo/loader.ColorAlphaTask#alpha
         */
        this.alpha = asset.alpha;
    }
    /**
     * Tests if task should be run.
     * @method module:jibo/loader.ColorAlphaTask.test
     * @static
     * @param {Object} asset The asset to check.
     * @return {Boolean} `true` if the asset is compatible with this task.
     */
    ColorAlphaTask.test = function (asset) {
        return !!asset.src && !!asset.alpha && /\.(jpg|png|jpeg|gif)$/i.test(asset.src) && /\.(png|gif)$/i.test(asset.alpha);
    };
    /**
     * Pulled from EaselJS's SpriteSheetUtils.
     * Merges the rgb channels of one image with the alpha channel of another. This can be used to
     * combine a compressed JPEG image containing color data with a PNG32 monochromatic image
     * containing alpha data. With certain types of images (those with detail that lend itself to
     * JPEG compression) this can provide significant file size savings versus a single RGBA PNG32.
     * This method is very fast (generally on the order of 1-2 ms to run).
     * @method module:jibo/loader.ColorAlphaTask.mergeAlpha
     * @static
     * @param {Image} rbgImage The image (or canvas) containing the RGB channels to use.
     * @param {Image} alphaImage The image (or canvas) containing the alpha channel to use.
     * @param {Canvas} [canvas] If specified, this canvas will be used and returned. If not, a new
     *                      canvas will be created.
     * @return {Canvas} A canvas with the combined image data. This can be used as a source for a
     *              texture.
     */
    ColorAlphaTask.mergeAlpha = function (rgbImage, alphaImage, canvas) {
        if (!canvas) {
            canvas = document.createElement("canvas");
        }
        canvas.width = Math.max(alphaImage.width, rgbImage.width);
        canvas.height = Math.max(alphaImage.height, rgbImage.height);
        var ctx = canvas.getContext("2d");
        ctx.save();
        ctx.drawImage(rgbImage, 0, 0);
        ctx.globalCompositeOperation = "destination-in";
        ctx.drawImage(alphaImage, 0, 0);
        ctx.restore();
        return canvas;
    };
    /**
     * Starts the task.
     * @method  module:jibo/loader.ColorAlphaTask#start
     * @param  {module:jibo/loader.Task~completeCallback} callback Callback when finished.
     */
    ColorAlphaTask.prototype.start = function (callback) {
        this.load({
            _alpha: this.alpha,
            _src: this.src
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            callback(null, ColorAlphaTask.mergeAlpha(results._src, results._alpha));
            results._src.src = results._alpha.src = "";
        });
    };
    return ColorAlphaTask;
}(Task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ColorAlphaTask;

//# sourceMappingURL=../../map/rendering/tasks/ColorAlphaTask.js.map
