"use strict";
var Background_1 = require("./Background");
var Eye_1 = require('./Eye');
var EyeOverlay_1 = require('./EyeOverlay');
var DOFValues_1 = require("./DOFValues");
/**
 * @description
 * Controls the rendering of the eye, overlay, and background.
 * ```
 * let jibo = require('jibo');
 * jibo.init('face', () => {
 *    // Setup complete!
 * });
 * ```
 * @module jibo/face
 */
var FaceRenderer = (function () {
    function FaceRenderer(timer, cache) {
        if (cache === void 0) { cache = true; }
        this.cache = cache;
        // Hide the PIXI.js hello banner
        PIXI.utils._saidHello = true;
        this.stage = new PIXI.Container();
        this.root = new PIXI.Container();
        this.backgroundBorder = new PIXI.Graphics();
        this.root.addChild(this.stage);
        this._renderOnlyWhenDirty = true;
        this._zoom = 1.0;
        this.update = this.update.bind(this);
        this._paused = true;
        this._timer = timer;
        /**
         * If false, disconnects face movement from body movement.
         * @name module:jibo/face#connected
         * @type {boolean}
         */
        this.connected = true;
        // start the update loop
        this._timer.on('update', this.update);
    }
    Object.defineProperty(FaceRenderer.prototype, "renderOnlyWhenDirty", {
        /**
         * If `true` (default), only renders when there is a change in a DOF value.
         * Only set to `false` if adding custom animations
         * in the eye context.
         * @name module:jibo/face#renderOnlyWhenDirty
         * @type {boolean}
         */
        set: function (value) {
            this._renderOnlyWhenDirty = value;
        },
        enumerable: true,
        configurable: true
    });
    FaceRenderer.prototype.init = function (element) {
        var canvas = document.createElement('canvas');
        canvas.style.width = '100%';
        canvas.style.height = '100%';
        this.canvas = canvas;
        element.appendChild(canvas);
        this.renderer = new PIXI.WebGLRenderer(FaceRenderer.WIDTH, FaceRenderer.HEIGHT, {
            view: canvas,
            backgroundColor: 0x000000,
            antialias: true
        });
        this.eye = new Eye_1.default(this.renderer, this.cache);
        this.eyeOverlay = new EyeOverlay_1.default(this.renderer, this.cache);
        this.background = new Background_1.default(this.renderer, this.cache);
        this.reset();
        this.paused = false;
        this.visible = true;
    };
    /**
     * Resets the layers.
     * @name module:jibo/face#reset
     * @type {boolean}
     */
    FaceRenderer.prototype.reset = function () {
        // Remove all
        this.stage.removeChildren();
        //background textures
        this.stage.addChild(this.background);
        //for the animation editor
        this.stage.addChild(this.backgroundBorder);
        this.stage.addChild(this.eye.stage);
        this.stage.addChild(this.eyeOverlay.stage);
    };
    /**
     * Add a child layer above the eye.
     * @method module:jibo/face#addChildAboveEye
     * @private
     * @param {PIXI.DisplayObject} child Display object to add.
     * @return {PIXI.DisplayObject} Child added.
     */
    FaceRenderer.prototype.addChildAboveEye = function (child) {
        return this.stage.addChild(child);
    };
    /**
     * Add a child layer below the eye.
     * @method module:jibo/face#addChildBelowEye
     * @private
     * @param {PIXI.DisplayObject} child Display object to add.
     * @return {PIXI.DisplayObject} Child added.
     */
    FaceRenderer.prototype.addChildBelowEye = function (child) {
        var index = this.stage.getChildIndex(this.eye.stage);
        return this.stage.addChildAt(child, index);
    };
    FaceRenderer.prototype.display = function (timestamp, dofValues) {
        this._previousDofValues = this._currentDofValues;
        this._currentDofValues = dofValues;
        if (this.connected) {
            this.eye.update(timestamp, dofValues);
            this.eyeOverlay.update(timestamp, dofValues);
            this.background.update(timestamp, dofValues);
        }
    };
    Object.defineProperty(FaceRenderer.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        /**
         * If false, hides the eye, overlay, and background.
         * @name module:jibo/face#visible
         * @type {boolean}
         */
        set: function (visible) {
            this._visible = visible;
            this.background.visible = visible;
            this.eye.visible = visible;
            this.eyeOverlay.visible = visible;
        },
        enumerable: true,
        configurable: true
    });
    FaceRenderer.prototype.update = function (elapsed) {
        if (this._paused) {
            return;
        }
        if (!this._renderOnlyWhenDirty) {
            this.renderer.render(this.root);
        }
        else if (!DOFValues_1.isNotDirty(this._previousDofValues, this._currentDofValues)) {
            this.renderer.render(this.root);
        }
    };
    Object.defineProperty(FaceRenderer.prototype, "paused", {
        get: function () {
            return this._paused;
        },
        /**
         * If `true`, pauses the face renderer completely.
         * @name module:jibo/face#paused
         * @type {boolean}
         */
        set: function (value) {
            if (value !== this._paused) {
                this._paused = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FaceRenderer.prototype, "zoom", {
        get: function () {
            return this._zoom;
        },
        /**
         * Changes the stage zoom level. Default is 1 = 100%.
         * @name module:jibo/face#zoom
         * @type {number}
         */
        set: function (zoom) {
            this._zoom = zoom;
            zoom = Math.min(zoom, 1);
            this.stage.scale.x = zoom;
            this.stage.scale.y = zoom;
            this.stage.x = 0.5 * (FaceRenderer.WIDTH - zoom * FaceRenderer.WIDTH);
            this.stage.y = 0.5 * (FaceRenderer.HEIGHT - zoom * FaceRenderer.HEIGHT);
        },
        enumerable: true,
        configurable: true
    });
    FaceRenderer.prototype.makeBorder = function () {
        this.backgroundBorder.lineStyle(3, 0xFFFFFF)
            .moveTo(0, 0)
            .lineTo(FaceRenderer.WIDTH, 0)
            .lineTo(FaceRenderer.WIDTH, FaceRenderer.HEIGHT)
            .lineTo(0, FaceRenderer.HEIGHT)
            .lineTo(0, 0);
    };
    /**
     * Cleans up the renderer.
     * @method module:jibo/face#destroy
     */
    FaceRenderer.prototype.destroy = function () {
        if (this.canvas) {
            this.canvas.parentNode.removeChild(this.canvas);
            this.canvas = null;
        }
        if (this._timer) {
            this._timer.removeListener('update', this.update);
            this._timer = null;
        }
        this._paused = true;
        this.stage = null;
        this.eye.destroy();
        this.eye = null;
        this.eyeOverlay.destroy();
        this.eyeOverlay = null;
        this.background = null;
        this.backgroundBorder = null;
        this.root.destroy(true);
        this.root = null;
        this.renderer.destroy();
    };
    FaceRenderer.WIDTH = 1280;
    FaceRenderer.HEIGHT = 720;
    return FaceRenderer;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = FaceRenderer;

//# sourceMappingURL=../map/rendering/FaceRenderer.js.map
