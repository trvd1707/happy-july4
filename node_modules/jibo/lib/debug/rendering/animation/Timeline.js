"use strict";
var Texture = PIXI.Texture;
/**
 * The object returned by the TimelineTask. Represents a PIXI animation.
 * @class Timeline
 * @private
 * @memberof module:jibo/rendering/animation
 */
var Timeline = (function () {
    function Timeline() {
    }
    /**
     * Adds a texture for the Timeline.
     * @method module:jibo/rendering/animation.Timeline#addTexture
     * @private
     * @param {PIXI.Texture} texture Texture reference.
     * @param {String} id The id name of texture in cache.
     */
    Timeline.prototype.addTexture = function (texture, id) {
        if (!this.textures) {
            this.textures = [];
        }
        Texture.addTextureToCache(texture, id);
        this.textures.push(id);
    };
    /**
     * Adds shapes to the Timeline.
     * @method module:jibo/rendering/animation.Timeline#addShapes
     * @private
     * @param {module:jibo/rendering/animation.Shapes} shapes Texture reference.
     */
    Timeline.prototype.addShapes = function (shapes) {
        this.shapes = shapes;
    };
    /**
     * Adds spritesheet to the Timeline.
     * @method module:jibo/rendering/animation.Timeline#addSpritesheet
     * @private
     * @param {module:jibo/rendering/animation.Spritesheet} spritesheet Spritesheet reference.
     */
    Timeline.prototype.addSpritesheet = function (spritesheet) {
        for (var id in spritesheet.frames) {
            this.addTexture(spritesheet.frames[id], id);
        }
        // Clear the spritesheet object
        spritesheet.frames = null;
    };
    /**
     * Creates the instance of the stage.
     * @method module:jibo/rendering/animation.Timeline#addInstance
     * @private
     */
    Timeline.prototype.addInstance = function () {
        var instance = new this.library.stage();
        instance.framerate = this.library.framerate;
        this.instance = instance;
    };
    /**
     * Uploads all the textures and graphics to the GPU.
     * @method module:jibo/rendering/animation.Timeline#upload
     * @param {PIXI.WebGLRenderer} renderer Reference to face renderer.
     * @param {Function} callback Callback when complete.
     */
    Timeline.prototype.upload = function (renderer, callback) {
        PIXI.animate.utils.upload(renderer, this.instance, callback);
    };
    /**
     * Destroys Timeline object.
     * @method module:jibo/rendering/animation.Timeline#destroy
     */
    Timeline.prototype.destroy = function () {
        this.textures.forEach(function (id) {
            Texture.removeTextureFromCache(id);
        });
        this.textures = null;
        if (this.shapes) {
            this.shapes.destroy();
            this.shapes = null;
        }
        this.instance.destroy(true);
        this.instance = null;
        this.library = null;
    };
    return Timeline;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Timeline;

//# sourceMappingURL=../../map/rendering/animation/Timeline.js.map
