"use strict";
var EyeMesh_1 = require('./EyeMesh');
var path = require('path');
var jibo_1 = require('../jibo');
var AbstractEye = (function () {
    function AbstractEye(renderer, cache) {
        this.renderer = renderer;
        this.cache = cache;
        // Create an empty canvas texture because 
        // Texture.EMPTY renders as a black square
        var canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = 1;
        this._emptyTexture = PIXI.Texture.fromCanvas(canvas);
        this.stage = new PIXI.Container();
        this.filter = new PIXI.filters.ColorMatrixFilter();
        this.filter.reset();
        this.cache = cache;
        this.stage.filters = [this.filter];
        this.x = 0;
        this.y = 0;
        this.eyeMesh = new EyeMesh_1.default(this._emptyTexture);
        this.stage.addChild(this.eyeMesh);
        this.visible = true;
        this.connected = true;
    }
    Object.defineProperty(AbstractEye.prototype, "visible", {
        get: function () {
            return this.eyeMesh.visible;
        },
        set: function (visible) {
            this.eyeMesh.visible = visible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractEye.prototype, "texture", {
        set: function (value) {
            var _this = this;
            if (this._textureId && !this.cache) {
                jibo_1.default.loader.unload(this._textureId);
            }
            if (path.extname(value).length === 0) {
                this.visible = false;
                return;
            }
            // Trying to reload the texture that's already set
            // or it's being loaded currently, chill for a sec
            if (this._textureId === value) {
                return;
            }
            // Update the texture id and check for cached texture
            this._textureId = value;
            var cachedTexture = jibo_1.default.loader.cached(value);
            // If the texture is already cached, let's use that!
            if (cachedTexture) {
                this._texture =
                    this.eyeMesh.texture = cachedTexture;
            }
            else {
                // Load the eye texture to render
                jibo_1.default.loader.load({
                    id: value,
                    src: value,
                    type: 'texture',
                    cache: this.cache,
                    complete: function (err, texture) {
                        _this._texture = _this.eyeMesh.texture = texture;
                        _this.visible = true;
                    }
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractEye.prototype, "rotation", {
        set: function (value) {
            this.eyeMesh.rotation = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractEye.prototype, "x", {
        set: function (value) {
            this.stage.x = value + (this.renderer.width) / 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractEye.prototype, "y", {
        set: function (value) {
            this.stage.y = value + (this.renderer.height) / 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractEye.prototype, "red", {
        set: function (value) {
            this.filter.matrix[0] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractEye.prototype, "green", {
        set: function (value) {
            this.filter.matrix[6] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractEye.prototype, "blue", {
        set: function (value) {
            this.filter.matrix[12] = value;
        },
        enumerable: true,
        configurable: true
    });
    AbstractEye.prototype.destroy = function () {
        this.renderer = null;
        this.stage = null;
        this.filter = null;
        this.eyeMesh = null;
        this._texture = null;
        this._emptyTexture.destroy(true);
        this._emptyTexture = null;
        if (this._textureId) {
            jibo_1.default.loader.unload(this._textureId);
        }
    };
    return AbstractEye;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AbstractEye;

//# sourceMappingURL=../map/rendering/AbstractEye.js.map
