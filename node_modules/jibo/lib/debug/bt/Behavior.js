"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Status_1 = require('./Status');
var BaseElement_1 = require('./BaseElement');
/**
 * @class Behavior
 * @memberof module:jibo/bt
 * @description The baseclass to all behaviors.
 *
 * Subclasses: {@link module:jibo/bt/behaviors.ExecuteScript|ExecuteScript}, {@link module:jibo/bt/behaviors.ExecuteScriptAsync|ExecuteScriptAsync}, {@link module:jibo/bt/behaviors.Null|Null}, {@link module:jibo/bt/behaviors.TimeoutJs|TimeoutJs},
 * {@link module:jibo/bt/behaviors.Blink|Blink}, {@link module:jibo/bt/behaviors.Listen|Listen}, {@link module:jibo/bt/behaviors.ListenJs|ListenJs}, {@link module:jibo/bt/behaviors.LookAt|LookAt}, {@link module:jibo/bt/behaviors.PlayAnimation|PlayAnimation},
 * {@link module:jibo/bt/behaviors.PlayAudio|PlayAudio}, {@link module:jibo/bt/behaviors.ReadBarcode|ReadBarcode}, {@link module:jibo/bt/behaviors.Subtree|Subtree}, {@link module:jibo/bt/behaviors.SubtreeJs|SubtreeJs}, {@link module:jibo/bt/behaviors.TakePhoto|TakePhoto},
 * {@link module:jibo/bt/behaviors.TextToSpeech|TextToSpeech}, {@link module:jibo/bt/behaviors.TextToSpeechJs|TextToSpeechJs}, {@link module:jibo/bt.ParentBehavior|ParentBehavior}
 *
 * @constructor
 * @param {Object} [options] Options for the behavior
 * @param {String} [options.name=''] Name of the behavior instance
 * @param {Array<module:jibo/bt.Decorator>} [options.decorators=[]] Decorators
 * @param {module:jibo/bt.Blackboard} [options.blackboard=null] Blackobard instance
 * @param {module:jibo/bt.BehaviorEmitter} [options.emitter=null] Emitter instance
 * @param {String} [options.assetPack=''] Name of the asset pack
 * @param {Object} [defaultOptions] Defaults for options
 */
var Behavior = (function (_super) {
    __extends(Behavior, _super);
    function Behavior(options, defaultOptions) {
        if (defaultOptions === void 0) { defaultOptions = {}; }
        _super.call(this, options, Object.assign({
            decorators: []
        }, defaultOptions || {}));
        // Set the decorators
        this.decorators = this.options.decorators;
        /**
         * Reference to the composite parent behavior
         * @name module:jibo/bt.Behavior~parent
         * @type {module:jibo/bt.ParentBehavior}
         * @readOnly
         */
        this.parent = null;
        /**
         * List of decorators to wait on start
         * @name module:jibo/bt.Behavior~waitDecorators
         * @type {Array<module:jibo/bt.Decorator>}
         * @private
         */
        this.waitDecorators = [];
        /**
         * Number of wait decorators
         * @name module:jibo/bt.Behavior~waitDecoratorsLength
         * @type {int}
         * @private
         */
        this.waitDecoratorsLength = 0;
    }
    Object.defineProperty(Behavior.prototype, "decorators", {
        /**
         * Collection of decorators
         * @name module:jibo/bt.Behavior~decorators
         * @type {Array<module:jibo/bt.Decorator>}
         * @readOnly
         */
        get: function () { return this._decorators; },
        set: function (decorators) {
            var _this = this;
            this._decorators = decorators;
            decorators.forEach(function (decorator) {
                decorator.behavior = _this;
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Internal pause the behavior
     * @method module:jibo/bt.Behavior~_pause
     * @private
     */
    Behavior.prototype._pause = function () {
        this.previousStatus = this._status;
        this._status = Status_1.default.PAUSED;
    };
    /**
     * Internal unpause the behavior
     * @method module:jibo/bt.Behavior~_unpause
     * @private
     */
    Behavior.prototype._unpause = function () {
        this._status = this.previousStatus;
    };
    /**
     * Internal start the behavior
     * @method module:jibo/bt.Behavior~_start
     * @private
     * @return {Boolean} Status result
     */
    Behavior.prototype._start = function () {
        if (this._status === Status_1.default.IN_PROGRESS) {
            return false;
        }
        this.waitDecorators.length = this.waitDecoratorsLength = 0;
        if (this._decorators.length) {
            for (var i = 0; i < this._decorators.length; i++) {
                var success = this._decorators[i]._start();
                if (success === Status_1.default.WAIT) {
                    this.waitDecorators.push(this._decorators[i]);
                    this.waitDecoratorsLength++;
                }
                else if (!success) {
                    this._status = Status_1.default.FAILED;
                    this._stop();
                    return false;
                }
            }
        }
        if (this.waitDecorators.length === 0) {
            var success = this.start(); // actually call start
            this._status = success ? Status_1.default.IN_PROGRESS : Status_1.default.FAILED;
            if (!success) {
                this._stop();
            }
            return success;
        }
        else {
            this._status = Status_1.default.IN_PROGRESS;
            return true;
        }
    };
    /**
     * Internal stop the behavior
     * @method module:jibo/bt.Behavior~_stop
     * @private
     */
    Behavior.prototype._stop = function () {
        //stop the decorators
        if (this._decorators.length) {
            this._decorators.forEach(function (decorator) {
                if (decorator._status === Status_1.default.IN_PROGRESS) {
                    decorator._stop();
                }
            });
        }
        if (this._status === Status_1.default.IN_PROGRESS) {
            this._status = Status_1.default.INTERRUPTED;
            this.stop(); // actually call stop
        }
    };
    /**
     * Internal update the behavior
     * @method module:jibo/bt.Behavior~_update
     * @private
     * @return {module:jibo/bt.Status} Resulting status
     */
    Behavior.prototype._update = function () {
        if (this.waitDecoratorsLength > 0) {
            for (var i = 0; i < this.waitDecorators.length; i++) {
                if (this.waitDecorators[i]) {
                    var status_1 = this.waitDecorators[i]._update(this._status);
                    if (status_1 !== Status_1.default.WAIT) {
                        this.waitDecoratorsLength--;
                        this.waitDecorators[i] = null;
                    }
                }
            }
            if (this.waitDecoratorsLength === 0) {
                var success = this.start(); // actually call start
                this._status = success ? Status_1.default.IN_PROGRESS : Status_1.default.FAILED;
                if (!success) {
                    this._stop();
                }
            }
            else {
                return Status_1.default.IN_PROGRESS;
            }
        }
        if (this._status === Status_1.default.PAUSED) {
            var status_2 = this._status;
            if (this._decorators.length) {
                for (var i = 0; i < this._decorators.length; i++) {
                    status_2 = this._decorators[i]._update(this._status);
                    if (status_2 !== Status_1.default.IN_PROGRESS) {
                        this._stop();
                        return status_2;
                    }
                }
            }
            return this._status;
        }
        else if (this._status === Status_1.default.IN_PROGRESS) {
            var tempStatus = this.update(); // actually call update
            if (tempStatus !== Status_1.default.IN_PROGRESS) {
                this._status = tempStatus;
                this._stop();
            }
            //update the decorators
            if (this._decorators.length) {
                for (var i = 0; i < this._decorators.length; i++) {
                    tempStatus = this._decorators[i]._update(this._status);
                    if (tempStatus !== Status_1.default.IN_PROGRESS) {
                        this._stop();
                        this._status = tempStatus;
                        return this._status;
                    }
                }
            }
            return this._status;
        }
        else if (this._status === Status_1.default.SUCCEEDED) {
            return Status_1.default.SUCCEEDED;
        }
        else {
            return Status_1.default.FAILED;
        }
    };
    return Behavior;
}(BaseElement_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Behavior;

//# sourceMappingURL=../map/bt/Behavior.js.map
