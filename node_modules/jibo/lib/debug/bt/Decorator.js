"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Status_1 = require('./Status');
var BaseElement_1 = require('./BaseElement');
/**
 * @class Decorator
 * @memberof module:jibo/bt
 * @description Baseclass for all decorators. Decorators can force a behavior to succeed or fail. They can restart
 * a behavior once it's failed or succeeded, and they can modify when a behavior starts.
 *
 * Subclasses: {@link module:jibo/bt/decorators.Case|Case}, {@link module:jibo/bt/decorators.FailOnCondition|FailOnCondition}, {@link module:jibo/bt/decorators.StartOnCondition|StartOnCondition}, {@link module:jibo/bt/decorators.StartOnEvent|StartOnEvent}, {@link module:jibo/bt/decorators.StartOnAnimEvent|StartOnAnimEvent}, {@link module:jibo/bt/decorators.SucceedOnCondition|SucceedOnCondition}, {@link module:jibo/bt/decorators.Case|Case},
 * {@link module:jibo/bt/decorators.TimeoutFail|TimeoutFail}, {@link module:jibo/bt/decorators.TimeoutSucceed|TimeoutSucceed},{@link module:jibo/bt/decorators.TimeoutSucceedJs|TimeoutSucceedJs}, {@link module:jibo/bt/decorators.WhileCondition|WhileCondition}, {@link module:jibo/bt/decorators.StartOnEvent|StartOnEvent},
 * {@link module:jibo/bt/decorators.SucceedOnEmbedded|SucceedOnEmbedded}, {@link module:jibo/bt/decorators.SucceedOnEvent|SucceedOnEvent}, {@link module:jibo/bt/decorators.SucceedOnListen|SucceedOnListen}, {@link module:jibo/bt/decorators.SucceedOnListenJs|SucceedOnListenJs}
 *
 * @constructor
 * @param {Object} [options] Options for the decorator
 * @param {String} [options.name=''] Name of the decorator instance
 * @param {module:jibo/bt.Blackboard} [options.blackboard=null] Blackobard instance
 * @param {module:jibo/bt.BehaviorEmitter} [options.emitter=null] Emitter instance
 * @param {String} [options.assetPack=''] Name of the asset pack
 * @param {Object} [defaultOptions] Defaults for options
 */
var Decorator = (function (_super) {
    __extends(Decorator, _super);
    function Decorator(options, defaultOptions) {
        _super.call(this, options, defaultOptions);
        /**
         * The parent behavior
         * @name module:jibo/bt.Decorator~behavior
         * @type {Behavior}
         * @readOnly
         */
        this.behavior = null;
    }
    /**
     * Internal start from the behavior tree level
     * @method module:jibo/bt.Decorator~_start
     * @private
     * @return {Boolean} Success
     */
    Decorator.prototype._start = function () {
        var success = this.start();
        this._status = success ? Status_1.default.IN_PROGRESS : Status_1.default.FAILED;
        return success;
    };
    /**
     * Internal stop from the behavior tree level
     * @method module:jibo/bt.Decorator~_stop
     * @private
     */
    Decorator.prototype._stop = function () {
        this._status = Status_1.default.INTERRUPTED;
        this.stop();
    };
    /**
     * Internal update from the behavior tree level
     * @method module:jibo/bt.Decorator~_update
     * @private
     * @param {module:jibo/bt.Status} result
     * @return {module:jibo/bt.Status} resulting status
     */
    Decorator.prototype._update = function (result) {
        this._status = this.update(result);
        return this._status;
    };
    return Decorator;
}(BaseElement_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Decorator;

//# sourceMappingURL=../map/bt/Decorator.js.map
