"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Status_1 = require('./Status');
var Behavior_1 = require('./Behavior');
/**
 * @class ParentBehavior
 * @extends Behavior
 * @memberof module:jibo/bt
 * @description The baseclass to all behaviors that contain a collection of child Behaviors.
 *
 * Subclasses: {@link module:jibo/bt/behaviors.Parallel|Parallel}, {@link module:jibo/bt/behaviors.Random|Random}, {@link module:jibo/bt/behaviors.Sequence|Sequence}, {@link module:jibo/bt/behaviors.Switch|Switch}
 *
 * @constructor
 * @param {Object} [options] See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {Array<module:jibo/bt.Behavior>} [options.children=[]] Child behaviors
 * @param {Object} [defaultOptions] Defaults for options
 */
var ParentBehavior = (function (_super) {
    __extends(ParentBehavior, _super);
    function ParentBehavior(options, defaultOptions) {
        _super.call(this, options, Object.assign({
            children: []
        }, defaultOptions || {}));
        this.children = this.options.children;
    }
    Object.defineProperty(ParentBehavior.prototype, "children", {
        /**
         * Set the collection of children
         * @name module:jibo/bt.ParentBehavior~children
         * @type Array<module:jibo/bt.Behavior>
         */
        get: function () { return this._children; },
        set: function (children) {
            for (var i = 0; i < children.length; i++) {
                children[i].parent = this;
            }
            this._children = children;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Internal stop the behavior
     * @method module:jibo/bt.ParentBehavior#_stop
     * @private
     */
    ParentBehavior.prototype._stop = function () {
        if (this.children.length) {
            this.children.forEach(function (child) {
                if (child._status === Status_1.default.IN_PROGRESS) {
                    child._stop();
                }
            });
        }
        _super.prototype._stop.call(this);
    };
    return ParentBehavior;
}(Behavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ParentBehavior;

//# sourceMappingURL=../map/bt/ParentBehavior.js.map
