"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Decorator_1 = require('../Decorator');
var Status_1 = require('../Status');
/**
 * @callback module:jibo/bt/decorators.SucceedOnCondition~SucceedOnConditionConditional
 * @returns {Boolean} `true` to succeed the decorated behavior. `false` otherwise.
 */
/**
 * @class SucceedOnCondition
 * @extends module:jibo/bt.Decorator
 * @memberof module:jibo/bt/decorators
 * @description
 * Explicitly interrupts the behavior it's decorating and returns Status.SUCCEEDED if the
 * conditional evaluates to `true`.
 * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.
 * @param {Function} [options.init] Function called at the start of this behavior. Used to initialize any
 * variables or data.
 * @param {module:jibo/bt/decorators.SucceedOnCondition~SucceedOnConditionConditional} options.conditional Function called every frame. Return `true`
 * to force behavior to succeed.
 */
var SucceedOnCondition = (function (_super) {
    __extends(SucceedOnCondition, _super);
    function SucceedOnCondition(options) {
        _super.call(this, options, {
            init: function () { }
        });
    }
    SucceedOnCondition.prototype.start = function () {
        this.options.init();
        return true;
    };
    SucceedOnCondition.prototype.update = function (result) {
        if (this.options.conditional()) {
            return Status_1.default.SUCCEEDED;
        }
        return result;
    };
    return SucceedOnCondition;
}(Decorator_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SucceedOnCondition;

//# sourceMappingURL=../../map/bt/decorators/SucceedOnCondition.js.map
