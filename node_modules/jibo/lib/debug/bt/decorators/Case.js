"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Decorator_1 = require('../Decorator');
/**
 * @callback module:jibo/bt/decorators.Case~CaseConditional
 * @returns {boolean} Return `true` to succeed the decorated behavior. `false` otherwise.
 */
/**
 * @class Case
 * @extends module:jibo/bt.Decorator
 * @memberof module:jibo/bt/decorators
 * @description
 * Performs a single check before the behavior it's decorating starts. If that check fails, `Case` fails the
 * behavior. Useful for decorating behaviors under a {@link module:jibo/bt/behaviors.Switch|Switch} behavior.
 * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.
 * @param {module:jibo/bt/decorators.Case~CaseConditional} options.conditional Function called every frame.
 * Return `false` when you want component to fail.
 */
var Case = (function (_super) {
    __extends(Case, _super);
    function Case() {
        _super.apply(this, arguments);
    }
    Case.prototype.start = function () {
        return this.options.conditional();
    };
    Case.prototype.update = function (result) {
        return result;
    };
    return Case;
}(Decorator_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Case;

//# sourceMappingURL=../../map/bt/decorators/Case.js.map
