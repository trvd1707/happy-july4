"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Decorator_1 = require('../Decorator');
var Status_1 = require('../Status');
var Runtime_1 = require('../../Runtime');
/**
 * @callback module:jibo/bt/decorators.StartOnAnimEvent~StartOnEventOnReceived
 * @argument {AnimationInstance} instance The animation instance the event was dispatched from.
 * @argument {Object} payload A payload defined in the `.keys` file.
 */
/**
 * @class StartOnAnimEvent
 * @extends module:jibo/bt.Decorator
 * @memberof module:jibo/bt/decorators
 * @description
 * `StartOnAnimEvent` will begin the execution of its behavior when an animation fires an event from its event layer.
 * @param {String} options.eventName - Name of the event this behavior listens for.
 * @param {module:jibo/bt/decorators.StartOnAnimEvent~StartOnEventOnReceived} options.onReceived - Callback for when `eventName` is dispatched.
 */
var StartOnAnimEvent = (function (_super) {
    __extends(StartOnAnimEvent, _super);
    function StartOnAnimEvent(options) {
        _super.call(this, options);
        this.didStart = false;
        this._onEvent = this._onEvent.bind(this);
    }
    StartOnAnimEvent.prototype.start = function () {
        this.didStart = false;
        if (this.options.eventName.length !== 0) {
            Runtime_1.default.instance.behaviorEmitter.on(this.options.eventName, this._onEvent);
        }
        return Status_1.default.WAIT;
    };
    StartOnAnimEvent.prototype._onEvent = function (animInstance, payload) {
        if (this.options.onReceived) {
            this.options.onReceived(animInstance, payload);
        }
        this.didStart = true;
        Runtime_1.default.instance.behaviorEmitter.removeListener(this.options.eventName, this._onEvent);
    };
    StartOnAnimEvent.prototype.stop = function () {
        // remove listener
        if (this.options.eventName.length !== 0) {
            Runtime_1.default.instance.behaviorEmitter.removeListener(this.options.eventName, this._onEvent);
        }
    };
    StartOnAnimEvent.prototype.update = function (result) {
        if (this.didStart) {
            return result;
        }
        else {
            return Status_1.default.WAIT;
        }
    };
    return StartOnAnimEvent;
}(Decorator_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = StartOnAnimEvent;

//# sourceMappingURL=../../map/bt/decorators/StartOnAnimEvent.js.map
