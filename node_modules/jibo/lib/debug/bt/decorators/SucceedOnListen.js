"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Decorator_1 = require('../Decorator');
var Status_1 = require('../Status');
var SucceedOnListenJs_1 = require('./SucceedOnListenJs');
var PathUtils_1 = require('../../utils/PathUtils');
var fs = require('fs');
/**
 * @typedef {Object} module:jibo/bt/decorators.SucceedOnListen~Options
 * @property {boolean} heyJibo Listen for "Hey, Jibo" first.
 * @property {boolean} detectEnd Listen for end of speech.
 * @property {boolean} incremental Return incremental ASR results as they are streamed from the cloud.
 * @property {String} authenticateSpeaker Authenticates against that person.
 */
/**
 * Function that returns the options object.
 * @callback module:jibo/bt/decorators.SucceedOnListen~GetOptions
 * @returns {module:jibo/bt/decorators.SucceedOnListen~Options}
 */
/**
 * Called when the {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} is constructed.
 * @callback module:jibo/bt/decorators.SucceedOnListen~OnResult
 * @param {module:jibo/bt.ListenEmitter} listener Use this instance to listen for listen events.
 */
/**
 * @class SucceedOnListen
 * @extends module:jibo/bt.Decorator
 * @memberof module:jibo/bt/decorators
 * @description Performs audio speech recognition and applies and parses the results according to a rules file.
 * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.
 * @param {module:jibo/bt/decorators.SucceedOnListen~GetOptions} getOptions Returns the options object.
 * @param {String} options.rule Path the to `.rule` file. This assumes the path starts at `${project}/rules`.
 * @param {module:jibo/bt/decorators.SucceedOnListen~OnResult} options.onResult Called and passed a {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} object. Events are fired from the Listener
 *                                   at certain points in this behavior's lifecycle.
 */
var SucceedOnListen = (function (_super) {
    __extends(SucceedOnListen, _super);
    function SucceedOnListen(options) {
        _super.call(this, options);
        this.status = Status_1.default.INVALID;
        this.options.rule = PathUtils_1.default.setDefaultPath('rules', options.rule);
    }
    SucceedOnListen.prototype.start = function () {
        var _this = this;
        this.status = Status_1.default.IN_PROGRESS;
        var getRule = function (callback) {
            var uri = PathUtils_1.default.getAssetUri(_this.options.rule, _this.assetPack);
            fs.readFile(uri, 'utf8', function (err, data) {
                if (err) {
                    console.error('Rule file does not exist: ' + uri);
                }
                callback(data);
            });
        };
        this.decorator = new SucceedOnListenJs_1.default({
            getOptions: this.options.getOptions,
            getRule: getRule,
            onResult: this.options.onResult,
            emitter: this.emitter,
            blackboard: this.blackboard,
            assetPack: this.assetPack
        });
        return this.decorator._start();
    };
    SucceedOnListen.prototype.stop = function () {
        if (this.decorator) {
            this.decorator._stop();
        }
        this.decorator = undefined;
    };
    SucceedOnListen.prototype.update = function (result) {
        if (this.decorator) {
            var status_1 = this.decorator._update(result);
            if (status_1 === Status_1.default.SUCCEEDED) {
                this.decorator = undefined;
            }
            return status_1;
        }
        return this.status;
    };
    return SucceedOnListen;
}(Decorator_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SucceedOnListen;

//# sourceMappingURL=../../map/bt/decorators/SucceedOnListen.js.map
