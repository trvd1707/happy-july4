"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Decorator_1 = require('../Decorator');
var Status_1 = require('../Status');
/**
 * @class SucceedOnEvent
 * @extends module:jibo/bt.Decorator
 * @memberof module:jibo/bt/decorators
 * @description
 * Succeeds the behavior it's decorating when an event is emitter from a behavior tree's
 * global `emitter`.
 * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.
 * @param {String} options.eventName - The name of the event to listen for.
 * @param {Function} options.onEvent - called when the event is fired. Any payload with the event is passed in.
 */
var SucceedOnEvent = (function (_super) {
    __extends(SucceedOnEvent, _super);
    function SucceedOnEvent(options) {
        _super.call(this, options);
        this._onEvent = this._onEvent.bind(this);
        this.status = Status_1.default.INVALID;
    }
    SucceedOnEvent.prototype.start = function () {
        this.emitter.once(this.options.eventName, this._onEvent);
        this.status = Status_1.default.IN_PROGRESS;
        return true;
    };
    SucceedOnEvent.prototype.stop = function () {
        this.emitter.removeListener(this.options.eventName, this._onEvent);
    };
    SucceedOnEvent.prototype._onEvent = function () {
        this.options.onEvent.apply(null, arguments);
        this.status = Status_1.default.SUCCEEDED;
    };
    SucceedOnEvent.prototype.update = function (result) {
        if (this.status === Status_1.default.SUCCEEDED) {
            return Status_1.default.SUCCEEDED;
        }
        return result;
    };
    return SucceedOnEvent;
}(Decorator_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SucceedOnEvent;

//# sourceMappingURL=../../map/bt/decorators/SucceedOnEvent.js.map
