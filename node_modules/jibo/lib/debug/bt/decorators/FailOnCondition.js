"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Decorator_1 = require('../Decorator');
var Status_1 = require('../Status');
/**
 * @callback module:jibo/bt/decorators.FailOnCondition~FailOnConditionConditional
 * @extends module:jibo/bt.Behavior
 * @returns {boolean} `true` when you want component to Fail.
 */
/**
 * @class FailOnCondition
 * @extends module:jibo/bt.Decorator
 * @memberof module:jibo/bt/decorators
 * @description Explicitly interrupts the behavior it's decorating and returns Status.FAILED if the
 * conditional evaluates to `true`.
 * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.
 * @param {Function} [options.init] Function called at the start of this behavior. Used to initialize any
 * variables or data.
 * @param {module:jibo/bt/decorators.FailOnCondition~FailOnConditionConditional} options.conditional Function called every frame. Return `true`
 * when you want component to fail.
 */
var FailOnCondition = (function (_super) {
    __extends(FailOnCondition, _super);
    function FailOnCondition(options) {
        _super.call(this, options, {
            init: function () { }
        });
    }
    FailOnCondition.prototype.start = function () {
        this.options.init();
        if (this.options.conditional()) {
            return false;
        }
        return true;
    };
    FailOnCondition.prototype.update = function (result) {
        if (this.options.conditional()) {
            return Status_1.default.FAILED;
        }
        return result;
    };
    return FailOnCondition;
}(Decorator_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = FailOnCondition;

//# sourceMappingURL=../../map/bt/decorators/FailOnCondition.js.map
