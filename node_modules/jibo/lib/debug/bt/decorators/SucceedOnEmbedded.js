"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Decorator_1 = require('../Decorator');
var Status_1 = require('../Status');
var Runtime_1 = require('../../Runtime');
/**
 * @class EmbeddedListenEmitter
 * @description Passed to the {@link module:jibo/bt/decorators.SucceedOnEmbedded~OnResult} function of the {@link module:jibo/bt/decorators.SucceedOnEmbedded|SucceedOnEmbedded} behavior.
 * @extends EventEmitter
 * @memberof module:jibo/bt
 */
/**
 * @typedef {Object} jibo.bt.decorators.SucceedOnEmbedded~Options
 */
/**
 * Called when the {@link module:jibo/bt.EmbeddedListenEmitter|EmbeddedListenEmitter} is constructed.
 * @callback module:jibo/bt/decorators.SucceedOnEmbedded~OnResult
 * @param {module:jibo/bt.EmbeddedListenEmitter} listener Use this instance to listen for listen events.
 */
/**
 * @class SucceedOnEmbedded
 * @extends module:jibo/bt.Decorator
 * @memberof module:jibo/bt/decorators
 * @description Succeeds the behavior its decorating when the specified audio phrase is spotted.
 * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.
 * @param {module:jibo/bt/decorators.SucceedOnEmbedded.Rules} options.rule The embedded rule to listen for.
 * @param {module:jibo/bt/decorators.SucceedOnEmbedded~OnResult} options.onResult Called and passed a {@link module:jibo/bt.EmbeddedListenEmitter|EmbeddedListenEmitter} object. Events are
 *                                     fired from the emitter at certain points in this behavior's lifecycle.
 */
var SucceedOnEmbedded = (function (_super) {
    __extends(SucceedOnEmbedded, _super);
    function SucceedOnEmbedded(options) {
        _super.call(this, options);
        this.status = Status_1.default.INVALID;
    }
    SucceedOnEmbedded.prototype.start = function () {
        var _this = this;
        this.status = Status_1.default.IN_PROGRESS;
        var asr = Runtime_1.default.instance.asr;
        if (!asr.isInitialized) {
            console.warn('Running listen without ASR service');
            return true;
        }
        var options = {};
        options.embeddedOnly = true;
        this.listener = asr.createListener(options, this.options.rule);
        this.listener.start();
        this.listener.on('embedded', function (result, speaker) {
            /**
             * Fired when the phrase is spotted.
             * @event module:jibo/bt.EmbeddedListenEmitter#hey-jibo
             * @param {Object} result
             * @param {Array} speakers Text independent speaker ID results.
             */
            _this.emitter.emit('hey-jibo', result, speaker);
            _this.listener.removeAllListeners();
            _this.emitter.removeAllListeners();
            _this.status = Status_1.default.SUCCEEDED;
        });
        this.listener.on('error', function (error) {
            /**
             * Fired when there is an error.
             * @event module:jibo/bt.EmbeddedListenEmitter#error
             * @param {String} error
             */
            _this.emitter.emit('error', error);
        });
        this.listener.on('finished', function () {
            _this.listener.removeAllListeners();
            _this.emitter.removeAllListeners();
            _this.status = Status_1.default.SUCCEEDED;
        });
        this.options.onResult(this.emitter);
        this.status = Status_1.default.IN_PROGRESS;
        return true;
    };
    SucceedOnEmbedded.prototype.stop = function () {
        this.emitter.removeAllListeners();
        this.listener.removeAllListeners();
    };
    SucceedOnEmbedded.prototype.update = function (result) {
        if (this.status === Status_1.default.IN_PROGRESS) {
            return result;
        }
        else {
            return this.status;
        }
    };
    return SucceedOnEmbedded;
}(Decorator_1.default));
/**
 * Embedded listen rule types.
 * @name module:jibo/bt/decorators.SucceedOnEmbedded.Rules
 * @property {String} HEY_jibo Listen for "Hey, Jibo"
 * @static
 * @enum {String}
 */
SucceedOnEmbedded.Rules = {
    /** Listen for "Hey Jibo" */
    HEY_jibo: "hey_jibo"
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SucceedOnEmbedded;

//# sourceMappingURL=../../map/bt/decorators/SucceedOnEmbedded.js.map
