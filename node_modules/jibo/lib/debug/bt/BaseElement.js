"use strict";
var Status_1 = require('./Status');
/**
 * @class BaseElement
 * @memberof module:jibo/bt
 * @private
 * @description Parent class for Behavior and Decorator.
 *
 * Subclasses: {@link module:jibo/bt/behaviors.Behavior|Behavior}, {@link module:jibo/bt/behaviors.ParentBehavior|ParentBehavior}, {@link module:jibo/bt/behaviors.Decorator|Decorator}
 *
 * @constructor
 * @param {Object} [options] Options for the behavior
 */
var BaseElement = (function () {
    function BaseElement(options, defaultOptions) {
        this._status = Status_1.default.INVALID;
        options = options || {};
        defaultOptions = defaultOptions || {};
        /**
         * The list of options
         * @name module:jibo/bt.Behavior~options
         * @type {Object}
         * @readOnly
         */
        /**
         * The list of options
         * @name module:jibo/bt.Decorator~options
         * @type {Object}
         * @readOnly
         */
        this.options = Object.assign({
            name: "",
            emitter: null,
            blackboard: null,
            assetPack: ""
        }, defaultOptions, options);
        /**
         * The current internal status of the element
         * @name module:jibo/bt.BaseElement~_status
         * @type {String}
         * @private
         */
        this._status = Status_1.default.INVALID;
        /**
         * Instance of the blackboard
         * @name module:jibo/bt.Behavior~blackboard
         * @type {module:jibo/bt.Blackboard}
         * @readOnly
         */
        /**
         * Instance of the blackboard
         * @name module:jibo/bt.Decorator~blackboard
         * @type {module:jibo/bt.Blackboard}
         * @readOnly
         */
        this.blackboard = this.options.blackboard;
        /**
         * Instance of the behavior emitter
         * @name module:jibo/bt.Behavior~emitter
         * @type {module:jibo/bt.BehaviorEmitter}
         * @readOnly
         */
        /**
         * Instance of the behavior emitter
         * @name module:jibo/bt.Decorator~emitter
         * @type {module:jibo/bt.BehaviorEmitter}
         * @readOnly
         */
        this.emitter = this.options.emitter;
        /**
         * Name of the asset pack
         * @name module:jibo/bt.Behavior~assetPack
         * @type {String}
         * @readOnly
         */
        /**
         * Name of the asset pack
         * @name module:jibo/bt.Decorator~assetPack
         * @type {String}
         * @readOnly
         */
        this.assetPack = this.options.assetPack || "";
    }
    Object.defineProperty(BaseElement.prototype, "name", {
        /**
         * Name of the behavior
         * @name module:jibo/bt.Behavior~name
         * @type {String}
         * @readOnly
         */
        /**
         * Name of the behavior
         * @name module:jibo/bt.Decorator~name
         * @type {String}
         * @readOnly
         */
        get: function () {
            return this.options.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseElement.prototype, "currentStatus", {
        /**
         * Get the current status
         * @name module:jibo/bt.Behavior~currentStatus
         * @type {String}
         * @readOnly
         */
        /**
         * Get the current status
         * @name module:jibo/bt.Decorator~currentStatus
         * @type {String}
         * @readOnly
         */
        get: function () {
            return this._status;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Starts the behavior or decorator
     * @method module:jibo/bt.Decorator~start
     * @returns {Boolean} `true` if this element is started successfully. `false` otherwise.
     */
    /**
     * Starts the behavior or decorator
     * @method module:jibo/bt.Behavior~start
     * @returns {Boolean} `true` if this element is started successfully. `false` otherwise.
     */
    BaseElement.prototype.start = function () {
        return true;
    };
    /**
     * Stops the behavior or decorator, must override
     * @method module:jibo/bt.Behavior~stop
     */
    /**
     * Stops the behavior or decorator, must override
     * @method module:jibo/bt.Decorator~stop
     */
    BaseElement.prototype.stop = function () {
        return;
    };
    return BaseElement;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BaseElement;

//# sourceMappingURL=../map/bt/BaseElement.js.map
