"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ParentBehavior_1 = require('../ParentBehavior');
var Status_1 = require('../Status');
/**
 * @class Switch
 * @extends module:jibo/bt.ParentBehavior
 * @memberof module:jibo/bt/behaviors
 * @description Runs its child nodes in sequence until one succeeds. Fails if all of the children failed
 * and succeeds if one child succeeded.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {Array<module:jibo/bt.Behavior>} [options.children=[]] - An array of the Switch's child behaviors.
 */
var Switch = (function (_super) {
    __extends(Switch, _super);
    function Switch(options) {
        _super.call(this, options);
        this.current = -1;
    }
    Switch.prototype.start = function () {
        if (this.children.length === 0) {
            return false;
        }
        this.current = 0;
        return this.findStart();
    };
    Switch.prototype.findStart = function () {
        var startOk = false;
        while (!startOk && this.current < this.children.length) {
            startOk = this.children[this.current]._start();
            if (!startOk) {
                this.current++;
            }
        }
        return true;
    };
    Switch.prototype.stop = function () {
        this.current = -1;
    };
    Switch.prototype.update = function () {
        if (this.current !== -1 && this.current < this.children.length) {
            var childStatus = this.children[this.current]._update();
            if (childStatus === Status_1.default.FAILED) {
                this.current++;
                if (this.current >= this.children.length || !this.findStart()) {
                    return Status_1.default.SUCCEEDED;
                }
                else {
                    return Status_1.default.IN_PROGRESS;
                }
            }
            else if (childStatus === Status_1.default.PAUSED) {
                return Status_1.default.IN_PROGRESS;
            }
            return childStatus;
        }
        return Status_1.default.SUCCEEDED;
    };
    return Switch;
}(ParentBehavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Switch;

//# sourceMappingURL=../../map/bt/behaviors/Switch.js.map
