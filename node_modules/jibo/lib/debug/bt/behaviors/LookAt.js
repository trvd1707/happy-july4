"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Behavior_1 = require('../Behavior');
var Status_1 = require('../Status');
var Runtime_1 = require('../../Runtime');
var animation_utilities_1 = require('animation-utilities');
/**
 * @class Point3D
 * @memberof module:jibo/bt/behaviors
 * @description Defines a point in 3D space.
 * @prop {number} x The forward-facing vector in Jibo's coordinate frame (meters).
 * @prop {number} y The left-facing vector in Jibo's coordinate frame (meters).
 * @prop {number} z The up-facing vector in Jibo's coordinate frame (meters).
 */
/**
 * @class LookAt
 * @extends module:jibo/bt.Behavior
 * @memberof module:jibo/bt/behaviors
 * @description Makes Jibo look at a 3D point in space.
 *              `LookAt` has two modes. In single-shot mode, this behavior makes Jibo look at the 3D point returned
 *              by `getTarget` and succeeds when Jibo reaches his this target. In continuous mode, `getTarget` is
 *              called every frame, and this behavior will remain in progress indefinitely until explicitly stopped by a
 *              parent bahevior or a decorator.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {Function} options.getTarget Returns a {@link module:jibo/bt/behaviors.Point3D} object.
 * @param {boolean} [options.isContinuous=false] `true` if this behavior is in continous-mode. `false` if in single-shot look-at.
 * @param {Function} options.config Called and passed a {@link LookatBuilder} object for configuration purposes. Do not call
 *                          {@link LookatBuilder#startLookat}. This is called automatically by the behavior.
 */
var LookAt = (function (_super) {
    __extends(LookAt, _super);
    function LookAt(options) {
        _super.call(this, options, {
            isContinuous: false
        });
        this.threeVec = new animation_utilities_1.THREE.Vector3(0, 0, 0);
        this.status = Status_1.default.INVALID;
    }
    LookAt.prototype.start = function () {
        this.status = Status_1.default.IN_PROGRESS;
        this.builder = Runtime_1.default.instance.animate.createLookatBuilder();
        this.onStoppedBind = this.onStopped.bind(this);
        this.builder.on('STOPPED', this.onStoppedBind);
        this.builder.setContinuousMode(this.options.isContinuous);
        if (this.options.config !== undefined) {
            this.options.config(this.builder);
        }
        var target = this.options.getTarget();
        this.threeVec.set(target.x, target.y, target.z);
        this.lookAtInstance = this.builder.startLookat(this.threeVec);
        return true;
    };
    LookAt.prototype.onStopped = function () {
        this.status = Status_1.default.SUCCEEDED;
    };
    LookAt.prototype.stop = function () {
        if (this.lookAtInstance) {
            this.lookAtInstance.stop();
        }
    };
    LookAt.prototype.update = function () {
        if (this.options.isContinuous && (this.lookAtInstance !== undefined)) {
            var target = this.options.getTarget();
            this.threeVec.set(target.x, target.y, target.z);
            this.lookAtInstance.updateTarget(this.threeVec);
        }
        return this.status;
    };
    return LookAt;
}(Behavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LookAt;

//# sourceMappingURL=../../map/bt/behaviors/LookAt.js.map
