"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Behavior_1 = require('../Behavior');
var Subtree_1 = require('./Subtree');
/**
 * @class SubtreeJs
 * @extends module:jibo/bt.Behavior
 * @memberof module:jibo/bt/behaviors
 * @description Encapsulates an external subtree file (`.bt` file) into a single behavior. This behavior fails if the
 * `.bt` tree fails and succeeds if that tree succeeds.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {Function} options.getFileName Returns the path to the `.bt` file this behavior encapsulates. This assumes the root
 *                               of all `.bt` files is in `${project}/behaviors`.
 * @param {Function} options.getNotepad Returns an object that will become this referenced tree's notepad. Think of this as the
 *                              arguments to this subtree.
 * @param {Function} options.onResult Called when the external tree either fails or succeeds. A result object is passed as an argument.
 *                            This result object is populated by the external tree. Think of this as the return value.
 */
var SubtreeJs = (function (_super) {
    __extends(SubtreeJs, _super);
    function SubtreeJs(options) {
        _super.call(this, options);
        this.subtree = new Subtree_1.default({
            name: this.name,
            getNotepad: options.getNotepad,
            onResult: options.onResult,
            blackboard: this.blackboard,
            emitter: this.emitter,
            assetPack: this.assetPack
        });
    }
    SubtreeJs.prototype.start = function () {
        var _this = this;
        this.options.getFileName(function (behaviorPath) {
            _this.subtree.behaviorPath = behaviorPath;
            _this.subtree._start();
        });
        return true;
    };
    SubtreeJs.prototype.stop = function () {
        this.subtree._stop();
    };
    SubtreeJs.prototype.update = function () {
        return this.subtree._update();
    };
    return SubtreeJs;
}(Behavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SubtreeJs;

//# sourceMappingURL=../../map/bt/behaviors/SubtreeJs.js.map
