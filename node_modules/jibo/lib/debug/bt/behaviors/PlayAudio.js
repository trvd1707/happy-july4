"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Behavior_1 = require('../Behavior');
var Status_1 = require('../Status');
var PathUtils_1 = require('../../utils/PathUtils');
var jibo_1 = require('../../jibo');
/**
 * @class PlayAudio
 * @extends module:jibo/bt.Behavior
 * @memberof module:jibo/bt/behaviors
 * @description Plays the audio specified by `audioPath`. Succeeds when the audio file is finished playing.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {String} options.audioPath The path to any audo file format supported by HTML5 Audio. This behaviuor assumes `${project}/audio`
 *                           is the root for all the audio files.
 * @param {Boolean} options.cache=true True to cache the audio. False to play once and destroy.
 */
var PlayAudio = (function (_super) {
    __extends(PlayAudio, _super);
    function PlayAudio(options) {
        _super.call(this, options);
        //backward support
        if (typeof this.options.cache === 'undefined') {
            this.options.cache = true;
        }
        this.status = Status_1.default.INVALID;
        this.alias = this.options.audioPath;
        this.cache = this.options.cache;
        this.sound = null;
    }
    PlayAudio.prototype.start = function () {
        this.status = Status_1.default.IN_PROGRESS;
        var sound = jibo_1.default.loader.cached(this.alias);
        if (this.cache && sound) {
            this.onLoaded(null, sound);
        }
        else {
            jibo_1.default.loader.load({
                type: 'sound',
                id: this.alias,
                src: PathUtils_1.default.getAudioUri(this.alias, this.assetPack),
                cache: true,
                complete: this.onLoaded.bind(this)
            });
        }
        return true;
    };
    PlayAudio.prototype.onLoaded = function (err, sound) {
        var _this = this;
        this.sound = sound;
        this.sound.play(function () {
            _this.reset();
            _this.status = Status_1.default.SUCCEEDED;
        });
    };
    PlayAudio.prototype.stop = function () {
        if (this.sound) {
            this.sound.stop();
        }
        this.reset();
    };
    PlayAudio.prototype.reset = function () {
        this.sound = null;
        if (!this.cache) {
            jibo_1.default.loader.unload(this.alias);
        }
    };
    PlayAudio.prototype.update = function () {
        return this.status;
    };
    return PlayAudio;
}(Behavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PlayAudio;

//# sourceMappingURL=../../map/bt/behaviors/PlayAudio.js.map
