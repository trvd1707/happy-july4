"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ParentBehavior_1 = require('../ParentBehavior');
var Status_1 = require('../Status');
/**
 * @class Sequence
 * @extends module:jibo/bt.ParentBehavior
 * @memberof module:jibo/bt/behaviors
 * @description `Sequence` Runs its child nodes in sequence until one fails. Fails if one of the children fails
 * and succeeds if all its children succeeded.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {Array<module:jibo/bt.Behavior>} [options.children=[]] - An array of child behaviors.
 */
var Sequence = (function (_super) {
    __extends(Sequence, _super);
    function Sequence(options) {
        _super.call(this, options);
        this.current = -1;
    }
    Sequence.prototype.start = function () {
        if (this.children.length === 0) {
            return true;
        }
        this.current = 0;
        var success = this.children[this.current]._start();
        this.current = success ? this.current : -1;
        return success;
    };
    Sequence.prototype.stop = function () {
        if (this.current !== -1 && this.current < this.children.length) {
            this.current = -1;
        }
    };
    Sequence.prototype.update = function () {
        if (this.children.length === 0 || this.status === Status_1.default.SUCCEEDED) {
            return Status_1.default.SUCCEEDED;
        }
        while (this.current !== -1 && this.current < this.children.length) {
            var childStatus = this.children[this.current]._update();
            if (childStatus === Status_1.default.SUCCEEDED) {
                this.current++;
                if (this.current < this.children.length) {
                    var startSuccess = this.children[this.current]._start();
                    if (!startSuccess) {
                        return Status_1.default.FAILED;
                    }
                }
                else {
                    return Status_1.default.SUCCEEDED;
                }
            }
            else if (childStatus === Status_1.default.IN_PROGRESS || childStatus == Status_1.default.PAUSED) {
                return Status_1.default.IN_PROGRESS;
            }
            else {
                return Status_1.default.FAILED;
            }
        }
        return Status_1.default.SUCCEEDED;
    };
    return Sequence;
}(ParentBehavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Sequence;

//# sourceMappingURL=../../map/bt/behaviors/Sequence.js.map
