"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Behavior_1 = require('../Behavior');
var Status_1 = require('../Status');
var Null_1 = require('./Null');
var TimeoutSucceedJs_1 = require('../decorators/TimeoutSucceedJs');
/**
 * @callback module:jibo/bt/behaviors.TimeoutJs~GetTime
 * @returns {number} Time in milliseconds until the behavior succeeds.
 */
/**
 * @class TimeoutJs
 * @extends module:jibo/bt.Behavior
 * @memberof module:jibo/bt/behaviors
 * @description
 * Succeeds only after the specified amount of time.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {module:jibo/bt/behaviors.TimeoutJs~GetTime} options.getTime - Time in milliseconds until `TimeoutJs` succeeds.
 */
var TimeoutJs = (function (_super) {
    __extends(TimeoutJs, _super);
    function TimeoutJs(options) {
        _super.call(this, options);
        var decorator = new TimeoutSucceedJs_1.default({
            getTime: options.getTime
        });
        this.behavior = new Null_1.default({
            decorators: [decorator]
        });
        this.status = Status_1.default.INVALID;
    }
    TimeoutJs.prototype.start = function () {
        this.status = Status_1.default.IN_PROGRESS;
        return this.behavior._start();
    };
    TimeoutJs.prototype.stop = function () {
        this.behavior._stop();
    };
    TimeoutJs.prototype.update = function () {
        this.status = this.behavior._update();
        return this.status;
    };
    return TimeoutJs;
}(Behavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TimeoutJs;

//# sourceMappingURL=../../map/bt/behaviors/TimeoutJs.js.map
