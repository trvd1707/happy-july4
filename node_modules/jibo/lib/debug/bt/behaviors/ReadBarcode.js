"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Behavior_1 = require('../Behavior');
var Status_1 = require('../Status');
var Runtime_1 = require('../../Runtime');
/**
 * Function that returns the options object.
 * @callback module:jibo/bt/behaviors.ReadBarcode~onBarcode
 * @param {string|null} error `null` if no error.
 * @param {Object} data The result of the  barcode if one is found.
 * @param {number} data.type The type of barcode found. The types are 0 (EAN8), 1 (UPCE), 2 (ISBN10), 3 (UPCA), 4 (EAN13),
 *                           5 (ISBN13), 6 (Interleaved 2 of 5), 7 (Code 39), 8 (PDF417), 9 (QR-Code), 10 (Code 128).
 * @param {String} data.content The payload of the detected barcode.
 */
/**
 * @class ReadBarcode
 * @extends module:jibo/bt.Behavior
 * @memberof module:jibo/bt/behaviors
 * @description Makes Jibo take a photo and search for a barcode or QR code in that image.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {module:jibo/bt/behaviors.ReadBarcode~onBarcode} options.onBarcode Called after Jibo takes a picture. The results are passed to this function.
 */
var ReadBarcode = (function (_super) {
    __extends(ReadBarcode, _super);
    function ReadBarcode(options) {
        _super.call(this, options);
        this.status = Status_1.default.INVALID;
    }
    ReadBarcode.prototype.start = function () {
        var _this = this;
        this.status = Status_1.default.IN_PROGRESS;
        Runtime_1.default.instance.lps.readBarcode(function (error, data) {
            _this.options.onBarcode(error, data);
            _this.status = Status_1.default.SUCCEEDED;
        });
        return true;
    };
    ReadBarcode.prototype.update = function () {
        return this.status;
    };
    return ReadBarcode;
}(Behavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ReadBarcode;

//# sourceMappingURL=../../map/bt/behaviors/ReadBarcode.js.map
