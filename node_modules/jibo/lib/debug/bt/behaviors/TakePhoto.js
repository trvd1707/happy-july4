"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Behavior_1 = require('../Behavior');
var Status_1 = require('../Status');
var Runtime_1 = require('../../Runtime');
/**
 * Callback for when Jibo takes a photo.
 * ```
 * let behavior = TakePhoto(2, 2, (url) => {
 *    let img = new Imgage();
 *    img.src = url;
 * });
 * ```
 * @callback module:jibo/bt/behaviors.TakePhoto~OnPhoto
 * @param {String} url The image URL.
 */
/**
 * @class TakePhoto
 * @extends module:jibo/bt.Behavior
 * @memberof module:jibo/bt/behaviors
 * @description Makes Jibo take a photo and will return a URL to get the contents of that photo.
 * @param {Object} options Options
 * @param {number} options.resolution `1` for a 672x380 photo. `2` for 1280x720 photo. `3` for 1920x1080 photo. `4` for 2688x1520 photo.
 * @param {module:jibo/bt/behaviors.TakePhoto~OnPhoto} options.onPhoto Called after Jibo takes a picture. The image URL is passed to this function.
 * @param {boolean} [options.noDistortion=true] Removes camera distortion from photo.
 */
var TakePhoto = (function (_super) {
    __extends(TakePhoto, _super);
    function TakePhoto(options) {
        _super.call(this, options, {
            noDistortion: true
        });
        this.status = Status_1.default.INVALID;
    }
    TakePhoto.prototype.onPhoto = function (error, imageUrl) {
        this.options.onPhoto(error, imageUrl);
        this.status = Status_1.default.SUCCEEDED;
    };
    TakePhoto.prototype.start = function () {
        var _this = this;
        this.status = Status_1.default.IN_PROGRESS;
        Runtime_1.default.instance.lps.takePhoto(this.options.resolution, this.options.noDistortion, Runtime_1.default.instance.lps.CameraID.LEFT, // always LEFT camera for now
        Runtime_1.default.instance.lps.PhotoType.FULL, // always FULL type for now
        function (error, imageUrl) {
            if (error) {
                _this.onPhoto(error, null);
                _this.status = Status_1.default.SUCCEEDED;
                return;
            }
            else {
                _this.onPhoto(null, imageUrl);
            }
        });
        return true;
    };
    TakePhoto.prototype.update = function () {
        return this.status;
    };
    return TakePhoto;
}(Behavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TakePhoto;

//# sourceMappingURL=../../map/bt/behaviors/TakePhoto.js.map
