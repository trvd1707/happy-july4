"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ParentBehavior_1 = require('../ParentBehavior');
var Status_1 = require('../Status');
/**
 * @class Parallel
 * @extends module:jibo/bt.ParentBehavior
 * @memberof module:jibo/bt/behaviors
 * @description Runs its child nodes in parallel. Returns with Status.FAILED if one of the children failed
 * and Status.SUCCEEDED if all children succeeded.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {Function} options.succeedOnOne
 * @param {Array<module:jibo/bt.Behavior>} [options.children=[]] - An array of the Parallel's child behaviors.
 */
var Parallel = (function (_super) {
    __extends(Parallel, _super);
    function Parallel() {
        _super.apply(this, arguments);
    }
    Parallel.prototype.start = function () {
        if (this.children.length === 0) {
            return false;
        }
        var oneFailedToStart = false;
        this.runChildren = [];
        for (var i = 0; i < this.children.length; i++) {
            var child = this.children[i];
            if (child._start()) {
                this.runChildren.push(child);
            }
            else {
                oneFailedToStart = true;
            }
        }
        this.activeChildren = this.runChildren.length;
        if (oneFailedToStart) {
            for (var i = 0; i < this.runChildren.length; i++) {
                this.runChildren[i]._stop();
            }
            return false;
        }
        return true;
    };
    Parallel.prototype.stop = function () {
        for (var i = 0; i < this.runChildren.length; i++) {
            if (!this.runChildren[i])
                continue;
            this.runChildren[i]._stop();
        }
    };
    Parallel.prototype.update = function () {
        var oneFailed = false;
        for (var i = 0; i < this.runChildren.length; i++) {
            if (!this.runChildren[i])
                continue;
            var child = this.runChildren[i];
            var status = child._update();
            if (status === Status_1.default.SUCCEEDED) {
                if (this.options.succeedOnOne) {
                    // Stop all children
                    this._stop();
                    return Status_1.default.SUCCEEDED;
                }
                else {
                    child._stop(); // Stop current child
                    delete this.runChildren[i];
                    this.activeChildren--;
                }
            }
            else if (status === Status_1.default.FAILED) {
                oneFailed = true;
            }
            else if (status === Status_1.default.PAUSED) {
                return Status_1.default.IN_PROGRESS;
            }
        }
        if (oneFailed) {
            return Status_1.default.FAILED;
        }
        else if (this.activeChildren === 0) {
            return Status_1.default.SUCCEEDED;
        }
        else {
            return Status_1.default.IN_PROGRESS;
        }
    };
    return Parallel;
}(ParentBehavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Parallel;

//# sourceMappingURL=../../map/bt/behaviors/Parallel.js.map
