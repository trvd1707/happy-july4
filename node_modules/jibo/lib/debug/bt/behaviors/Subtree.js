"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Behavior_1 = require('../Behavior');
var Status_1 = require('../Status');
var Runtime_1 = require('../../Runtime');
var PathUtils_1 = require('../../utils/PathUtils');
/**
 * @class Subtree
 * @extends module:jibo/bt.Behavior
 * @memberof module:jibo/bt/behaviors
 * @description Encapsulates an external subtree file (`.bt` file) into a single behavior. This behavior fails if the
 * `.bt` tree fails, and succeeds if that tree succeeds.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {String} options.behaviorPath The path to the `.bt` file this behavior encapsulates. This assumes the root
 *                          of all `.bt` files is in `${project}/behaviors`.
 * @param {Function} options.getNotepad Returns an object that will become this referenced tree's notepad. Think of this as the
 *                              arguments to this subtree.
 * @param {Function} options.onResult Called when the external tree either fails or succeeds. A result object is passed as an argument.
 *                            This result object is populated by the external tree. Think of this as the return value.
 */
var Subtree = (function (_super) {
    __extends(Subtree, _super);
    function Subtree(options) {
        _super.call(this, options);
        if (options.behaviorPath) {
            this.behaviorPath = options.behaviorPath;
        }
        this.status = Status_1.default.INVALID;
        this.root = null;
    }
    Object.defineProperty(Subtree.prototype, "behaviorPath", {
        set: function (behaviorPath) {
            this.options.behaviorPath = PathUtils_1.default.setDefaultPath('behaviors', behaviorPath);
            this.assetPack = PathUtils_1.default.getAssetPack(behaviorPath);
        },
        enumerable: true,
        configurable: true
    });
    Subtree.prototype.start = function () {
        this.status = Status_1.default.IN_PROGRESS;
        var uri = PathUtils_1.default.getAssetUri(this.options.behaviorPath, this.assetPack);
        this.root = Runtime_1.default.instance.bt.create(uri, {
            notepad: this.options.getNotepad(),
            blackboard: this.blackboard,
            assetPack: this.assetPack
        });
        this.status = this.root.start() ? this.status : Status_1.default.FAILED;
        return true;
    };
    Subtree.prototype.stop = function () {
        if (this.root) {
            this.root.stop();
            this.root = null;
        }
    };
    Subtree.prototype.update = function () {
        if (this.status === Status_1.default.FAILED) {
            this.root = null;
            return this.status;
        }
        if (!this.root) {
            return this.status;
        }
        var status = this.root.update();
        if (status === Status_1.default.SUCCEEDED || status === Status_1.default.FAILED) {
            this.options.onResult(this.root.result);
            this.root = null;
        }
        return status;
    };
    return Subtree;
}(Behavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Subtree;

//# sourceMappingURL=../../map/bt/behaviors/Subtree.js.map
