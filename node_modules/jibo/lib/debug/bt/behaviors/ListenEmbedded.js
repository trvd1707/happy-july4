"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Behavior_1 = require('../Behavior');
var SucceedOnEmbedded_1 = require('../decorators/SucceedOnEmbedded');
var Null_1 = require('./Null');
/**
 * @typedef {Object} jibo.bt.behaviors.ListenEmbedded~Options
 */
/**
 * Called when the {@link module:jibo/bt.EmbeddedListenEmitter|EmbeddedListenEmitter} is constructed.
 * @callback module:jibo/bt/behaviors.ListenEmbedded~OnResult
 * @param {module:jibo/bt.EmbeddedListenEmitter} listener Use this instance to listen for listen events.
 */
/**
 * @class ListenEmbedded
 * @extends module:jibo/bt.Behavior
 * @memberof module:jibo/bt/behaviors
 * @description Succeeds when when the specified audio phrase is spotted.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {module:jibo/bt/behaviors.ListenEmbedded~Rules} options.rule The embedded rule to listen for.
 * @param {module:jibo/bt/behaviors.ListenEmbedded~OnResult} options.onResult Called and passed a {@link module:jibo/bt.EmbeddedListenEmitter|EmbeddedListenEmitter} object. Events are
 *                                     fired from the emitter at certain points in this behavior's lifecycle.
 */
var ListenEmbedded = (function (_super) {
    __extends(ListenEmbedded, _super);
    function ListenEmbedded(options) {
        _super.call(this, options);
        var decorator = new SucceedOnEmbedded_1.default({
            rule: this.options.rule,
            onResult: this.options.onResult,
            emitter: this.emitter,
            blackboard: this.blackboard,
            assetPack: this.assetPack
        });
        this.behavior = new Null_1.default({
            decorators: [decorator]
        });
    }
    ListenEmbedded.prototype.start = function () {
        return this.behavior._start();
    };
    ListenEmbedded.prototype.stop = function () {
        this.behavior._stop();
    };
    ListenEmbedded.prototype.update = function () {
        return this.behavior._update();
    };
    return ListenEmbedded;
}(Behavior_1.default));
/**
 * Embedded listen rule types.
 * @name module:jibo/bt/behaviors.ListenEmbedded~Rules
 * @readOnly
 * @enum {String}
 */
ListenEmbedded.Rules = {
    /**
     * Listen for "Hey Jibo"
     */
    HEY_jibo: "hey_jibo"
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ListenEmbedded;

//# sourceMappingURL=../../map/bt/behaviors/ListenEmbedded.js.map
