"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Behavior_1 = require('../Behavior');
var Null_1 = require('./Null');
var SucceedOnListen_1 = require('../decorators/SucceedOnListen');
/**
 * @typedef {Object} module:jibo/bt/behaviors.Listen~Options
 * @property {boolean} heyJibo Listen for "Hey, Jibo" first.
 * @property {boolean} detectEnd Listen for end of speech.
 * @property {boolean} incremental Return incremental ASR results as they are streamed from the cloud.
 * @property {String} authenticateSpeaker Authenticates against that person.
 */
/**
 * Function that returns the options object.
 * @callback module:jibo/bt/behaviors.Listen~GetOptions
 * @returns {module:jibo/bt/behaviors.Listen~Options}
 */
/**
 * Function that returns the options object.
 * @callback module:jibo/bt/behaviors.Listen~OnResult
 * @param {module:jibo/bt.ListenEmitter} listener Use this instance to listen for listen events.
 */
/**
 * @class Listen
 * @extends module:jibo/bt.Behavior
 * @memberof module:jibo/bt/behaviors
 * @description Performs audio speech recognition and applies and parses the results according to a rules file.
 * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.
 * @param {module:jibo/bt/behaviors.Listen~GetOptions} options.getOptions Returns the options object.
 * @param {String} options.rule Path the to `.rule` file. This assumes the path starts at `${project}/rules`.
 * @param {module:jibo/bt/behaviors.Listen~OnResult} options.onResult Called and passed a {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} object. Events are fired from the Listener
 *                                   at certain points in this behavior's lifecycle.
 */
var Listen = (function (_super) {
    __extends(Listen, _super);
    function Listen(options) {
        _super.call(this, options);
        var decorator = new SucceedOnListen_1.default({
            getOptions: options.getOptions,
            rule: options.rule,
            onResult: options.onResult,
            emitter: this.emitter,
            blackboard: this.blackboard,
            assetPack: this.assetPack
        });
        this.behavior = new Null_1.default({
            decorators: [decorator]
        });
    }
    Listen.prototype.start = function () {
        return this.behavior._start();
    };
    Listen.prototype.stop = function () {
        this.behavior._stop();
    };
    Listen.prototype.update = function () {
        return this.behavior._update();
    };
    return Listen;
}(Behavior_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Listen;

//# sourceMappingURL=../../map/bt/behaviors/Listen.js.map
