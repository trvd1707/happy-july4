"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require('events');
var id = 0;
/**
 * A single play instance that handles the AudioBufferSourceNode.
 * @class SoundInstance
 * @memberof module:jibo/sound
 * @constructor
 * @param {ChainBuilder} source
 */
var SoundInstance = (function (_super) {
    __extends(SoundInstance, _super);
    function SoundInstance(chain) {
        _super.call(this);
        this.id = id++;
        /**
         * The source node chain.
         * @type {ChainBuilder}
         * @name module:jibo/sound.SoundInstance#_chain
         * @private
         */
        this._chain = null;
        /**
         * The starting time.
         * @type {int}
         * @name module:jibo/sound.SoundInstance#_startTime
         * @private
         */
        this._startTime = 0;
        /**
         * true if paused.
         * @type {Boolean}
         * @name module:jibo/sound.SoundInstance#_paused
         * @private
         */
        this._paused = false;
        /**
         * The time in milliseconds to wait.
         * @type {int}
         * @name module:jibo/sound.SoundInstance#_currentPosition
         * @private
         */
        this._currentPosition = 0;
        // Initialize
        this.init(chain);
    }
    /**
     * Recycle instance, because they will be created many times.
     * @method module:jibo/sound.SoundInstance.create
     * @static
     * @private
     */
    SoundInstance.create = function (chain) {
        if (SoundInstance._pool.length > 0) {
            var sound = SoundInstance._pool.pop();
            sound.init(chain);
            return sound;
        }
        else {
            return new SoundInstance(chain);
        }
    };
    /**
     * Initializes the instance.
     * @method module:jibo/sound.SoundInstance#init
     * @private
     */
    SoundInstance.prototype.init = function (chain) {
        this._chain = chain;
    };
    /**
     * Stops the instance.
     * @method module:jibo/sound.SoundInstance#stop
     */
    SoundInstance.prototype.stop = function () {
        if (this._source) {
            this._source.onended = null;
            this._source.stop();
            this._source = null;
        }
    };
    /**
     * Plays the sound.
     * @method module:jibo/sound.SoundInstance#play
     * @param {Number} [offset=0] Number of seconds to offset playing.
     */
    SoundInstance.prototype.play = function (offset) {
        // console.log("SoundInstance.play", this.toString());
        this._source = this._chain.cloneBufferSource();
        this._startTime = Date.now();
        this._source.onended = this._onComplete.bind(this);
        this._source.start(0, offset || 0);
    };
    Object.defineProperty(SoundInstance.prototype, "paused", {
        /**
         * Pauses the sound.
         * @type {Boolean}
         * @name module:jibo/sound.SoundInstance#paused
         */
        get: function () {
            return this._paused;
        },
        set: function (paused) {
            if (paused !== this._paused) {
                this._paused = paused;
                if (paused) {
                    // pause the sounds
                    this.stop();
                    this._currentPosition = Date.now() - this._startTime;
                }
                else {
                    // resume the playing with offset
                    this.play(this._currentPosition / 1000);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Callback when completed.
     * @method module:jibo/sound.SoundInstance#_onComplete
     * @private
     */
    SoundInstance.prototype._onComplete = function () {
        // console.log("SoundInstance._onComplete", this.toString());
        if (this._source) {
            this._source.onended = null;
        }
        this._source = null;
        this.emit('complete', this);
    };
    /**
     * Don't use after this.
     * @method module:jibo/sound.SoundInstance#destroy
     */
    SoundInstance.prototype.destroy = function () {
        this.removeAllListeners('complete');
        this.stop();
        if (this._source) {
            this._source.onended = null;
        }
        this._source = null;
        this._chain = null;
        this._startTime = 0;
        this._paused = false;
        this._currentPosition = 0;
        // Add it if it isn't already added
        if (SoundInstance._pool.indexOf(this) < 0) {
            SoundInstance._pool.push(this);
        }
    };
    /**
     * To string method for instance.
     * @method SoundInstance#toString
     * @return {String} The string representation of instance.
     * @private
     */
    SoundInstance.prototype.toString = function () {
        return '[SoundInstance id=' + this.id + ']';
    };
    /**
     * Recycle instance, because they will be created many times.
     * @type {Array}
     * @name module:jibo/sound.SoundInstance._pool
     * @static
     * @private
     */
    SoundInstance._pool = [];
    return SoundInstance;
}(events_1.EventEmitter));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SoundInstance;

//# sourceMappingURL=../map/sound/SoundInstance.js.map
