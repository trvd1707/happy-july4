"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Task_1 = require('../../loader/tasks/Task');
var SoundPlugin_1 = require('../SoundPlugin');
var path = require('path');
/**
 * Internal class for dealing with async load assets through Loader.
 * @class SoundTask
 * @extends module:jibo/loader.Task
 * @memberof module:jibo/loader
 * @constructor
 * @private
 * @param {Object} asset The data properties.
 * @param {String} asset.src The source.
 * @param {Boolean} [asset.cache=false] true to cache the result.
 * @param {String} [asset.id] ID of asset.
 */
var SoundTask = (function (_super) {
    __extends(SoundTask, _super);
    function SoundTask(manager, asset) {
        _super.call(this, manager, asset, asset.src);
        /**
         * The source URL to load.
         * @type {String}
         * @name module:jibo/loader.SoundTask#src
         */
        this.src = asset.src;
        /**
         * true to block the audio from being played more than once at a time.
         * @type {Boolean}
         * @name module:jibo/loader.SoundTask#block
         */
        this.block = !!asset.block;
        /**
         * The initial volume of the sound (0 to 1).
         * @type {Number}
         * @name module:jibo/loader.SoundTask#volume
         */
        this.volume = asset.volume || 1;
        /**
         * The panning from -1 (left) to 1 (right). Default is 0 (center).
         * @type {Number}
         * @name module:jibo/loader.SoundTask#panning
         */
        this.panning = asset.panning || 0;
        /**
         * true if the sound should play.
         * @type {Boolean}
         * @name module:jibo/loader.SoundTask#loop
         */
        this.loop = !!asset.loop;
        /**
         * true to start playing the sound immediately after loading.
         * @type {Boolean}
         * @name module:jibo/loader.SoundTask#autoPlay
         */
        this.autoPlay = !!asset.autoPlay;
    }
    /**
     * Tests if tasks should be run.
     * @method module:jibo/loader.SoundTask.test
     * @static
     * @param {Object} asset The asset to check.
     * @return {Boolean} true if the asset is compatible with this asset.
     */
    SoundTask.test = function (asset) {
        return !!asset.src && asset.type === "sound" && /\.(mp3|wav|ogg|oga|aif)$/i.test(asset.src);
    };
    /**
     * Starts the task.
     * @method  module:jibo/loader.SoundTask#start
     * @param  {module:jibo/loader.Task~completeCallback} callback Callback when finished.
     */
    SoundTask.prototype.start = function (callback) {
        var _this = this;
        this.simpleLoad(this.src, function (err, result) {
            if (err) {
                return callback(err);
            }
            var alias = _this.id || path.basename(_this.src, path.extname(_this.src));
            var sound = SoundPlugin_1.default.instance.add(alias, {
                src: result,
                preload: true,
                block: _this.block,
                loop: _this.loop,
                volume: _this.volume,
                panning: _this.panning,
                autoPlay: _this.autoPlay,
                loaded: callback
            });
            // When the sound is destroyed, remove from the
            // the soundmanager plugin
            sound.__baseDestroy = sound.destroy;
            sound.destroy = function () {
                if (this.__destroyed) {
                    return;
                }
                this.__destroyed = true;
                SoundPlugin_1.default.instance.remove(alias);
                //destroy the base texture as well
                this.__baseDestroy(true);
            };
        });
    };
    return SoundTask;
}(Task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SoundTask;

//# sourceMappingURL=../../map/sound/tasks/SoundTask.js.map
