"use strict";
var SoundContext_1 = require('./SoundContext');
var Sound_1 = require('./Sound');
var SoundInstance_1 = require('./SoundInstance');
var SoundUtils_1 = require('./SoundUtils');
/**
 * Manages the playback of sounds.
 * @class SoundLibrary
 * @module jibo/sound
 */
var SoundPlugin = (function () {
    function SoundPlugin() {
        // Check for singleton
        if (SoundPlugin._instance) {
            throw new Error("Only one SoundPlugin can be created at once");
        }
        // Set singleton
        SoundPlugin._instance = this;
        /**
         * The global context to use.
         * @name module:jibo/sound#_context
         * @type {module:jibo/sound.SoundContext}
         * @private
         */
        this._context = new SoundContext_1.default();
        /**
         * The map of all sounds by alias.
         * @name module:jibo/sound#_sounds
         * @type {Object}
         * @private
         */
        this._sounds = {};
        /**
         * The reference to SoundUtils class.
         * @name module:jibo/sound.SoundUtils
         * @type {module:jibo/sound.SoundUtils}
         */
        this.SoundUtils = SoundUtils_1.default;
        /**
         * The reference to Sound class.
         * @name module:jibo/sound.Sound
         * @type {Sound}
         */
        this.Sound = Sound_1.default;
        /**
         * The reference to SoundInstance class.
         * @name module:jibo/sound.SoundInstance
         * @type {module:jibo/sound.SoundInstance}
         */
        this.SoundInstance = SoundInstance_1.default;
    }
    Object.defineProperty(SoundPlugin, "instance", {
        /**
         * Gets singleton instance of sound library.
         * @private
         * @static
         * @name module:jibo/sound#instance
         * @type {module:jibo/sound}
         */
        get: function () {
            return SoundPlugin._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundPlugin.prototype, "context", {
        /**
         * The global context to use.
         * @name module:jibo/sound#context
         * @readOnly
         * @type {module:jibo/sound.SoundContext}
         * @private
         */
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a new sound by alias.
     * @method module:jibo/sound#add
     * @param {String} alias The sound alias reference.
     * @param {Options|String|ArrayBuffer} options The options: src string or array buffer contents.
     * @return {module:jibo/sound.Sound} Instance to the Sound object.
     */
    SoundPlugin.prototype.add = function (alias, options) {
        console.assert(!this._sounds[alias], "Sound with alias " + alias + " already exists.");
        var sound = this._sounds[alias] = new Sound_1.default(this.context, options);
        return sound;
    };
    /**
     * Adds multiple sounds.
     * @method module:jibo/sound#addMap
     * @param {map} alias The sound alias reference.
     * @param {Object|String|ArrayBuffer} options The options: src string or array buffer contents.
     * @return {module:jibo/sound.Sound} Instance to the Sound object.
     */
    SoundPlugin.prototype.addMap = function (map, globalOptions) {
        var results = {};
        for (var a in map) {
            var options = void 0;
            if (typeof map[a] === "string" || map[a] instanceof ArrayBuffer) {
                options = { src: map[a] };
            }
            else {
                options = map[a];
            }
            console.log(options);
            results[a] = this.add(a, Object.assign(options, globalOptions || {}));
        }
        return results;
    };
    /**
     * Removes a sound by alias.
     * @method module:jibo/sound#remove
     * @param {String} alias The sound alias reference.
     * @return {module:jibo/sound} Instance for chaining.
     */
    SoundPlugin.prototype.remove = function (alias) {
        this.exists(alias, true);
        this._sounds[alias].destroy();
        delete this._sounds[alias];
        return this;
    };
    /**
     * Pauses any playing sounds.
     * @method module:jibo/sound#pauseAll
     * @return {module:jibo/sound} Instance for chaining.
     */
    SoundPlugin.prototype.pauseAll = function () {
        this._context.paused = true;
        return this;
    };
    /**
     * Resumes any sounds.
     * @method module:jibo/sound#resumeAll
     * @return {module:jibo/sound} Instance for chaining.
     */
    SoundPlugin.prototype.resumeAll = function () {
        this._context.paused = false;
        return this;
    };
    /**
     * Mutes all playing sounds.
     * @method module:jibo/sound#muteAll
     * @return {module:jibo/sound} Instance for chaining.
     */
    SoundPlugin.prototype.muteAll = function () {
        this._context.muted = true;
        return this;
    };
    /**
     * Unmutes all playing sounds.
     * @method module:jibo/sound#unmuteAll
     * @return {module:jibo/sound} Instance for chaining.
     */
    SoundPlugin.prototype.unmuteAll = function () {
        this._context.muted = false;
        return this;
    };
    /**
     * Stops and removes all sounds. They cannot be used after this.
     * @method module:jibo/sound#removeAll
     * @return {module:jibo/sound} Instance for chaining.
     */
    SoundPlugin.prototype.removeAll = function () {
        for (var alias in this._sounds) {
            this._sounds[alias].destroy();
        }
        return this;
    };
    /**
     * Stops all sounds.
     * @method module:jibo/sound#stopAll
     * @return {module:jibo/sound} Instance for chaining.
     */
    SoundPlugin.prototype.stopAll = function () {
        for (var alias in this._sounds) {
            this._sounds[alias].stop();
        }
        return this;
    };
    /**
     * Checks if a sound by alias exists.
     * @method module:jibo/sound#exists
     * @param {String} alias Check for alias.
     * @return {Boolean} true if the sound exists.
     */
    SoundPlugin.prototype.exists = function (alias, assert) {
        if (assert === void 0) { assert = false; }
        var exists = !!this._sounds[alias];
        if (assert) {
            console.assert(exists, "No sound matching alias '" + alias + "'.");
        }
        return exists;
    };
    /**
     * Gets a sound.
     * @method module:jibo/sound#sound
     * @param {String} alias The sound alias reference.
     * @return {module:jibo/sound.Sound} Sound object.
     */
    SoundPlugin.prototype.sound = function (alias) {
        this.exists(alias, true);
        return this._sounds[alias];
    };
    /**
     * Plays a sound.
     * @method module:jibo/sound#play
     * @param {String} alias The sound alias reference.
     * @param {Object|Function} options The options or callback when done.
     * @param {Function} [options.complete] When completed.
     * @param {Function} [options.loaded] If not already preloaded, callback when finishes load.
     * @param {Number} [options.offset=0] Start time offset.
     * @return {module:jibo/sound.SoundInstance|null} The sound instance, this cannot be reused
     *         after it is done playing. Returns `null` if the sound has not yet loaded.
     */
    SoundPlugin.prototype.play = function (alias, options) {
        return this.sound(alias).play(options);
    };
    /**
     * Stops a sound.
     * @method module:jibo/sound#stop
     * @param {String} alias The sound alias reference.
     * @return {module:jibo/sound.Sound} Sound object.
     */
    SoundPlugin.prototype.stop = function (alias) {
        return this.sound(alias).stop();
    };
    /**
     * Pauses a sound.
     * @method module:jibo/sound#pause
     * @param {String} alias The sound alias reference.
     * @return {module:jibo/sound.Sound} Sound object.
     */
    SoundPlugin.prototype.pause = function (alias) {
        return this.sound(alias).pause();
    };
    /**
     * Resumes a sound.
     * @method module:jibo/sound#resume
     * @param {String} alias The sound alias reference.
     * @return {module:jibo/sound} Instance for chaining.
     */
    SoundPlugin.prototype.resume = function (alias) {
        return this.sound(alias).resume();
    };
    /**
     * Destroys the sound module.
     * @method module:jibo/sound#destroy
     * @private
     */
    SoundPlugin.prototype.destroy = function () {
        this.removeAll();
        this._sounds = null;
        this.context = null;
    };
    return SoundPlugin;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SoundPlugin;

//# sourceMappingURL=../map/sound/SoundPlugin.js.map
