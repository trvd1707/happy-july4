"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require('path');
var pascalCase = require('pascal-case');
function warn(msg) {
    var stack = new Error().stack;
    stack = stack.split('\n').splice(3).join('\n');
    if (console.groupCollapsed) {
        console.groupCollapsed("%cDeprecation Warning: %c%s", "color:#614108;background:#fffbe6", "font-weight:normal;color:#614108;background:#fffbe6", msg);
        console.warn(stack);
        console.groupEnd();
    }
    else {
        console.warn("Deprecation Warning:", msg);
        console.warn(stack);
    }
}
function default_1(jibo) {
    var Factory = jibo.bt.Factory;
    var Behavior = jibo.bt.Behavior;
    var Decorator = jibo.bt.Decorator;
    var FaceRenderer = jibo.rendering.FaceRenderer;
    GLOBAL.JIBO = {};
    Object.defineProperty(GLOBAL.JIBO, "bt", {
        get: function () {
            warn("JIBO.bt has moved, please use jibo.bt");
            return jibo.bt;
        }
    });
    Object.defineProperties(jibo.utils, {
        /**
         * @class
         * @name SerialTimer
         * @memberof module:jibo/utils
         * @see module:jibo/utils/perf.SerialTimer
         * @deprecated since version 2.1.0
         * @private
         */
        SerialTimer: {
            get: function () {
                warn("jibo.utils.SerialTimer has moved, please use jibo.utils.perf.SerialTimer");
                return jibo.utils.perf.SerialTimer;
            }
        },
        /**
         * @class
         * @name ParallelTimer
         * @memberof module:jibo/utils
         * @see module:jibo/utils/perf.ParallelTimer
         * @deprecated since version 2.1.0
         * @private
         */
        ParallelTimer: {
            get: function () {
                warn("jibo.utils.ParallelTimer has moved, please use jibo.utils.perf.ParallelTimer");
                return jibo.utils.perf.ParallelTimer;
            }
        }
    });
    Object.defineProperties(jibo.services, {
        /**
         * @class
         * @name TtsService
         * @memberof module:jibo/services
         * @see module:jibo.services.TTSService
         * @deprecated since version 1.1.0
         * @private
         */
        TtsService: {
            get: function () {
                warn("jibo.services.TtsService has moved, please use jibo.services.TTSService");
                return jibo.services.TTSService;
            }
        },
        /**
         * @class
         * @name NluService
         * @memberof module:jibo/services
         * @see module:jibo/nlu
         * @deprecated since version 1.1.0
         * @private
         */
        NluService: {
            get: function () {
                warn("jibo.services.NluService has moved, please use jibo.services.NLUService");
                return jibo.services.NLUService;
            }
        },
        /**
         * @class
         * @name NonMotionBodyService
         * @memberof module:jibo.services
         * @see module:jibo.services.BodyService
         * @deprecated since version 1.1.0
         * @private
         */
        NonMotionBodyService: {
            get: function () {
                warn("jibo.services.NonMotionBodyService has moved, please use jibo.services.BodyService");
                return jibo.services.BodyService;
            }
        },
        /**
         * @class
         * @name LpsService
         * @memberof module:jibo.services
         * @see module:jibo.services.LPSService
         * @deprecated since version 1.1.0
         * @private
         */
        LpsService: {
            get: function () {
                warn("jibo.services.LpsService has moved, please use jibo.services.LPSService");
                return jibo.services.LPSService;
            }
        }
    });
    Object.defineProperties(jibo.services.asr, {
        /**
         * @class
         * @name AsrService
         * @memberof module:jibo.services.asr
         * @see module:jibo.services.asr.ASRService
         * @deprecated since version 1.1.0
         * @private
         */
        AsrService: {
            get: function () {
                warn("jibo.services.asr.AsrService has moved, please use jibo.services.asr.ASRService");
                return jibo.services.asr.ASRService;
            }
        }
    });
    /**
     * @param
     * @name module:jibo.bodySettings
     * @deprecated since 1.1.0
     * @see module:jibo/body
     */
    Object.defineProperty(jibo.Runtime.prototype, "bodySettings", {
        get: function () {
            warn("jibo.bodySettings is deprecated, please use jibo.body");
            return this.body;
        }
    });
    /**
     * @param
     * @name module:jibo/bt.factory
     * @deprecated since 1.1.0
     * @see module:jibo/bt
     */
    Object.defineProperty(Factory.prototype, "factory", {
        get: function () {
            warn("jibo.bt.factory is deprecated, please use jibo.bt");
            return this;
        }
    });
    /**
     * @method
     * @name module:jibo/bt~addBehavior
     * @deprecated since 0.10.0
     * @see module:jibo/bt~register
     */
    Factory.prototype.addBehavior = function (mod, namespace) {
        warn("Factory.addBehavior is deprecated, please use jibo.bt.register");
        namespace = namespace || "";
        var name = pascalCase(path.parse(mod.filename).name);
        this.register(name, namespace, mod.exports);
    };
    /**
     * Creates a behavior.
     * @method
     * @name module:jibo/bt~createBehavior
     * @see module:jibo/bt~register
     * @deprecated since 0.10.0
     */
    Factory.prototype.createBehavior = function (object) {
        warn("jibo.bt.createBehavior is deprecated, please extend from jibo.bt.Behavior and use jibo.bt.register");
        return newBehavior(object);
    };
    /**
     * Creates a decorator.
     * @method
     * @name module:jibo/bt~createDecorator
     * @see module:jibo/bt~register
     * @deprecated since 0.10.0
     */
    Factory.prototype.createDecorator = function (object) {
        warn("jibo.bt.createDecorator is deprecated, please extend from jibo.bt.Decorator and use jibo.bt.register");
        return newDecorator(object);
    };
    // Dynamically create a new behavior class from config object
    function newBehavior(config) {
        config = Object.assign({
            constructor: function () { },
            start: function () { return true; },
            update: function () { this.status; },
            stop: function () { }
        }, config);
        var NewElement = (function (_super) {
            __extends(NewElement, _super);
            function NewElement(options) {
                _super.call(this);
                for (var method in config) {
                    if (method == "constructor")
                        continue;
                    if (typeof config[method] == "function")
                        this[method] = config[method];
                }
                config.constructor.call(this, options);
            }
            return NewElement;
        }(Behavior));
        return NewElement;
    }
    // Dynamically create a new Decorator class from config object
    function newDecorator(config) {
        config = Object.assign({
            constructor: function () { },
            start: function () { return true; },
            update: function (status) { return status; },
            stop: function () { }
        }, config);
        var NewElement = (function (_super) {
            __extends(NewElement, _super);
            function NewElement(options) {
                _super.call(this);
                for (var method in config) {
                    if (method == "constructor")
                        continue;
                    if (method == "name")
                        continue;
                    if (method == "namespace")
                        continue;
                    this[method] = config[method];
                }
                config.constructor.call(this, options);
            }
            return NewElement;
        }(Decorator));
        return NewElement;
    }
    /**
     * @method
     * @name module:jibo/bt~registerBehavior
     * @deprecated since 1.1.0
     * @see module:jibo/bt~register
     */
    Factory.prototype.registerBehavior = function (config) {
        warn("jibo.bt.registerBehavior is deprecated, please extend from jibo.bt.Behavior and use jibo.bt.register");
        var name = config.name;
        var namespace = config.namespace;
        var Constructor = newBehavior(config);
        this.register(name, namespace, Constructor);
        return Constructor;
    };
    /**
     * @method
     * @name module:jibo/bt~registerDecorator
     * @deprecated since 1.1.0
     * @see module:jibo/bt~register
     */
    Factory.prototype.registerDecorator = function (config) {
        warn("jibo.bt.registerDecorator is deprecated, please extend from jibo.bt.Decorator and use jibo.bt.register");
        var name = config.name;
        var namespace = config.namespace;
        var Constructor = newDecorator(config);
        this.register(name, namespace, Constructor);
        return Constructor;
    };
    /**
     * Creates a behavior.
     * @method
     * @name module:jibo/bt.Behavior~setDecorators
     * @deprecated since 1.1.0
     * @see module:jibo/bt.Behavior~decorators
     */
    Behavior.prototype.setDecorators = function (decorators) {
        warn("Behavior.setDecorators is deprecated, please use Behavior.decorators setter, e.g. behavior.decorators = []");
        this.decorators = decorators;
        return this;
    };
    /**
     * Creates a behavior.
     * @method
     * @name module:jibo/bt.Behavior~getName
     * @deprecated since 1.1.0
     * @see module:jibo/bt.Behavior~name
     */
    Behavior.prototype.getName = function () {
        warn("Behavior.getName is deprecated, please use Behavior.name getter, e.g. behavior.name");
        return this.name;
    };
    /**
     * Creates a behavior.
     * @method
     * @name module:jibo/bt.ParentBehavior~setChildren
     * @deprecated since 1.1.0
     * @see module:jibo/bt.ParentBehavior~children
     */
    Behavior.prototype.setChildren = function (children) {
        warn("Behavior.setChildren is deprecated, please use Behavior.children setter, e.g. behavior.children = []");
        this.children = children;
    };
    /**
     * @method module:jibo/lps~getMotionData
     * @deprecated Since 1.1.0
     * @see module:jibo/lps~motionData
     */
    jibo.services.LPSService.prototype.getMotionData = function () {
        warn("LPSService.getMotionData is deprecated, please use specific visual entity APIs (getClosestVisualEntity/getVisualEntityById).");
        return this.lps.motionData;
    };
    FaceRenderer.prototype.setRenderOnlyWhenDirty = function (value) {
        warn("renderer.setRenderOnlyWhenDirty is deprecated, please use renderer.renderOnlyWhenDirty = value");
        this.renderOnlyWhenDirty = value;
    };
    Object.defineProperty(FaceRenderer.prototype, "scene", {
        get: function () {
            var thiz = this;
            return {
                stop: function () {
                    warn("renderer.scene.stop() is deprecated, please use jibo.face.paused = true");
                    thiz.paused = true;
                },
                play: function () {
                    warn("renderer.scene.play() is deprecated, please use jibo.face.paused = false");
                    thiz.paused = false;
                }
            };
        }
    });
    var PathUtils = jibo.utils.PathUtils;
    var SoundUtils = jibo.sound.SoundUtils;
    /**
     * @class
     * @name AudioUtils
     * @memberof module:jibo/utils
     * @deprecated Since 3.0.0
     */
    jibo.utils.AudioUtils = {
        /**
         * Creates and returns correct full audio path from given file; takes into account asset packs, etc.
         * @method module:jibo/utils.AudioUtils~getPath
         * @deprecated Since 3.0.0
         * @param {String} fileName File name of the audio file
         * @return {String} Full path of the file
         */
        getPath: function (fileName) {
            warn("AudioUtils.getPath is deprecated, please use PathUtils.setDefaultPath('audio', fileName)");
            return PathUtils.setDefaultPath('audio', fileName);
        },
        /**
         * Creates a new "Audio" stream based on given audio path and project uri; returns the audio object.
         * @method module:jibo/utils.AudioUtils~startAudio
         * @deprecated Since 3.0.0
         * @param {String} audioPath Full path of the file to play
         * @param {String} assetPack Name of the asset pack containing the audio file
         * @param {Function} cb Callback when complete
         * @return {Audio} New audio element
         */
        startAudio: function (audioPath, assetPack, cb) {
            warn("AudioUtils.startAudio is deprecated, please use SoundUtils.playOnce(fileName, callback)");
            var uri = PathUtils.getAudioUri(audioPath, assetPack);
            SoundUtils.playOnce(uri, cb);
            return audioPath;
        }
    };
    /**
     * Gets the base directory and the name of the project.
     * @method module:jibo/utils.PathUtils~getBaseDirectory
     * @deprecated since 3.1.0
     * @see module:jibo/utils.PathUtils~findRoot
     * @param {String} dir
     * @param {Function} callback
     */
    PathUtils.getBaseDirectory = function (dir, callback) {
        warn("PathUtils.getBaseDirectory is deprecated, please use PathUtils.findRoot(dir)");
        var base = PathUtils.findRoot(dir);
        callback(base, PathUtils.getProjectName(base));
    };
    /**
     * Gets the project root running jibo.
     * @method module:jibo/utils.PathUtils~getProjectRoot
     * @deprecated since 3.1.0
     * @see module:jibo/utils.PathUtils~findRoot
     * @param {Function} callback Resturn directory and the project name
     */
    PathUtils.getProjectRoot = function (callback) {
        warn("PathUtils.getProjectRoot is deprecated, please use PathUtils.findRoot()");
        PathUtils.getBaseDirectory(process.cwd(), callback);
    };
    // Create pass-thru methods for the AnimationBuilder object on KeysAnimation
    Object.defineProperties(jibo.rendering.animation.KeysAnimation.prototype, {
        setSpeed: {
            value: function (speed) {
                warn('KeysAnimation.setSpeed is deprecated, please use KeysAnimation.builder.setSpeed(speed)');
                return this._builder.setSpeed(speed);
            }
        },
        setNumLoops: {
            value: function (numLoops) {
                warn('KeysAnimation.setNumLoops is deprecated, please use KeysAnimation.builder.setNumLoops(numLoops)');
                this._builder.setNumLoops(numLoops);
            }
        },
        setDOFs: {
            value: function (dofNames) {
                warn('KeysAnimation.setDOFs is deprecated, please use KeysAnimation.builder.setDOFs(dofNames)');
                this._builder.setDOFs(dofNames);
            }
        },
        getDOFs: {
            value: function (dofNames) {
                warn('KeysAnimation.getDOFs is deprecated, please use KeysAnimation.builder.getDOFs()');
                return this._builder.getDOFs(dofNames);
            }
        },
        setPlayBounds: {
            value: function (inPoint, outPoint) {
                warn('KeysAnimation.setPlayBounds is deprecated, please use KeysAnimation.builder.setPlayBounds(inPoint, outPoint)');
                this._builder.setPlayBounds(inPoint, outPoint);
            }
        },
        getSourceAnimationDuration: {
            value: function () {
                warn('KeysAnimation.getSourceAnimationDuration is deprecated, please use KeysAnimation.builder.getSourceAnimationDuration()');
                return this._builder.getSourceAnimationDuration();
            }
        }
    });
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;

//# sourceMappingURL=map/deprecation.js.map
