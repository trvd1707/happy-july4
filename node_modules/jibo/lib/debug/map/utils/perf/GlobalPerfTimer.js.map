{"version":3,"sources":["utils/perf/GlobalPerfTimer.js"],"names":[],"mappings":";AAAA;;;GAGG;AACH,4BAAwB,eAAe,CAAC,CAAA;AAExC,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEjC,+BAA+B;AAC/B,IAAI,SAAS,GAAG,IAAI,CAAC;AAErB;;;;;GAKG;AACH;IAAA;IAuBA,CAAC;IAtBG;;OAEG;IACI,oBAAI,GAAX;QACI,MAAM,CAAC,SAAS,KAAK,IAAI,EAAE,mDAAmD,CAAC,CAAC;QAChF,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC;IAED;;OAEG;IACI,qBAAK,GAAZ;QACI,SAAS,GAAG,IAAI,qBAAW,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,mBAAG,GAAV;QACI,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IACL,sBAAC;AAAD,CAvBA,AAuBC,IAAA;AAvBD;iCAuBC,CAAA","file":"utils/perf/GlobalPerfTimer.js","sourcesContent":["/*\n * Creates a global instance of perf.SerialTimer to make it easier to share a topmost\n * timer across all files doing performance time measurements.\n */\nimport SerialTimer from './SerialTimer';\n\nconst assert = require('assert');\n\n// Singleton instance of timer.\nlet singleton = null;\n\n/**\n * Global performance timer.\n * @class GlobalPerfTimer\n * @memberof module:jibo/utils/perf\n * @private\n */\nexport default class GlobalPerfTimer {\n    /*\n     * Initializes the global perf timer singleton.\n     */\n    static init() {\n        assert(singleton === null, 'GlobalPerfTimer.init() should only be called once');\n        return GlobalPerfTimer.reset();\n    }\n\n    /*\n     * Resets the timer for the singleton.\n     */\n    static reset(){\n        singleton = new SerialTimer('jibo');\n        return singleton;\n    }\n\n    /*\n     * Gets the singleton timer instance.\n     */\n    static get(){\n        return singleton;\n    }\n}\n"],"sourceRoot":"/source/"}