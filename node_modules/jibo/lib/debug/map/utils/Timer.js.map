{"version":3,"sources":["utils/Timer.ts"],"names":[],"mappings":"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","file":"utils/Timer.js","sourcesContent":["import DelayedCall from './DelayedCall';\nimport {EventEmitter} from 'events';\nimport {CompleteCallback} from './DelayedCall';\n\n/**\n * @description\n * Handles the update loop and timing events.\n * ```\n * let jibo = require('jibo');\n * jibo.timer.on('update', (elapsed) => {\n *     // do update\n * });\n * ```\n * @module jibo/timer\n */\nclass Timer extends EventEmitter {\n\n    private _paused:boolean;\n    private _lastUpdate:number;\n    private _frameRequest:number;\n\n    constructor() {\n        super();\n        this.update = this.update.bind(this);\n        this._paused = true;\n    }\n\n    /**\n     * Fires when timer pause state changes.\n     * @event module:jibo/timer#pause\n     * @param {boolean} pause true if currently paused, false if resumed from stop.\n     */\n\n    /**\n     * Fires when sound is resumed.\n     * @event module:jibo/timer#resumed\n     */\n\n    /**\n     * Fires when sound is paused.\n     * @event module:jibo/timer#paused\n     */\n\n    /**\n     * Fires every requestAnimationFrame. Should be considered\n     * the main update \"loop.\" All skills should use this for frame updates.\n     * @event module:jibo/timer#update\n     * @param {int} elapse The time in milliseconds since the last frame update.\n     */\n\n    /**\n     * Starts the update loop.\n     * @method module:jibo/timer#start\n     */\n    start(): void {\n        if (this._paused) {\n            this.emit('pause', false);\n            this.emit('resumed');\n            this._paused = false;\n            this._lastUpdate = performance.now();\n            this.update();\n        }\n    }\n\n    /**\n     * Stops the update loop.\n     * @method module:jibo/timer#stop\n     */\n    stop(): void {\n        if (!this._paused) {\n            this.emit('pause', true);\n            this.emit('paused');\n            this._paused = true;\n            if (this._frameRequest) {\n                cancelAnimationFrame(this._frameRequest);\n                this._frameRequest = null;\n            }\n        }\n    }\n\n    /**\n     * Updates loop callback.\n     * @method module:jibo/timer#update\n     * @private\n     */\n    update(): void {\n        if (this._paused) {\n            return;\n        }\n        const now = performance.now();\n        const elapsed = now - this._lastUpdate;\n        this.emit('update', elapsed);\n        this._lastUpdate = now;\n        this._frameRequest = requestAnimationFrame(this.update);\n    }\n\n    /**\n     * Pauses loop callback.\n     * @name module:jibo/timer#paused\n     * @type {Boolean}\n     * @readOnly\n     */\n    get paused(): boolean {\n        return this._paused;\n    }\n\n    /**\n     * Works just like `window.setTimeout` but respects the pause.\n     * state of jibo.timer.\n     * @method  module:jibo/timer#setTimeout\n     * @param {Function} callback    The callback function, passes one argument which is the DelayedCall instance.\n     * @param {int}   delay       The time in milliseconds or the number of frames (useFrames must be true).\n     * @param {Boolean}   [useFrames=false]   If the delay is frames (true) or milliseconds (false).\n     * @param {Boolean}   [autoDestroy=true] If the DelayedCall object should be destroyed after completing.\n     * @return {module:jibo/timer.DelayedCall} The object for pausing, restarting, destroying etc.\n     */\n    setTimeout(callback:CompleteCallback, delay:number, useFrames:boolean=false, autoDestroy:boolean=true): DelayedCall {\n        return new DelayedCall(this, callback, delay, {\n            repeat: false,\n            autoDestroy: autoDestroy,\n            useFrames: useFrames\n       });\n    }\n\n    /**\n     * Works just like `window.setInterval` but respects the pause.\n     * state of jibo.timer.\n     * @method  module:jibo/timer#setInterval\n     * @param {Function} callback    The callback function, passes one argument which is the DelayedCall instance.\n     * @param {int}   delay       The time in milliseconds or the number of frames (useFrames must be true).\n     * @param {Boolean}   [useFrames=false]   If the delay is frames (true) or milliseconds (false).\n     * @return {module:jibo/timer.DelayedCall} The object for pausing, restarting, destroying etc.\n     */\n    setInterval(callback:CompleteCallback, delay:number, useFrames:boolean=false): DelayedCall {\n        return new DelayedCall(this, callback, delay, {\n            repeat: true,\n            autoDestroy: false,\n            useFrames: useFrames\n        });\n    }\n\n    /**\n     * Destroys the timer object.\n     * @method module:jibo/timer#destroy\n     * @private\n     */\n    destroy(): void {\n        this.removeAllListeners();\n        this.stop();\n    }\n}\n\nexport default Timer;\n"],"sourceRoot":"/source/"}