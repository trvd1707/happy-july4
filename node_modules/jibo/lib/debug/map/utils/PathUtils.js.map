{"version":3,"sources":["utils/PathUtils.ts"],"names":[],"mappings":"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","file":"utils/PathUtils.js","sourcesContent":["import * as path from 'path';\nimport * as Module from 'module';\nimport findRoot = require('find-root');\n\ndeclare type BaseDirCallback = (dir:string, name?:string) => void;\n\n/**\n * Class for resolve root and asset paths.\n * @class PathUtils\n * @memberof module:jibo/utils\n */\nclass PathUtils {\n\n    /**\n     * The token separating asset packs.\n     * @name module:jibo/utils.PathUtils.ASSET_TOKEN\n     * @type {String}\n     * @private\n     * @readOnly\n     */\n    private static ASSET_TOKEN:string = '://';\n\n    /**\n     * Traverses up the directories until the first folder with a package.json file.\n     * @method module:jibo/utils.PathUtils~findRoot\n     * @param {String} [start] The starting directory, empty uses current working directory.\n     * @return {String} The root directory which contains package.json.\n     */\n    static findRoot(start?:string): string {\n        return findRoot(start || process.cwd());\n    }\n\n    /**\n     * Gets a project namee. Useful for figuring out the asset pack.\n     * @method module:jibo/utils.PathUtils~getProjectName\n     * @param {String} dir The directory. Should contain package.json.\n     * @return {String} The name in the package.json.\n     */\n    static getProjectName(dir): string {\n        return require(path.join(dir, 'package.json')).name;\n    }\n\n    /**\n     * Sets the default path for behaviors, rules, animations, etc.\n     * @method module:jibo/utils.PathUtils~setDefaultPath\n     * @param {String} parentDir The parent directory.\n     * @param {String} fileName The file name.\n     * @return {String} asset URI to load.\n     */\n    static setDefaultPath(parentDir:string, fileName:string):string {\n        let assetPack = PathUtils.getAssetPack(fileName);\n        fileName = path.join(parentDir, fileName);\n        if (assetPack) {\n            fileName = assetPack + PathUtils.ASSET_TOKEN + fileName;\n        }\n        return fileName;\n    }\n\n    /**\n     * Gets the asset pack from the asset file, if available.\n     * @method module:jibo/utils.PathUtils~getAssetPack\n     * @param {String} fileName The file name.\n     * @return {String} The asset pack.\n     */\n    static getAssetPack(fileName:string):string {\n        let split = fileName.split(PathUtils.ASSET_TOKEN);\n        return (split.length === 1) ? \"\" : split[0];\n    }\n\n    /**\n     * Gets an asset pack URI.\n     * @method module:jibo/utils.PathUtils~getAssetUri\n     * @param {String} fileName The file name to load, can be \"asset-pack://etc\".\n     * @param {String} currentAssetPack The current asset pack to load within.\n     * @return {String} The result URI.\n     */\n    static getAssetUri(fileName:string, currentAssetPack:string = '', callback?:BaseDirCallback):string {\n\n        // console.log(\"filename\", fileName, \"assetpack\", currentAssetPack);\n        let split:Array<string> = fileName.split(PathUtils.ASSET_TOKEN);\n\n        if (split.length === 1 && currentAssetPack) {\n            let assetPackRoot = findRoot(PathUtils.resolve(currentAssetPack + \"/package.json\"));\n            let uri = path.join(assetPackRoot, fileName);\n            if (callback) {\n                callback(uri, assetPackRoot); // deprecated\n            }\n            return uri;\n        }\n        //if this is an asset pack\n        else if (split.length === 2) {\n            let assetPackRoot = findRoot(PathUtils.resolve(split[0] + \"/package.json\"));\n            let uri = path.join(assetPackRoot, split[1]);\n            if (callback) {\n                callback(uri, assetPackRoot); // deprecated\n            }\n            return uri;\n        }\n        //if this is not in an asset pack, loading from a project\n        else if(split.length === 1) {\n            let pathFromRoot = fileName;\n            let root = PathUtils.findRoot();\n            let uri = path.join(root, pathFromRoot);\n            if (callback) {\n                callback(uri, root); // deprecated\n            }\n            return uri;\n        }\n        return null;\n    }\n\n    /**\n     * Gets asset source from filename and asset pack.\n     * @method module:jibo/utils.PathUtils~getAudioUri\n     * @param {String} fileName The file name to load, can be \"asset-pack://etc\".\n     * @param {String} currentAssetPack The current asset pack to load within.\n     * @return {String} The result URI.\n     */\n    static getAudioUri(fileName:string, currentAssetPack:string = '', callback?:BaseDirCallback):string {\n        let audioPath = PathUtils.setDefaultPath('audio', fileName);\n        return PathUtils.getAssetUri(audioPath, currentAssetPack, callback); // callback deprecated\n    }\n\n    /**\n     * Gets asset source from filename and asset pack.\n     * @method module:jibo/utils.PathUtils~getTimelineUri\n     * @param {String} fileName The file name to load, can be \"asset-pack://etc\".\n     * @param {String} currentAssetPack The current asset pack to load within.\n     * @return {String} The result URI.\n     */\n    static getTimelineUri(fileName:string, currentAssetPack:string = '', callback?:BaseDirCallback):string {\n        let timelinePath = PathUtils.setDefaultPath('timelines', fileName);\n        return PathUtils.getAssetUri(timelinePath, currentAssetPack, callback); // callback deprecated\n    }\n\n    /**\n     * Modified from https://github.com/sindresorhus/resolve-from.\n     * @method module:jibo/utils.PathUtils~resolve\n     * @param {String} moduleId The module to resolve path to.\n     * @private\n     * @return {String} The resolved file path.\n     */\n    private static resolve(moduleId:string):string {\n        let fromDir:string = path.resolve(process.cwd());\n        let fromFile:string = path.join(fromDir, 'noop.js');\n        try {\n            return Module._resolveFilename(moduleId, {\n                id: fromFile,\n                filename: fromFile,\n                paths: Module._nodeModulePaths(fromDir)\n            });\n        } catch (err) {\n            return null;\n        }\n    }\n}\n\nexport default PathUtils;\n"],"sourceRoot":"/source/"}