{"version":3,"sources":["utils/AnimationUtils.js"],"names":[],"mappings":"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","file":"utils/AnimationUtils.js","sourcesContent":["import {TimelineBuilder, RobotInfo, JiboConfig, animate, visualize, THREE, AuxOutput} from 'animation-utilities';\nimport jibo from '../jibo';\n\n\n//keep these around\nlet robotInfo;\nlet timeline;\nlet renderer;\n\n/**\n * we want to wrap the loading of animations into our own runtime file resolution\n * and format conversion\n * @private\n */\nfunction wrapAnimationUtilities(animUtils) {\n\n    /**\n     * provided for backwards compatibility\n     * @deprecated\n     * @private\n     */\n    animate.createAnimationUtilities = () => {\n        console.warn(\"Warning: createAnimationUtilities() is deprecated. Access anim utils via jibo.animate.\");\n        return animUtils;\n    };\n\n    /**\n     * Creates an animation builder from a .keys file.\n     * @function module:jibo/animate#createAnimationBuilderFromKeysPath\n     * @param {String} uri Path to the .keys file.\n     * @param {String} root Base path from which texture files are located.\n     * @param {module:jibo/animate~AnimationBuilderCreatedCallback} cb Callback function that takes an {@link AnimationBuilder} as an argument.\n     * @deprecated since 3.1.0\n     * @see module:jibo/loader.KeysTask\n     */\n    animUtils.createAnimationBuilderFromKeysPath = (uri, root, cb) => {\n        console.warn(\"Warning: createAnimationBuilderFromKeysPath() is deprecated. Use the 'keys' load task instead.\");\n        jibo.loader.load({\n            src: uri,\n            root: root,\n            type: 'keys',\n            complete: function(err, animation) {\n                cb(animation.builder);\n            }\n        });\n    };\n\n    /**\n     * provided for backwards compatibility\n     * @deprecated\n     * @private\n     */\n    animUtils.createAnimationUtilities = () => {\n        return animUtils;\n    };\n\n    // pass module types through to the singleton instance\n    animUtils.MODALITY_NAME = animate.MODALITY_NAME;\n    animUtils.trajectory = animate.trajectory;\n    animUtils.AnimationEventType = animate.AnimationEventType;\n    animUtils.LookatEventType = animate.LookatEventType;\n\n    // plus the shared three.js module\n    /**\n     * Shared three.js module reference.\n     * @member module:jibo/animate.THREE\n     */\n    animUtils.THREE = THREE;\n}\n\n\n/**\n * Wrapping this call because we already have a reference to robot info\n * and the timeline.\n * @private\n */\nfunction wrapVisualize() {\n    visualize.robotInfo = robotInfo;\n    visualize.timeline = timeline;\n\n    /**\n     * Creates a face renderer bound to the given DOM element.\n     * @function module:jibo/visualize#createFaceRenderer\n     * @param {HTMLElement} element The element to draw the eye to.\n     * @returns {FaceRenderer}\n     */\n    visualize.createFaceRenderer = (element) => {\n        if (renderer) {\n            return renderer;\n        }\n        renderer = jibo.face;\n        renderer.init(element);\n        timeline.addOutput(new AuxOutput(robotInfo, renderer));\n        return renderer;\n    };\n\n    let createRobotRenderer = visualize.createRobotRenderer;\n    visualize.createRobotRenderer = (element, type, callback) => {\n        createRobotRenderer(robotInfo, element, type, (renderer) => {\n            if (renderer !== null) {\n                TimelineBuilder.connectRenderer(timeline, renderer);\n                if(callback) {\n                    callback(null, renderer);\n                }\n            }\n            else {\n                if(callback) {\n                    callback(\"Renderer creation failed\");\n                }\n            }\n        });\n    };\n}\n\nexport default class AnimationUtils {\n    static init(animUtils, done) {\n        let config = new JiboConfig();\n        RobotInfo.createInfo(config,  (ri) => {\n            TimelineBuilder.createTimeline(ri, (tl) => {\n                robotInfo = ri;\n                timeline = tl;\n                animUtils.init(timeline, robotInfo);\n                wrapAnimationUtilities(animUtils);\n                wrapVisualize();\n                done();\n            });\n        });\n    }\n}\n"],"sourceRoot":"/source/"}