{"version":3,"sources":["Runtime.ts"],"names":[],"mappings":"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","file":"Runtime.js","sourcesContent":["import {body, LEDOutput, animate, visualize} from \"animation-utilities\";\nimport path = require('path');\nimport fs = require('fs');\nimport async = require('async');\nimport Timer from './utils/Timer';\nimport LoaderPlugin from './loader/LoaderPlugin';\nimport SoundPlugin from './sound/SoundPlugin';\nimport FaceRenderer from './rendering/FaceRenderer';\nimport GlobalPerfTimer from './utils/perf/GlobalPerfTimer';\nimport SerialTimer from './utils/perf/SerialTimer';\nimport ParallelTimer from './utils/perf/ParallelTimer';\n\nlet ipc = null;\ntry {\n    ipc = require('ipc');\n}\ncatch(e){\n    console.warn(\"Not running inside Electron\");\n}\n\n/**\n * The Jibo SDK singleton.\n * @prop {module:jibo/animate} animate Jibo's animation and IK systems.\n * @prop {module:jibo/asr} asr Automatic Speech Recognition (embedded recognition).\n * @prop {module:jibo/body} body Non-motion related body services.\n * @prop {module:jibo/bt} bt SDK behaviors.\n * @prop {module:jibo/lps} lps Jibo's Local Perceptual Space.\n * @prop {module:jibo/nlu} nlu Natural Language Understanding (cloud recognition).\n * @prop {module:jibo/tts} tts Text-to-speech.\n * @prop {module:jibo/audio} audio Jibo's audio system.\n * @prop {module:jibo/timer} timer Jibo's main update loop.\n * @prop {module:jibo/face} face API to jibo's face.\n * @prop {module:jibo/sound} sound Manage playback of audio media.\n * @module jibo\n */\nclass Runtime {\n\n    /**\n     * true if Jibo is currently being initialized.\n     * @name module:jibo.Runtime.isInitializing\n     * @type {Boolean}\n     * @readOnly\n     * @default false\n     */\n    public static isInitializing:boolean = false;\n\n    /**\n     * true if Jibo has finished being initialized.\n     * @name module:jibo.Runtime.isInitialized\n     * @type {Boolean}\n     * @readOnly\n     * @default false\n     */\n    public static isInitialized:boolean = false;\n\n    public utils:any;\n    public services:any;\n    public animate:any;\n    public asr:any;\n    public bt:any;\n    public nlu:any;\n    public lps:any;\n    public tts:any;\n    public body:any;\n    public face:FaceRenderer;\n    public rendering:any;\n    public audio:any;\n    public session:any;\n    public options:any;\n    public systemManager:any;\n    public behaviorEmitter:any;\n    public visualize:any;\n    public timer:Timer;\n    public sound:SoundPlugin;\n    public loader:LoaderPlugin;\n    private _serviceInit:any;\n    private FaceRenderer:FaceRenderer;\n\n    constructor(jibo) {\n\n        // Make sure there isn't a singleton already created, or warn\n        if (GLOBAL.jibo) {\n            throw new Error(\"Jibo Singleton may only be initialized once.\");\n        }\n\n        // Assign as global singleton to the global space\n        GLOBAL.jibo = this;\n\n        // Pass in class references\n        this.utils = jibo.utils;\n        this.services = jibo.services;\n\n        // Services\n        this.animate = animate.createAnimationUtilities();\n        this.asr = new jibo.services.asr.ASRService();\n        this.bt = new jibo.bt.Factory(jibo.bt);\n        this.nlu = new jibo.services.NLUService();\n        this.lps = new jibo.services.LPSService();\n        this.tts = new jibo.services.TTSService();\n        this.body = new jibo.services.BodyService();\n        this.audio = new jibo.services.AudioService();\n        this.timer = new jibo.utils.Timer();\n        this.loader = new LoaderPlugin();\n        this.face = new jibo.rendering.FaceRenderer(this.timer);\n        this.sound = new SoundPlugin();\n\n        // Add tasks from other modules\n        this.loader.register(jibo.sound.tasks.SoundTask, 50)\n            .register(jibo.rendering.tasks.ColorAlphaTask, 40)\n            .register(jibo.rendering.tasks.TimelineTask, 60)\n            .register(jibo.rendering.tasks.ShapesTask, 70)\n            .register(jibo.rendering.tasks.KeysTask, 80)\n            .register(jibo.rendering.tasks.SpritesheetTask, 90)\n            .register(jibo.rendering.tasks.TextureTask, 30);\n\n        /** For the SDK tool */\n        this.FaceRenderer = jibo.rendering.FaceRenderer;\n        this.rendering = jibo.rendering;\n\n         /**\n          * @name module:jibo#session\n          * @type {SessionManager}\n          * @private\n          */\n        this.session = new jibo.services.SessionManager();\n\n        /**\n         * @name module:jibo#systemManager\n         * @type {SystemManager}\n         * @private\n         */\n        this.systemManager = new jibo.services.SystemManager();\n\n        /**\n         * @name module:jibo#behaviorEmitter\n         * @type {BehaviorEmitter}\n         * @private\n         */\n        this.behaviorEmitter = new jibo.bt.BehaviorEmitter();\n\n        /**\n         * @name module:jibo#visualize\n         * @type {Object}\n         * @private\n         */\n        this.visualize = visualize;\n\n        /**\n         * Initialization options\n         * @name module:jibo#options\n         * @type {Object}\n         * @private\n         */\n        this.options = null;\n\n        /**\n         * The map of service calls to init\n         * @name module:jibo#_serviceInit\n         * @type {Object}\n         * @private\n         */\n        this._serviceInit = {\n            tts: (service, cb) => {\n                this.tts.init(service, cb);\n            },\n            lps: (service, cb) => {\n                this.lps.init(service, cb);\n            },\n            body: (service, cb) => {\n                let uri = \"ws:\" + service.host + \":\" + service.port;\n                let bodyOutput = new body.BodyPosVelOutput(\n                    this.visualize.timeline.getClock(),\n                    this.visualize.robotInfo,\n                    uri,\n                    true,\n                    33\n                );\n\n                this.visualize.timeline.addOutput(bodyOutput, null);\n\n                let ledOutput = new LEDOutput(\n                    this.visualize.timeline.getClock(),\n                    this.visualize.robotInfo,\n                    uri,\n                    true,\n                    33\n                );\n                this.visualize.timeline.addOutput(ledOutput, null);\n                this.body.init(service, cb);\n            },\n            nlu: (service, cb) => {\n                this.nlu.init(service, cb);\n            },\n            asr: (service, cb) => {\n                this.asr.init(service, cb);\n            },\n            systemManager: (service, cb) => {\n                this.systemManager.init(service, cb);\n            },\n            audio: (service, cb) => {\n                this.audio.init(service, cb);\n            }\n        };\n    }\n\n    requireAssetPack(assetPackPackage) {\n        if (fs.existsSync(assetPackPackage)) {\n            let pj = require(assetPackPackage);\n            if (pj.jibo && pj.jibo.type === \"asset-pack\") {\n                let main = path.resolve(path.parse(assetPackPackage).dir, pj.main);\n                return require(main);\n            }\n        }\n    }\n\n    /**\n     * @description\n     * Initializes the jibo SDK.\n     *\n     * ```\n     * let jibo = require('jibo');\n     * jibo.init('face', (e) => {\n     *    if (e) return console.error(e);\n     *    // Setup!\n     * });\n     * ```\n     * @method module:jibo#init\n     * @param {Object|Function|String|HTMLElement} [options] Either the options, canvas DOM ID or DOM Element for canvas or callback\n     * @param {DOMElement|String} [options.display] Either the canvas DOM or DOM ID\n     * @param {Function} [callback] Called when the SDK is finished initializing.\n     */\n    init(options, cb) {\n\n        // Support for old-style init(callback)\n        if (typeof options === 'function') {\n            cb = options;\n            options = null;\n        }\n        else if (typeof options === 'string' || options instanceof HTMLElement) {\n            options = { display: options };\n        }\n\n        // Save options with defaults\n        this.options = Object.assign({\n            display: null\n        }, options || {});\n\n        if (typeof cb === 'function') {\n            this._init(cb);\n        }\n        else {\n            // Deprecate this, use direct callback\n            return new Promise((resolve, reject) => {\n                this._init((err) => {\n                    if(err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            });\n        }\n    }\n\n    _init(callback) {\n\n        if (Runtime.isInitializing || Runtime.isInitialized) {\n            throw new Error('Jibo Singleton may only be initialized once.');\n        }\n\n        Runtime.isInitializing = true;\n\n        const initNetworkServices = (done) => {\n            this.initNetworkServices(done);\n        };\n        const initAnimate = (done) => {\n            const initAnimateTimer = new SerialTimer(\"initAnimate\", GlobalPerfTimer.get());\n            this.utils.AnimationUtils.init(this.animate, function(){\n                initAnimateTimer.stop();\n                done.apply(this, arguments);\n            });\n        };\n        async.series([initAnimate, initNetworkServices], (err) => {\n            if(err) {\n                // @if DEBUG\n                // add splash on top of everything to say what the error was\n                let div = `<div style=\"position:absolute;top:0px;left:0px;width:100%;height:100%;z-index:999999;background:#a7a7a7;text-align:center;\">`;\n                div += `<span style=\"position:absolute;top:250px;left:0px;font-size:44px;font-weight:bold;font-family:Arial;color:#c50000;padding:20px;\">${err}</span>`;\n                div += `</div>`;\n                document.body.innerHTML += div;\n                // @endif\n                callback(err);\n            }\n            else {\n                let display = this.options.display;\n                if (display)\n                {\n                    if (typeof display === \"string\")\n                    {\n                        display = document.getElementById(display);\n                    }\n                    if (!display)\n                    {\n                        throw new Error(\"Display canvas element is invalid\");\n                    }\n                    this.visualize.createFaceRenderer(display);\n                }\n                Runtime.isInitialized = true;\n                this.timer.start();\n                callback();\n            }\n        });\n    }\n\n    initNetworkServices(done) {\n        let registryHost;\n        let services;\n\n        const initNetworkServicesTimer = new SerialTimer(\"initNetworkServices\", GlobalPerfTimer.get());\n\n        async.series(\n            [\n                // Get registry host and session token\n                (cb) => {\n\n                    const getRegistryHostTimer = new SerialTimer('getRegistryHost', initNetworkServicesTimer);\n\n                    // Ignore if not running Electron\n                    if (!ipc) {\n                        getRegistryHostTimer.stop();\n                        return cb(null, null);\n                    }\n\n                    if(this.options.registryHost) {\n                        registryHost = this.options.registryHost;\n                        cb(null, null);\n                    }\n                    else {\n                        ipc.on('set-registry-host', (initData) => {\n                            if(typeof initData === 'string' || initData instanceof String) {\n                                registryHost = initData;\n                            }\n                            else {\n                                registryHost = initData.registryHost;\n                                if(initData.token) {\n                                    this.session.token = initData.token;\n                                    console.warn('Session Token = ' + this.session.token);\n                                }\n                            }\n                            getRegistryHostTimer.stop();\n                            cb(null, null);\n                        });\n                    }\n                },\n\n                // Fetch the list of services from the registry\n                (cb) => {\n                    const fetchServicesTimer = new SerialTimer('fetchServicesTimer', initNetworkServicesTimer);\n\n                    let request = new XMLHttpRequest();\n                    // Set to be minimum of 3 secs to avoid the 'can't find registry' issue when running remotely\n                    request.timeout = 3000;\n                    request.onreadystatechange = () => {\n                        if(request.readyState === 4 && request.status === 200) {\n                            services = JSON.parse(request.responseText);\n                            if(services.records) {\n                                services = services.records;\n\n                                // sort them so service-manager is at the top\n                                services.sort( (a, b) => {\n                                    if (a.name === \"system-manager\") {\n                                        return -1;\n                                    }\n                                    if (b.name === \"system-manager\") {\n                                        return 1;\n                                    }\n                                    return -1;\n                                });\n                            }\n\n                            fetchServicesTimer.stop();\n                            cb(null, null);\n                        }\n                        else if(request.readyState === 4 && request.status === 0) {\n                            cb(new Error('Could not find registry service at ' + registryHost), null);\n                        }\n                    };\n                    request.open(\"GET\", registryHost, true);\n                    request.send(null);\n                },\n                (cb) => {\n                    const parallelInitializeServices = new ParallelTimer('parallelInitializedServices', initNetworkServicesTimer);\n\n\n                    let tasks = [];\n                    services.forEach((service) => {\n                        let initFunction = this._serviceInit[service.name];\n                        if(service.name === 'system-manager') {\n                            initFunction = this._serviceInit.systemManager;\n                        }\n                        if(initFunction) {\n                            tasks.push((_cb) => {\n                                // We wrap the service init callback so that we can\n                                // time each servicie initialization automatically\n                                const serviceInitFunctionTimer = new SerialTimer(service.name, parallelInitializeServices);\n                                initFunction(service, function(error, param) {\n                                    serviceInitFunctionTimer.stop();\n                                    _cb.apply(this, arguments);\n                                });\n                            });\n                        }\n                    });\n                    async.parallel(tasks, (error, results) => {\n                        if (error) {\n                            // @if DEBUG\n                            console.error('Error: ' + error);\n                            // @endif\n                            cb(error, null);\n                        }\n                        else {\n                            parallelInitializeServices.stop();\n                            cb(null, results);\n                        }\n                    });\n                }\n            ],\n            (error, results) => {\n                if(error) {\n                    // @if DEBUG\n                    console.error('Error: ' + error);\n                    // @endif\n                    done(error);\n                }\n                else {\n                    // End of serviceInit timer\n                    initNetworkServicesTimer.stop();\n\n                    // End top most jibo timer\n                    GlobalPerfTimer.get().stop();\n\n                    // Comment/uncomment this line to see the timing info\n                    // TODO: Consider setting up a performance regression test suite\n                    //console.log(GlobalPerfTimer.get().getTimings());\n                    done(null, results);\n                }\n            }\n        );\n        // Ignore if not running Electron\n        if (ipc) {\n            ipc.send('get-registry-host');\n        }\n    }\n\n    /**\n     * Gets singleton instance of Jibo.\n     * @name module:jibo.instance\n     * @type {jibo}\n     * @private\n     * @readOnly\n     */\n    static get instance(){\n        return GLOBAL.jibo;\n    }\n}\n\nexport default Runtime;\n"],"sourceRoot":"/source/"}