{"version":3,"sources":["sound/SoundContext.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;AACH;IASI;QAEI;;;;WAIG;QACH,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;QAE/B,kCAAkC;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACxD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAEhD,mBAAmB;QACnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,8BAAO,GAAP;QAEI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC5B,CAAC;IASD,sBAAI,iCAAO;QAPX;;;;;;WAMG;aACH;YAEI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACrB,CAAC;;;OAAA;IAQD,sBAAI,+BAAK;QANT;;;;;WAKG;aACH;YAEI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;aACD,UAAU,KAAa;YAEnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;YACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;QAC/D,CAAC;;;OALA;IAaD,sBAAI,gCAAM;aAWV;YAEI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;QApBD;;;;;WAKG;aACH,UAAW,MAAa;YAEpB,gBAAgB;YAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YAEtB,qCAAqC;YACrC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CACjB,CAAC;gBACG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;YAC7C,CAAC;QACL,CAAC;;;OAAA;IAYD,sBAAI,gCAAM;aAYV;YAEI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;QArBD;;;;;WAKG;aACH,UAAW,MAAc;YAErB,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,CAC5C,CAAC;gBACS,IAAI,CAAC,IAAK,CAAC,OAAO,EAAE,CAAC;YAC/B,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,WAAW,CAAC,CACpD,CAAC;gBACS,IAAI,CAAC,IAAK,CAAC,MAAM,EAAE,CAAC;YAC9B,CAAC;YACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAC1B,CAAC;;;OAAA;IAMD;;;OAGG;IACH,iCAAU,GAAV;QAEI,+BAA+B;QAC/B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,iCAAU,GAAV;QAEI,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IACL,mBAAC;AAAD,CAlIA,AAkIC,IAAA;AAED;kBAAe,YAAY,CAAC","file":"sound/SoundContext.js","sourcesContent":["/**\n * Main class to handle webkit audio.\n *\n * @class SoundContext\n * @private\n */\nclass SoundContext\n{\n    private _ctx:AudioContext;\n    private _gainNode:GainNode;\n    private _compressor:DynamicsCompressorNode;\n    private _muted:boolean;\n    private _volume:number;\n    private _paused:boolean;\n\n    constructor()\n    {\n        /**\n         * The instance of the AudioContext for WebAudio API.\n         * @private\n         * @property {AudioContext} _ctx\n         */\n        this._ctx = new AudioContext();\n\n        // setup the end of the node chain\n        this._gainNode = this._ctx.createGain();\n        this._compressor = this._ctx.createDynamicsCompressor();\n        this._gainNode.connect(this._compressor);\n        this._compressor.connect(this._ctx.destination);\n\n        // Set the defaults\n        this.volume = 1;\n        this.muted = false;\n        this.paused = false;\n    }\n\n    destroy()\n    {\n        this._ctx = null;\n        this._gainNode = null;\n        this._compressor = null;\n    }\n\n    /**\n     * The WebAudio API AudioContext object.\n     * @property {AudioContext} context\n     * @private\n     * @name SoundContext#context\n     * @type {AudioContext}\n     */\n    get context(): AudioContext\n    {\n        return this._ctx;\n    }\n\n    /**\n     * Sets the muted state.\n     * @type {Boolean}\n     * @name SoundContext#muted\n     * @default false\n     */\n    get muted():boolean\n    {\n        return this._muted;\n    }\n    set muted(muted:boolean)\n    {\n        this._muted = !!muted;\n        this._gainNode.gain.value = this._muted ? 0 : this._volume;\n    }\n\n    /**\n     * Sets the volume from 0 to 1.\n     * @type {Number}\n     * @name SoundContext#volume\n     * @default 1\n     */\n    set volume(volume:number)\n    {\n        // update volume\n        this._volume = volume;\n\n        // update actual volume IIF not muted\n        if (!this._muted)\n        {\n            this._gainNode.gain.value = this._volume;\n        }\n    }\n    get volume():number\n    {\n        return this._volume;\n    }\n\n    /**\n     * Pauses all sounds.\n     * @type {Boolean}\n     * @name SoundContext#paused\n     * @default false\n     */\n    set paused(paused:boolean)\n    {\n        if (paused && this._ctx.state === 'running')\n        {\n            (<any>this._ctx).suspend();\n        }\n        else if (!paused && this._ctx.state === 'suspended')\n        {\n            (<any>this._ctx).resume();\n        }\n        this._paused = paused;\n    }\n    get paused():boolean\n    {\n        return this._paused;\n    }\n\n    /**\n     * Returns the entry node in the master node chains.\n     * @private\n     */\n    _entryNode():GainNode\n    {\n        //return this._ctx.destination;\n        return this._gainNode;\n    }\n\n    /**\n     * Toggles the muted state.\n     * @method SoundContext#toggleMute\n     * @return {Boolean} The current muted state.\n     */\n    toggleMute():boolean\n    {\n        this.muted = !this.muted;\n        return this._muted;\n    }\n}\n\nexport default SoundContext;\n"],"sourceRoot":"/source/"}