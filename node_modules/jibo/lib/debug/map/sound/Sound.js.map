{"version":3,"sources":["sound/Sound.ts"],"names":[],"mappings":";AACA,6BAAyB,gBAAgB,CAAC,CAAA;AAC1C,8BAA0B,iBAAiB,CAAC,CAAA;AAsC5C;;;;;;;;;;;;;;;;;;;GAmBG;AACH;IAoBI,eAAY,OAAoB,EAAE,OAAkC;QAEhE,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,YAAY,WAAW,CAAC,CAClE,CAAC;YACG,OAAO,GAAG,EAAC,GAAG,EAAsB,OAAO,EAAC,CAAC;QACjD,CAAC;QAED,mBAAmB;QACnB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YACpB,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE,KAAK;YACZ,GAAG,EAAE,IAAI;YACT,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,CAAC;YACV,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,KAAK;YACX,MAAM,EAAE,KAAK;SAChB,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;QAElB;;;;;WAKG;QACH,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB;;;;;WAKG;QACH,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;QAElC;;;;;WAKG;QACH,IAAI,CAAC,MAAM,GAAG,IAAI,sBAAY,CAAC,IAAI,CAAC,IAAI,CAAC;aACpC,YAAY,EAAE;aACd,QAAQ,EAAE;aACV,QAAQ,EAAE;aACV,MAAM,EAAE,CAAC;QAEd;;;;;WAKG;QACH,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAEtB;;;;;;WAMG;QACH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB;;;;;;;WAOG;QACH,IAAI,CAAC,QAAQ,GAAa,OAAQ,CAAC,QAAQ,CAAC;QAE5C;;;;;WAKG;QACH,IAAI,CAAC,KAAK,GAAa,OAAQ,CAAC,KAAK,CAAC;QAEtC;;;;;;WAMG;QACH,IAAI,CAAC,OAAO,GAAa,OAAQ,CAAC,OAAO,CAAC;QAE1C;;;;;WAKG;QACH,IAAI,CAAC,QAAQ,GAAa,OAAQ,CAAC,QAAQ,CAAC;QAE5C;;;;;WAKG;QACH,IAAI,CAAC,MAAM,GAAa,OAAQ,CAAC,MAAM,CAAC;QAExC;;;;;WAKG;QACH,IAAI,CAAC,GAAG,GAAa,OAAQ,CAAC,GAAG,CAAC;QAElC;;;;;;WAMG;QACH,IAAI,CAAC,MAAM,GAAa,OAAQ,CAAC,MAAM,CAAC;QAExC;;;;;WAKG;QACH,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,gEAAgE;QAChE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;QAEvD,oBAAoB;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,YAAY,CAAC;QAChD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC;QAC9C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC;QAE1C,eAAe;QACf,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,oCAAoC,CAAC,CAAC;QACnE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,gCAAgC,CAAC,CAAC;QACjE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,gCAAgC,CAAC,CAAC;QACjE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,8BAA8B,CAAC,CAAC;QAE7D,IAAI,CAAC,MAAM,GAAa,OAAQ,CAAC,MAAM,CAAC;QACxC,IAAI,CAAC,OAAO,GAAa,OAAQ,CAAC,OAAO,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAa,OAAQ,CAAC,IAAI,CAAC;QAEpC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CACjB,CAAC;YACG,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,6BAAa,GAAb;QAEI,0BAA0B;QAC1B,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,KAAK,QAAQ,CAAC,CACjC,CAAC;YACG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACnD,CAAC;QAED,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,YAAY,WAAW,CAAC,CACzC,CAAC;YACG,IAAI,CAAC,MAAM,CAAc,IAAI,CAAC,GAAG,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CACrB,CAAC;YACG,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC,CAAC;QACtE,CAAC;QACD,IAAI,CACJ,CAAC;YACG,OAAO,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAC7D,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,uBAAO,GAAP;QAEI,gCAAgC;QAChC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,UAAU,EAAE,CAAC;QAEhC,sBAAsB;QACtB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED,sBAAI,6BAAU;aAAd;YAEI,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAClD,CAAC;;;OAAA;IASD,sBAAI,wBAAK;QAPT;;;;;;WAMG;aACH;YAEI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC/B,CAAC;;;OAAA;IAOD,sBAAI,yBAAM;QALV;;;;WAIG;aACH;YAEI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;QACrC,CAAC;aACD,UAAW,MAAa;YAEpB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QACvC,CAAC;;;OAJA;IAWD,sBAAI,uBAAI;QALR;;;;WAIG;aACH;YAEI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAC7B,CAAC;aACD,UAAS,IAAY;YAEjB,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;QAC/B,CAAC;;;OAJA;IAWD,sBAAI,yBAAM;QALV;;;;WAIG;aACH;YAEI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAC/B,CAAC;aACD,UAAW,MAAkB;YAEzB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QACjC,CAAC;;;OAJA;IAYD,sBAAI,0BAAO;QANX;;;;;WAKG;aACH;YAEI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;QAC5B,CAAC;aACD,UAAY,GAAU;YAElB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC;QACjC,CAAC;;;OAJA;IAYD,sBAAI,4BAAS;QANb;;;;;WAKG;aACH;YAEI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;;;OAAA;IAED;;;;;;;;;OASG;IACH,oBAAI,GAAJ,UAAK,OAAqC;QAA1C,iBAgDC;QA9CG,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,CAClC,CAAC;YACG,OAAO,GAAG,EAAE,QAAQ,EAAoB,OAAO,EAAE,CAAC;QACtD,CAAC;QACD,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YACpB,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,CAAC;SACZ,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;QAElB,8BAA8B;QAC9B,uDAAuD;QACvD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CACrB,CAAC;YACG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CACnB,CAAC;gBACG,IAAM,MAAM,GAAiB,OAAQ,CAAC,MAAM,CAAC;gBAC7C,EAAE,CAAC,CAAC,MAAM,CAAC,CACX,CAAC;oBACG,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACzB,CAAC;gBACD,IAAI,CAAC,aAAa,EAAE,CAAC;YACzB,CAAC;YACD,MAAM,CAAC;QACX,CAAC;QAED,kBAAkB;QAClB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CACf,CAAC;YACG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC5B,CAAC;QAED,yBAAyB;QACzB,IAAM,QAAQ,GAAG,uBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE;YACtB,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC3B,EAAE,CAAC,CAAe,OAAQ,CAAC,QAAQ,CAAC,CACpC,CAAC;gBACiB,OAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,CAAC;YAC1C,CAAC;QACL,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,IAAI,CAAe,OAAQ,CAAC,MAAM,CAAC,CAAC;QAC7C,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACH,2BAAW,GAAX,UAAY,QAAsB;QAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CACpB,CAAC;YACG,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CACf,CAAC;gBACG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACrC,CAAC;YACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;QAChD,CAAC;QACD,QAAQ,CAAC,OAAO,EAAE,CAAC;IACvB,CAAC;IAGD;;;;OAIG;IACH,oBAAI,GAAJ;QAEI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CACrB,CAAC;YACG,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAS,QAAQ;YAErC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,qBAAK,GAAL;QAEI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAS,QAAQ;YAErC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;;IAED;;;;OAIG;IACH,sBAAM,GAAN;QAEI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAS,QAAQ;YAErC,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,gCAAgB,GAAhB;QAEI,wBAAwB;QACxB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAS,QAAQ;YAErC,QAAQ,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACH,uBAAO,GAAP;QAAA,iBAcC;QAZG,IAAM,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;QACrC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAU,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC5C,OAAO,CAAC,YAAY,GAAG,aAAa,CAAC;QAErC,wBAAwB;QACxB,OAAO,CAAC,MAAM,GAAG;YACb,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC;QAEF,6BAA6B;QAC7B,OAAO,CAAC,IAAI,EAAE,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,wBAAQ,GAAR;QAAA,iBAoBC;QAlBG,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,IAAI;YAC5B,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;gBACG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,CAChB,CAAC;oBACG,KAAI,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAkB,KAAI,CAAC,GAAK,CAAC,CAAC,CAAC;gBACzD,CAAC;gBACD,MAAM,CAAC;YACX,CAAC;YACD,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjD,IAAM,IAAI,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;YACzC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;gBACnC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;YACD,KAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACH,sBAAM,GAAN,UAAO,WAAuB;QAA9B,iBAmBC;QAjBG,IAAI,CAAC,IAAI,CAAC,eAAe,CACrB,WAAW,EAAE,UAAC,MAAM;YAChB,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,CAChB,CAAC;gBACG,KAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAI,CAAC,CAAC;YAC5B,CAAC;YACD,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,CAAC,CAClB,CAAC;gBACG,KAAI,CAAC,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;YAC7B,CAAC;QACL,CAAC,EACD;YACI,KAAI,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC;QACpD,CAAC,CACJ,CAAC;IACN,CAAC;IACL,YAAC;AAAD,CAphBA,AAohBC,IAAA;AAED;kBAAe,KAAK,CAAC","file":"sound/Sound.js","sourcesContent":["import SoundContext from './SoundContext';\nimport ChainBuilder from './ChainBuilder';\nimport SoundInstance from './SoundInstance';\n\nexport interface Options {\n    autoPlay?:boolean;\n    preaload?:boolean;\n    block?:boolean;\n    volume?:number;\n    panning?:number;\n    complete?:CompleteCallback;\n    loaded?:LoadedCallback;\n    preload?:boolean;\n    loop?:boolean;\n    src?:string|ArrayBuffer;\n    useXHR?:boolean;\n}\n\nexport interface PlayOptions {\n    offset?:number;\n    complete?:CompleteCallback;\n    loaded?:LoadedCallback;\n}\n\n\n/**\n * Callback when sound is loaded.\n * @callback module:jibo/sound.Sound~loadedCallback\n * @param {Error} err The callback error.\n * @param {module:jibo/sound.Sound} sound The instance of new sound.\n */\nexport declare type LoadedCallback = (err:Error, sound?:Sound) => void;\n\n/**\n * Callback when sound is completed.\n * @callback module:jibo/sound.Sound~completeCallback\n * @param {module:jibo/sound.Sound} sound The instance of sound.\n */\nexport declare type CompleteCallback = (sound:Sound) => void;\n\n/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n *\n * @class Sound\n * @memberof module:jibo/sound\n * @constructor\n * @param {SoundContext} [context] The context.\n * @param {ArrayBuffer|String|Object} options Either the path or url to the source file.\n *        or the object of options to use.\n * @param {ArrayBuffer|String} [options.src] If `options` is an object, the source of file.\n * @param {Boolean} [options.autoPlay=false] true to play after loading.\n * @param {Boolean} [options.preload=false] true to immediately start preloading.\n * @param {Boolean} [options.block=false] true to only play one instance of the sound at a time.\n * @param {Number} [options.volume=1] The amount of volume 1 = 100%.\n * @param {Boolean} [options.useXHR=false] true to use XMLHttpRequest to load the sound. Default is false, loaded with NodeJS's `fs` module.\n * @param {Number} [options.panning=0] The panning amount from -1 (left) to 1 (right).\n * @param {module:jibo/sound.Sound~completeCallback} [options.complete=null] Global complete callback when play is finished.\n * @param {module:jibo/sound.Sound~loadedCallback} [options.loaded=null] Call when finished loading.\n * @param {Boolean} [options.loop=false] true to loop the audio playback.\n */\nclass Sound\n{\n    public isLoaded:boolean;\n    public isPlaying:boolean;\n    public autoPlay:boolean;\n    public complete:CompleteCallback;\n    public loaded:LoadedCallback;\n    public block:boolean;\n    public preload:boolean;\n    public src:string|ArrayBuffer;\n    public useXHR:boolean;\n    private _context:SoundContext;\n    private _ctx:AudioContext;\n    private _chain:ChainBuilder;\n    private _instances:Array<SoundInstance>;\n    private _source:any;\n    private _gainNode:any;\n    private _analyser:any;\n    private _panner:any;\n\n    constructor(context:SoundContext, options:string|Options|ArrayBuffer)\n    {\n        if (typeof options === \"string\" || options instanceof ArrayBuffer)\n        {\n            options = {src: <string|ArrayBuffer>options};\n        }\n\n        // Default settings\n        options = Object.assign({\n            autoPlay: false,\n            block: false,\n            src: null,\n            preload: false,\n            volume: 1,\n            panning: 0,\n            complete: null,\n            loaded: null,\n            loop: false,\n            useXHR: false\n        }, options || {});\n\n        /**\n         * Reference to the sound context.\n         * @name module:jibo/sound.Sound#_context\n         * @type {SoundContext}\n         * @private\n         */\n        this._context = context;\n\n        /**\n         * Reference to the WebAudio API AudioContext.\n         * @name module:jibo/sound.Sound#_ctx\n         * @type {AudioContext}\n         * @private\n         */\n        this._ctx = this._context.context;\n\n        /**\n         * Instance of the chain builder.\n         * @name module:jibo/sound.Sound#_chain\n         * @type {ChainBuilder}\n         * @private\n         */\n        this._chain = new ChainBuilder(this._ctx)\n            .bufferSource()\n            .gainNode()\n            .analyser()\n            .panner();\n\n        /**\n         * true if the buffer is loaded.\n         * @name module:jibo/sound.Sound#isLoaded\n         * @type {Boolean}\n         * @default false\n         */\n        this.isLoaded = false;\n\n        /**\n         * true if the sound is currently being played.\n         * @name module:jibo/sound.Sound#isPlaying\n         * @type {Boolean}\n         * @default false\n         * @readOnly\n         */\n        this.isPlaying = false;\n\n        /**\n         * true to start playing immediate after load.\n         * @name module:jibo/sound.Sound#autoPlay\n         * @type {Boolean}\n         * @private\n         * @default false\n         * @readOnly\n         */\n        this.autoPlay = (<Options>options).autoPlay;\n\n        /**\n         * true to block successive plays.\n         * @name module:jibo/sound.Sound#block\n         * @type {Boolean}\n         * @default false\n         */\n        this.block = (<Options>options).block;\n\n        /**\n         * true to immediately start preloading.\n         * @name module:jibo/sound.Sound#preload\n         * @type {Boolean}\n         * @default false\n         * @readOnly\n         */\n        this.preload = (<Options>options).preload;\n\n        /**\n         * Callback when finished playing.\n         * @name module:jibo/sound.Sound#complete\n         * @type {module:jibo/sound.Sound~completeCallback}\n         * @default false\n         */\n        this.complete = (<Options>options).complete;\n\n        /**\n         * Callback when load is finished.\n         * @type {module:jibo/sound.Sound~loadedCallback}\n         * @name module:jibo/sound.Sound#loaded\n         * @readOnly\n         */\n        this.loaded = (<Options>options).loaded;\n\n        /**\n         * The file source to load.\n         * @name module:jibo/sound.Sound#src\n         * @type {String|ArrayBuffer}\n         * @readOnly\n         */\n        this.src = (<Options>options).src;\n\n        /**\n         * `true` to use XMLHttpRequest object to load.\n         * Default is to use NodeJS's fs module to read the sound.\n         * @name module:jibo/sound.Sound#useXHR\n         * @type {Boolean}\n         * @default false\n         */\n        this.useXHR = (<Options>options).useXHR;\n\n        /**\n         * The collection of instances being played.\n         * @name module:jibo/sound.Sound#_instances\n         * @type {Array<SoundInstance>}\n         * @private\n         */\n        this._instances = [];\n\n        // connect this._chain.last() node to this._context._entryNode()\n        this._chain.last().connect(this._context._entryNode());\n\n        // create some alias\n        this._source = this._chain.nodes().bufferSource;\n        this._gainNode = this._chain.nodes().gainNode;\n        this._analyser = this._chain.nodes().analyser;\n        this._panner = this._chain.nodes().panner;\n\n        // @if DEBUG\n        // sanity check\n        console.assert(this._source, \"No bufferSource: not yet supported\");\n        console.assert(this._gainNode, \"No gainNode: not yet supported\");\n        console.assert(this._analyser, \"No analyser: not yet supported\");\n        console.assert(this._panner, \"No panner: not yet supported\");\n        // @endif\n\n        this.volume = (<Options>options).volume;\n        this.panning = (<Options>options).panning;\n        this.loop = (<Options>options).loop;\n\n        if (this.preload)\n        {\n            this._beginPreload();\n        }\n    }\n\n    /**\n     * Starts the preloading of sound.\n     * @method module:jibo/sound.Sound#_beginPreload\n     * @private\n     */\n    _beginPreload():void\n    {\n        // Load from the file path\n        if (typeof this.src === \"string\")\n        {\n            this.useXHR ? this.loadUrl() : this.loadPath();\n        }\n        // Load from the arraybuffer, incase it was loaded outside\n        else if (this.src instanceof ArrayBuffer)\n        {\n            this.decode(<ArrayBuffer>this.src);\n        }\n        else if (this.loaded)\n        {\n            this.loaded(new Error(\"sound.src must be ArrayBuffer or string\"));\n        }\n        else\n        {\n            console.error('sound.src must be ArrayBuffer or string');\n        }\n    }\n\n    /**\n     * Destructor, safer to use `SoundPlugin.remove(alias)` to remove this sound.\n     * @private\n     * @method module:jibo/sound.Sound#destroy\n     */\n    destroy():void\n    {\n        // disconnect from this._context\n        this._chain.last().disconnect();\n\n        // destroy this._chain\n        this._chain.destroy();\n        this._chain = null;\n        this._context = null;\n        this._ctx = null;\n\n        this._source = null;\n        this._removeInstances();\n        this._instances = null;\n    }\n\n    get isPlayable():boolean\n    {\n        return this.isLoaded && !!this._source.buffer;\n    }\n\n    /**\n     * Getter of the chain nodes.\n     * @name module:jibo/sound.Sound#nodes\n     * @type {Object}\n     * @private\n     * @readOnly\n     */\n    get nodes():Object\n    {\n        return this._chain.nodes();\n    }\n\n    /**\n     * Gets and sets the volume.\n     * @name module:jibo/sound.Sound#volume\n     * @type {Number}\n     */\n    get volume():number\n    {\n        return this._gainNode.gain.value;\n    }\n    set volume(volume:number)\n    {\n        this._gainNode.gain.value = volume;\n    }\n\n    /**\n     * Gets and sets the looping.\n     * @name module:jibo/sound.Sound#loop\n     * @type {Boolean}\n     */\n    get loop():boolean\n    {\n        return this._source.loop;\n    }\n    set loop(loop:boolean)\n    {\n        this._source.loop = !!loop;\n    }\n\n    /**\n     * Gets and sets the buffer.\n     * @name module:jibo/sound.Sound#buffer\n     * @type {AudioBuffer}\n     */\n    get buffer():AudioBuffer\n    {\n        return this._source.buffer;\n    }\n    set buffer(buffer:AudioBuffer)\n    {\n        this._source.buffer = buffer;\n    }\n\n    /**\n     * Gets and sets the panning -1 (full left pan) and 1 (full right pan).\n     * @name module:jibo/sound.Sound#panning\n     * @type {Number}\n     * @default 0\n     */\n    get panning():number\n    {\n        return this._panner.pan;\n    }\n    set panning(pan:number)\n    {\n        this._panner.pan.value = pan;\n    }\n\n    /**\n     * Gets the list of instances that are currently being played of this sound.\n     * @name module:jibo/sound.Sound#instances\n     * @type {Array<SoundInstance>}\n     * @readOnly\n     */\n    get instances():Array<SoundInstance>\n    {\n        return this._instances;\n    }\n\n    /**\n     * Plays the sound.\n     * @method module:jibo/sound.Sound#play\n     * @param {module:jibo/sound.Sound~completeCallback|object} options Either completed function or play options.\n     * @param {Number} [options.offset=0] time when to play the sound.\n     * @param {module:jibo/sound.Sound~completeCallback} [options.complete] Callback when complete.\n     * @param {module:jibo/sound.Sound~loadedCallback} [options.loaded] If the sound isn't already preloaded, callback when\n     *        the audio has completely finished loading and decoded.\n     * @return {SoundInstance} Current playing instance.\n     */\n    play(options?:PlayOptions|CompleteCallback):SoundInstance\n    {\n        if (typeof options === \"function\")\n        {\n            options = { complete: <CompleteCallback>options };\n        }\n        options = Object.assign({\n            complete: null,\n            loaded: null,\n            offset: 0\n        }, options || {});\n\n        // if not yet playable, ignore\n        // - usefull when the sound download isnt yet completed\n        if (!this.isPlayable)\n        {\n            this.autoPlay = true;\n            if (!this.isLoaded)\n            {\n                const loaded = (<PlayOptions>options).loaded;\n                if (loaded)\n                {\n                    this.loaded = loaded;\n                }\n                this._beginPreload();\n            }\n            return;\n        }\n\n        // Stop all sounds\n        if (this.block)\n        {\n            this._removeInstances();\n        }\n\n        // clone the bufferSource\n        const instance = SoundInstance.create(this._chain);\n        this._instances.push(instance);\n        this.isPlaying = true;\n        instance.once('complete', () => {\n            this._onComplete(instance);\n            if ((<PlayOptions>options).complete)\n            {\n                (<PlayOptions>options).complete(this);\n            }\n        });\n        instance.play((<PlayOptions>options).offset);\n        return instance;\n    }\n\n    /**\n     * Sound instance completed.\n     * @method module:jibo/sound.Sound#_onComplete\n     * @private\n     * @param {SoundInstance} instance\n     */\n    _onComplete(instance:SoundInstance): void\n    {\n        if (this._instances)\n        {\n            const index = this._instances.indexOf(instance);\n            if (index > -1)\n            {\n                this._instances.splice(index, 1);\n            }\n            this.isPlaying = this._instances.length > 0;\n        }\n        instance.destroy();\n    }\n\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method module:jibo/sound.Sound#stop\n     * @return {module:jibo/sound.Sound} Instance of this sound.\n     */\n    stop():Sound\n    {\n        if (!this.isPlayable)\n        {\n            this.autoPlay = false;\n            return this;\n        }\n        this.isPlaying = false;\n        this._instances.forEach(function(instance)\n        {\n            instance.stop();\n        });\n        return this;\n    }\n\n    /**\n     * Stops all the instances of this sound from playing.\n     * @method module:jibo/sound.Sound#pause\n     * @return {module:jibo/sound.Sound} Instance of this sound.\n     */\n    pause():Sound\n    {\n        this._instances.forEach(function(instance)\n        {\n            instance.paused = true;\n        });\n        this.isPlaying = false;\n        return this;\n    };\n\n    /**\n     * Stops all the instances of this sound from playing\n     * @method module:jibo/sound.Sound#stop\n     * @return {module:jibo/sound.Sound} Instance of this sound.\n     */\n    resume():Sound\n    {\n        this._instances.forEach(function(instance)\n        {\n            instance.paused = false;\n        });\n        this.isPlaying = this._instances.length > 0;\n        return this;\n    }\n\n    /**\n     * Removes all instances.\n     * @method module:jibo/sound.Sound#_removeInstances\n     * @private\n     */\n    _removeInstances():void\n    {\n        // destroying also stops\n        this._instances.forEach(function(instance)\n        {\n            instance.destroy();\n        });\n        this._instances.length = 0;\n    }\n\n    /**\n     * Loads a sound using XHMLHttpRequest object.\n     * @method module:jibo/sound.Sound#loadUrl\n     * @private\n     */\n    loadUrl():void\n    {\n        const request = new XMLHttpRequest();\n        request.open('GET', <string>this.src, true);\n        request.responseType = 'arraybuffer';\n\n        // Decode asynchronously\n        request.onload = () => {\n            this.isLoaded = true;\n            this.decode(request.response);\n        };\n\n        // actually start the request\n        request.send();\n    }\n\n    /**\n     * Loads using the file system (NodeJS's fs module).\n     * @method module:jibo/sound.Sound#loadPath\n     * @private\n     */\n    loadPath()\n    {\n        const fs = require('fs');\n        fs.readFile(this.src, (err, data) => {\n            if (err)\n            {\n                // @if DEBUG\n                console.error(err);\n                // @endif\n                if (this.loaded)\n                {\n                    this.loaded(new Error(`File not found ${this.src}`));\n                }\n                return;\n            }\n            const arrayBuffer = new ArrayBuffer(data.length);\n            const view = new Uint8Array(arrayBuffer);\n            for (let i = 0; i < data.length; ++i) {\n                view[i] = data[i];\n            }\n            this.decode(arrayBuffer);\n        });\n    }\n\n    /**\n     * Decodes the array buffer.\n     * @method module:jibo/sound.Sound#decode\n     * @param {ArrayBuffer} arrayBuffer From load.\n     * @private\n     */\n    decode(arrayBuffer:ArrayBuffer): void\n    {\n        this._ctx.decodeAudioData(\n            arrayBuffer, (buffer) => {\n                this.isLoaded = true;\n                this.buffer = buffer;\n                if (this.loaded)\n                {\n                    this.loaded(null, this);\n                }\n                if (this.autoPlay)\n                {\n                    this.play(this.complete);\n                }\n            },\n            () => {\n                this.loaded(new Error('Unable to decode file'));\n            }\n        );\n    }\n}\n\nexport default Sound;\n"],"sourceRoot":"/source/"}