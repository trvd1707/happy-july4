{"version":3,"sources":["sound/SoundPlugin.ts"],"names":[],"mappings":"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","file":"sound/SoundPlugin.js","sourcesContent":["import SoundContext from './SoundContext';\nimport {Options, PlayOptions} from './Sound';\nimport Sound from './Sound';\nimport SoundInstance from './SoundInstance';\nimport SoundUtils from './SoundUtils';\n\n/**\n * Manages the playback of sounds.\n * @class SoundLibrary\n * @module jibo/sound\n */\nclass SoundPlugin\n{\n    static _instance:SoundPlugin;\n    public SoundUtils;\n    public Sound;\n    public SoundInstance;\n    private _context:SoundContext;\n    private _sounds:{[id:string]: Sound};\n\n    /**\n     * Gets singleton instance of sound library.\n     * @private\n     * @static\n     * @name module:jibo/sound#instance\n     * @type {module:jibo/sound}\n     */\n    static get instance():SoundPlugin\n    {\n        return SoundPlugin._instance;\n    }\n\n    constructor()\n    {\n        // Check for singleton\n        if (SoundPlugin._instance)\n        {\n            throw new Error(\"Only one SoundPlugin can be created at once\");\n        }\n\n        // Set singleton\n        SoundPlugin._instance = this;\n\n        /**\n         * The global context to use.\n         * @name module:jibo/sound#_context\n         * @type {module:jibo/sound.SoundContext}\n         * @private\n         */\n        this._context = new SoundContext();\n\n        /**\n         * The map of all sounds by alias.\n         * @name module:jibo/sound#_sounds\n         * @type {Object}\n         * @private\n         */\n        this._sounds = {};\n\n        /**\n         * The reference to SoundUtils class.\n         * @name module:jibo/sound.SoundUtils\n         * @type {module:jibo/sound.SoundUtils}\n         */\n        this.SoundUtils = SoundUtils;\n\n        /**\n         * The reference to Sound class.\n         * @name module:jibo/sound.Sound\n         * @type {Sound}\n         */\n        this.Sound = Sound;\n\n        /**\n         * The reference to SoundInstance class.\n         * @name module:jibo/sound.SoundInstance\n         * @type {module:jibo/sound.SoundInstance}\n         */\n        this.SoundInstance = SoundInstance;\n    }\n\n    /**\n     * The global context to use.\n     * @name module:jibo/sound#context\n     * @readOnly\n     * @type {module:jibo/sound.SoundContext}\n     * @private\n     */\n    get context(): SoundContext\n    {\n        return this._context;\n    }\n\n    /**\n     * Adds a new sound by alias.\n     * @method module:jibo/sound#add\n     * @param {String} alias The sound alias reference.\n     * @param {Options|String|ArrayBuffer} options The options: src string or array buffer contents.\n     * @return {module:jibo/sound.Sound} Instance to the Sound object.\n     */\n    add(alias:string, options:Options|string|ArrayBuffer):Sound\n    {\n        // @if DEBUG\n        console.assert(!this._sounds[alias], `Sound with alias ${alias} already exists.`);\n        // @endif\n        const sound = this._sounds[alias] = new Sound(this.context, options);\n        return sound;\n    }\n\n    /**\n     * Adds multiple sounds.\n     * @method module:jibo/sound#addMap\n     * @param {map} alias The sound alias reference.\n     * @param {Object|String|ArrayBuffer} options The options: src string or array buffer contents.\n     * @return {module:jibo/sound.Sound} Instance to the Sound object.\n     */\n    addMap(map:{string:Options|string|ArrayBuffer}, globalOptions?:Options):{[id:string]:Sound}\n    {\n        let results:{[id:string]:Sound} = {};\n        for(let a in map)\n        {\n            let options:Options;\n            if (typeof map[a] === \"string\" || map[a] instanceof ArrayBuffer)\n            {\n                options = {src: map[a]};\n            }\n            else\n            {\n                options = map[a];\n            }\n            console.log(options);\n            results[a] = this.add(a, Object.assign(\n                options,\n                globalOptions || {}\n            ));\n        }\n        return results;\n    }\n\n    /**\n     * Removes a sound by alias.\n     * @method module:jibo/sound#remove\n     * @param {String} alias The sound alias reference.\n     * @return {module:jibo/sound} Instance for chaining.\n     */\n    remove(alias:string):SoundPlugin\n    {\n        this.exists(alias, true);\n        this._sounds[alias].destroy();\n        delete this._sounds[alias];\n        return this;\n    }\n\n    /**\n     * Pauses any playing sounds.\n     * @method module:jibo/sound#pauseAll\n     * @return {module:jibo/sound} Instance for chaining.\n     */\n    pauseAll():SoundPlugin\n    {\n        this._context.paused = true;\n        return this;\n    }\n\n    /**\n     * Resumes any sounds.\n     * @method module:jibo/sound#resumeAll\n     * @return {module:jibo/sound} Instance for chaining.\n     */\n    resumeAll():SoundPlugin\n    {\n        this._context.paused = false;\n        return this;\n    }\n\n    /**\n     * Mutes all playing sounds.\n     * @method module:jibo/sound#muteAll\n     * @return {module:jibo/sound} Instance for chaining.\n     */\n    muteAll():SoundPlugin\n    {\n        this._context.muted = true;\n        return this;\n    }\n\n    /**\n     * Unmutes all playing sounds.\n     * @method module:jibo/sound#unmuteAll\n     * @return {module:jibo/sound} Instance for chaining.\n     */\n    unmuteAll():SoundPlugin\n    {\n        this._context.muted = false;\n        return this;\n    }\n\n    /**\n     * Stops and removes all sounds. They cannot be used after this.\n     * @method module:jibo/sound#removeAll\n     * @return {module:jibo/sound} Instance for chaining.\n     */\n    removeAll(): SoundPlugin\n    {\n        for (let alias in this._sounds)\n        {\n            this._sounds[alias].destroy();\n        }\n        return this;\n    }\n\n    /**\n     * Stops all sounds.\n     * @method module:jibo/sound#stopAll\n     * @return {module:jibo/sound} Instance for chaining.\n     */\n    stopAll():SoundPlugin\n    {\n        for(let alias in this._sounds)\n        {\n            this._sounds[alias].stop();\n        }\n        return this;\n    }\n\n    /**\n     * Checks if a sound by alias exists.\n     * @method module:jibo/sound#exists\n     * @param {String} alias Check for alias.\n     * @return {Boolean} true if the sound exists.\n     */\n    exists(alias:string, assert:boolean=false):boolean\n    {\n        const exists = !!this._sounds[alias];\n        if (assert)\n        {\n            console.assert(exists, `No sound matching alias '${alias}'.`);\n        }\n        return exists;\n    }\n\n    /**\n     * Gets a sound.\n     * @method module:jibo/sound#sound\n     * @param {String} alias The sound alias reference.\n     * @return {module:jibo/sound.Sound} Sound object.\n     */\n    sound(alias:string):Sound\n    {\n        this.exists(alias, true);\n        return this._sounds[alias];\n    }\n\n    /**\n     * Plays a sound.\n     * @method module:jibo/sound#play\n     * @param {String} alias The sound alias reference.\n     * @param {Object|Function} options The options or callback when done.\n     * @param {Function} [options.complete] When completed.\n     * @param {Function} [options.loaded] If not already preloaded, callback when finishes load.\n     * @param {Number} [options.offset=0] Start time offset.\n     * @return {module:jibo/sound.SoundInstance|null} The sound instance, this cannot be reused\n     *         after it is done playing. Returns `null` if the sound has not yet loaded.\n     */\n    play(alias:string, options?:PlayOptions|Object):SoundInstance\n    {\n        return this.sound(alias).play(options);\n    }\n\n    /**\n     * Stops a sound.\n     * @method module:jibo/sound#stop\n     * @param {String} alias The sound alias reference.\n     * @return {module:jibo/sound.Sound} Sound object.\n     */\n    stop(alias:string):Sound\n    {\n        return this.sound(alias).stop();\n    }\n\n    /**\n     * Pauses a sound.\n     * @method module:jibo/sound#pause\n     * @param {String} alias The sound alias reference.\n     * @return {module:jibo/sound.Sound} Sound object.\n     */\n    pause(alias:string):Sound\n    {\n        return this.sound(alias).pause();\n    }\n\n    /**\n     * Resumes a sound.\n     * @method module:jibo/sound#resume\n     * @param {String} alias The sound alias reference.\n     * @return {module:jibo/sound} Instance for chaining.\n     */\n    resume(alias:string):Sound\n    {\n        return this.sound(alias).resume();\n    }\n\n    /**\n     * Destroys the sound module.\n     * @method module:jibo/sound#destroy\n     * @private\n     */\n    destroy():void\n    {\n        this.removeAll();\n        this._sounds = null;\n        this.context = null;\n    }\n}\n\nexport default SoundPlugin;\n"],"sourceRoot":"/source/"}