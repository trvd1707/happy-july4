{"version":3,"sources":["sound/SoundInstance.ts"],"names":[],"mappings":"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","file":"sound/SoundInstance.js","sourcesContent":["import {EventEmitter} from 'events';\nimport ChainBuilder from './ChainBuilder';\n\nlet id = 0;\n\n/**\n * A single play instance that handles the AudioBufferSourceNode.\n * @class SoundInstance\n * @memberof module:jibo/sound\n * @constructor\n * @param {ChainBuilder} source\n */\nclass SoundInstance extends EventEmitter\n{\n    /**\n     * Recycle instance, because they will be created many times.\n     * @type {Array}\n     * @name module:jibo/sound.SoundInstance._pool\n     * @static\n     * @private\n     */\n    static _pool:Array<SoundInstance> = [];\n\n    public id:number;\n    private _chain:ChainBuilder;\n    private _startTime:number;\n    private _paused:boolean;\n    private _currentPosition:number;\n    private _source:any;\n\n    /**\n     * Recycle instance, because they will be created many times.\n     * @method module:jibo/sound.SoundInstance.create\n     * @static\n     * @private\n     */\n    static create(chain:ChainBuilder):SoundInstance\n    {\n        if (SoundInstance._pool.length > 0)\n        {\n            let sound = SoundInstance._pool.pop();\n            sound.init(chain);\n            return sound;\n        }\n        else\n        {\n            return new SoundInstance(chain);\n        }\n    }\n\n    constructor(chain:ChainBuilder)\n    {\n        super();\n\n        this.id = id++;\n\n        /**\n         * The source node chain.\n         * @type {ChainBuilder}\n         * @name module:jibo/sound.SoundInstance#_chain\n         * @private\n         */\n        this._chain = null;\n\n        /**\n         * The starting time.\n         * @type {int}\n         * @name module:jibo/sound.SoundInstance#_startTime\n         * @private\n         */\n        this._startTime = 0;\n\n        /**\n         * true if paused.\n         * @type {Boolean}\n         * @name module:jibo/sound.SoundInstance#_paused\n         * @private\n         */\n        this._paused = false;\n\n        /**\n         * The time in milliseconds to wait.\n         * @type {int}\n         * @name module:jibo/sound.SoundInstance#_currentPosition\n         * @private\n         */\n        this._currentPosition = 0;\n\n        // Initialize\n        this.init(chain);\n    }\n\n    /**\n     * Initializes the instance.\n     * @method module:jibo/sound.SoundInstance#init\n     * @private\n     */\n    init(chain:ChainBuilder): void\n    {\n        this._chain = chain;\n    }\n\n    /**\n     * Stops the instance.\n     * @method module:jibo/sound.SoundInstance#stop\n     */\n    stop()\n    {\n        if (this._source)\n        {\n            this._source.onended = null;\n            this._source.stop();\n            this._source = null;\n        }\n    }\n\n    /**\n     * Plays the sound.\n     * @method module:jibo/sound.SoundInstance#play\n     * @param {Number} [offset=0] Number of seconds to offset playing.\n     */\n    play(offset?:number)\n    {\n        // console.log(\"SoundInstance.play\", this.toString());\n        this._source = this._chain.cloneBufferSource();\n        this._startTime = Date.now();\n        this._source.onended = this._onComplete.bind(this);\n        this._source.start(0, offset || 0);\n    }\n\n    /**\n     * Pauses the sound.\n     * @type {Boolean}\n     * @name module:jibo/sound.SoundInstance#paused\n     */\n    get paused():boolean\n    {\n        return this._paused;\n    }\n\n    set paused(paused:boolean)\n    {\n        if (paused !== this._paused)\n        {\n            this._paused = paused;\n\n            if (paused)\n            {\n                // pause the sounds\n                this.stop();\n                this._currentPosition = Date.now() - this._startTime;\n            }\n            else\n            {\n                // resume the playing with offset\n                this.play(this._currentPosition/1000);\n            }\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @method module:jibo/sound.SoundInstance#_onComplete\n     * @private\n     */\n    _onComplete():void\n    {\n        // console.log(\"SoundInstance._onComplete\", this.toString());\n        if (this._source)\n        {\n            this._source.onended = null;\n        }\n        this._source = null;\n        this.emit('complete', this);\n    }\n\n    /**\n     * Don't use after this.\n     * @method module:jibo/sound.SoundInstance#destroy\n     */\n    destroy()\n    {\n        this.removeAllListeners('complete');\n        this.stop();\n        if (this._source)\n        {\n            this._source.onended = null;\n        }\n        this._source = null;\n        this._chain = null;\n        this._startTime = 0;\n        this._paused = false;\n        this._currentPosition = 0;\n\n        // Add it if it isn't already added\n        if (SoundInstance._pool.indexOf(this) < 0)\n        {\n            SoundInstance._pool.push(this);\n        }\n    }\n\n    /**\n     * To string method for instance.\n     * @method SoundInstance#toString\n     * @return {String} The string representation of instance.\n     * @private\n     */\n    toString():string\n    {\n        return '[SoundInstance id=' + this.id + ']';\n    }\n}\n\nexport default SoundInstance;\n"],"sourceRoot":"/source/"}