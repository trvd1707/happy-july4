{"version":3,"sources":["sound/SoundUtils.ts"],"names":[],"mappings":";AAAA,sBAAkB,SAAS,CAAC,CAAA;AAC5B,4BAAwB,eAAe,CAAC,CAAA;AACxC,6BAAyB,wBAAwB,CAAC,CAAA;AAClD,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAE9B;;;;GAIG;AACH;IAAA;IAgFA,CAAC;IA9EG;;;;;;;OAOG;IACI,mBAAQ,GAAf,UAAgB,KAAY,EAAE,OAAc;QAExC,IAAM,YAAY,GAAG,qBAAW,CAAC,QAAQ,CAAC,OAAO,CAAC;QAClD,IAAM,KAAK,GAAG,IAAI,eAAK,CAAC,YAAY,EAAE;YAClC,KAAK,EAAE,IAAI;SACd,CAAC,CAAC;QAEH,mBAAmB;QACnB,KAAK,GAAG,KAAK,IAAI,GAAG,CAAC;QACrB,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC;QAEvB,oBAAoB;QACpB,IAAM,SAAS,GAAG,CAAC,CAAC;QACpB,IAAM,UAAU,GAAG,KAAK,CAAC;QACzB,IAAM,SAAS,GAAG,CAAC,CAAC;QAEpB,oBAAoB;QACpB,IAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,GAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAC5F,IAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAExC,kBAAkB;QAClB,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC,CAAC;YACnC,IAAI,IAAI,GAAI,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC;YAClC,IAAI,KAAK,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC;YACnC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAC,SAAS,CAAC;QAC1C,CAAC;QAED,iBAAiB;QACjB,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACtB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QACtB,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED;;;;;;;OAOG;IACI,mBAAQ,GAAf,UAAgB,GAAU,EAAE,QAA8B;QAEtD,IAAM,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAExB,sBAAsB;QACtB,sBAAY,CAAC,QAAQ,CAAC,IAAI,CAAC;YACvB,IAAI,EAAE,OAAO;YACb,EAAE,EAAE,KAAK;YACT,GAAG,EAAE,GAAG;YACR,QAAQ,EAAE,UAAC,GAAS,EAAE,KAAW;gBAC7B,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;oBACG,EAAE,CAAC,CAAC,QAAQ,CAAC,CACb,CAAC;wBACG,QAAQ,CAAC,GAAG,CAAC,CAAC;oBAClB,CAAC;oBACD,MAAM,CAAC;gBACX,CAAC;gBACD,KAAK,CAAC,IAAI,CAAC,UAAC,KAAW;oBACnB,qBAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACnC,EAAE,CAAC,CAAC,QAAQ,CAAC,CACb,CAAC;wBACG,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACnB,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;SACJ,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,iBAAC;AAAD,CAhFA,AAgFC,IAAA;AAED;kBAAe,UAAU,CAAC","file":"sound/SoundUtils.js","sourcesContent":["import Sound from './Sound';\nimport SoundPlugin from './SoundPlugin';\nimport LoaderPlugin from '../loader/LoaderPlugin';\nimport uuid = require('uuid');\n\n/**\n * Utilities that work with sounds.\n * @class SoundsUtils\n * @memberof module:jibo/sound\n */\nclass SoundUtils\n{\n    /**\n     * Creates a new sound for a sine wave-based tone.\n     * @method module:jibo/sound.SoundsUtils.sineTone\n     * @param {SoundContext} soundContext\n     * @param {Number} hertz\n     * @param {Number} seconds duration\n     * @return {Sound} New sound\n     */\n    static sineTone(hertz:number, seconds:number):Sound\n    {\n        const soundContext = SoundPlugin.instance.context;\n        const sound = new Sound(soundContext, {\n            block: true\n        });\n\n        // handle parameter\n        hertz = hertz || 200;\n        seconds = seconds || 1;\n\n        // set default value\n        const nChannels = 1;\n        const sampleRate = 48000;\n        const amplitude = 2;\n\n        // create the buffer\n        const buffer = soundContext.context.createBuffer(nChannels, seconds*sampleRate, sampleRate);\n        const fArray = buffer.getChannelData(0);\n\n        // fill the buffer\n        for(let i = 0; i < fArray.length; i++){\n            let time  = i / buffer.sampleRate;\n            let angle = hertz * time * Math.PI;\n            fArray[i] = Math.sin(angle)*amplitude;\n        }\n\n        // set the buffer\n        sound.buffer = buffer;\n        sound.isLoaded = true;\n        return sound;\n    }\n\n    /**\n     * Creates a new \"Audio\" stream based on given audio path and project uri; returns the audio object.\n     * @method module:jibo/sound.SoundsUtils.playOnce\n     * @static\n     * @param {String} fileName Full path of the file to play.\n     * @param {Function} callback Callback when complete.\n     * @return {string} New audio element alias.\n     */\n    static playOnce(src:string, callback?:(err?:Error) => void):string\n    {\n        const alias = uuid.v4();\n\n        // Load the file first\n        LoaderPlugin.instance.load({\n            type: 'sound',\n            id: alias,\n            src: src,\n            complete: (err:Error, sound:Sound) => {\n                if (err)\n                {\n                    if (callback)\n                    {\n                        callback(err);\n                    }\n                    return;\n                }\n                sound.play((sound:Sound) => {\n                    SoundPlugin.instance.remove(alias);\n                    if (callback)\n                    {\n                        callback(null);\n                    }\n                });\n            }\n        });\n        return alias;\n    }\n}\n\nexport default SoundUtils;\n"],"sourceRoot":"/source/"}