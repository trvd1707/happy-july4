{"version":3,"sources":["sound/tasks/SoundTask.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiB,yBAAyB,CAAC,CAAA;AAE3C,4BAAwB,gBAAgB,CAAC,CAAA;AAEzC,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAE9B;;;;;;;;;;;GAWG;AACH;IAAwB,6BAAI;IAsBxB,mBAAY,OAAoB,EAAE,KAAS;QAEvC,kBAAM,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjC;;;;WAIG;QACH,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QAErB;;;;WAIG;QACH,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;QAE3B;;;;WAIG;QACH,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;QAEhC;;;;WAIG;QACH,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,IAAI,CAAC,CAAC;QAElC;;;;WAIG;QACH,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;QAEzB;;;;WAIG;QACH,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;IACrC,CAAC;IAzDD;;;;;;OAMG;IACI,cAAI,GAAX,UAAY,KAAS;QAEjB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,IAAI,2BAA2B,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChG,CAAC;IAiDD;;;;OAIG;IACH,yBAAK,GAAL,UAAM,QAAiB;QAAvB,iBAqCC;QAnCG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,MAAM;YAElC,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;gBACG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;YAED,IAAI,KAAK,GAAU,KAAI,CAAC,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAE9E,IAAI,KAAK,GAAG,qBAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE;gBACxC,GAAG,EAAE,MAAM;gBACX,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE,KAAI,CAAC,KAAK;gBACjB,IAAI,EAAE,KAAI,CAAC,IAAI;gBACf,MAAM,EAAE,KAAI,CAAC,MAAM;gBACnB,OAAO,EAAE,KAAI,CAAC,OAAO;gBACrB,QAAQ,EAAE,KAAI,CAAC,QAAQ;gBACvB,MAAM,EAAE,QAAQ;aACnB,CAAC,CAAC;YAEH,+CAA+C;YAC/C,0BAA0B;YACpB,KAAM,CAAC,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC;YAC3C,KAAK,CAAC,OAAO,GAAG;gBACZ,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CACrB,CAAC;oBACE,MAAM,CAAC;gBACV,CAAC;gBACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,qBAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAEnC,kCAAkC;gBAC5B,IAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IACL,gBAAC;AAAD,CAhHA,AAgHC,CAhHuB,cAAI,GAgH3B;AAED;kBAAe,SAAS,CAAC","file":"sound/tasks/SoundTask.js","sourcesContent":["import Task from '../../loader/tasks/Task';\nimport AssetManager from '../../loader/AssetManager';\nimport SoundPlugin from '../SoundPlugin';\nimport {Callback} from '../../loader/Loader';\nimport path = require('path');\n\n/**\n * Internal class for dealing with async load assets through Loader.\n * @class SoundTask\n * @extends module:jibo/loader.Task\n * @memberof module:jibo/loader\n * @constructor\n * @private\n * @param {Object} asset The data properties.\n * @param {String} asset.src The source.\n * @param {Boolean} [asset.cache=false] true to cache the result.\n * @param {String} [asset.id] ID of asset.\n */\nclass SoundTask extends Task\n{\n    static priority:number;\n    public src:string;\n    public block:boolean;\n    public volume:number;\n    public panning:number;\n    public loop:boolean;\n    public autoPlay:boolean;\n\n    /**\n     * Tests if tasks should be run.\n     * @method module:jibo/loader.SoundTask.test\n     * @static\n     * @param {Object} asset The asset to check.\n     * @return {Boolean} true if the asset is compatible with this asset.\n     */\n    static test(asset:any):boolean\n    {\n        return !!asset.src && asset.type === \"sound\" && /\\.(mp3|wav|ogg|oga|aif)$/i.test(asset.src);\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset, asset.src);\n\n        /**\n         * The source URL to load.\n         * @type {String}\n         * @name module:jibo/loader.SoundTask#src\n         */\n        this.src = asset.src;\n\n        /**\n         * true to block the audio from being played more than once at a time.\n         * @type {Boolean}\n         * @name module:jibo/loader.SoundTask#block\n         */\n        this.block = !!asset.block;\n\n        /**\n         * The initial volume of the sound (0 to 1).\n         * @type {Number}\n         * @name module:jibo/loader.SoundTask#volume\n         */\n        this.volume = asset.volume || 1;\n\n        /**\n         * The panning from -1 (left) to 1 (right). Default is 0 (center).\n         * @type {Number}\n         * @name module:jibo/loader.SoundTask#panning\n         */\n        this.panning = asset.panning || 0;\n\n        /**\n         * true if the sound should play.\n         * @type {Boolean}\n         * @name module:jibo/loader.SoundTask#loop\n         */\n        this.loop = !!asset.loop;\n\n        /**\n         * true to start playing the sound immediately after loading.\n         * @type {Boolean}\n         * @name module:jibo/loader.SoundTask#autoPlay\n         */\n        this.autoPlay = !!asset.autoPlay;\n    }\n\n    /**\n     * Starts the task.\n     * @method  module:jibo/loader.SoundTask#start\n     * @param  {module:jibo/loader.Task~completeCallback} callback Callback when finished.\n     */\n    start(callback:Callback): void\n    {\n        this.simpleLoad(this.src, (err, result) =>\n        {\n            if (err)\n            {\n                return callback(err);\n            }\n\n            let alias:string = this.id || path.basename(this.src, path.extname(this.src));\n\n            let sound = SoundPlugin.instance.add(alias, {\n                src: result,\n                preload: true,\n                block: this.block,\n                loop: this.loop,\n                volume: this.volume,\n                panning: this.panning,\n                autoPlay: this.autoPlay,\n                loaded: callback\n            });\n\n            // When the sound is destroyed, remove from the\n            // the soundmanager plugin\n            (<any>sound).__baseDestroy = sound.destroy;\n            sound.destroy = function() {\n                if (this.__destroyed)\n                {\n                   return;\n                }\n                this.__destroyed = true;\n                SoundPlugin.instance.remove(alias);\n\n                //destroy the base texture as well\n                (<any>this).__baseDestroy(true);\n            };\n        });\n    }\n}\n\nexport default SoundTask;\n"],"sourceRoot":"/source/"}