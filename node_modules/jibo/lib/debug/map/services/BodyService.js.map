{"version":3,"sources":["services/BodyService.js"],"names":[],"mappings":"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","file":"services/BodyService.js","sourcesContent":["import * as async from 'async';\n\n\n/**\n * @description\n * Non-motion-related robot body services (i.e. temperature, fan, battery, backlight, etc.).\n *\n * ```\n * var jibo = require(\"jibo\");\n * jibo.body.getBatteryTemperature();\n * ```\n * @module jibo/body\n */\nclass BodyService {\n    constructor() {\n        this.bs = {};\n\n        this.bs.miscState = {\n            ts : [],    // Chronometer timestamp\n            main_board_temp : 0,   // Main board temperature sensor in degrees Celsius\n            cpu_temp : 0,   // CPU die temperature in degrees Celsius\n            intake_temp : 0, // Cooling air intake temperature in degrees Celsius\n            exhaust_temp : 0, // Cooling air exhaust temperature in degrees Celsius\n            neck_motor_temp : 0,   // Head motor temperature in degrees Celsius\n            torso_motor_temp : 0,  // Torso motor temperature in degrees Celsius\n            pelvis_motor_temp : 0  // Pelvis motor temperature in degrees Celsius\n        };\n        this.bs.touchState = {\n            \"ts\" : [],  // Chronometer timestamp\n            \"touched\" : false,  // True if any sensors touched.\n            \"pad_state\" : [0, 0, 0, 0, 0, 0],   // Array with pad state (int) for each touch pad sensor, 0...N.\n            \"changed\": [0, 0, 0, 0, 0, 0]       // Array with the indices of the pads that changed in this update, empty if none.\n        };\n        this.bs.powerState = {\n            ts: [], // Chronometer timestamp\n            source: \"\",                 // Are we on 'BATTERY' or 'EXTERNAL'\n            vsys  : 0,                  // The current system voltage estimate\n            battery :                       // Battery object, or undefined if no battery is present or detected.\n                {\n                    id : 0,           // Battery ID\n                    cycles : 0,       // Number of battery cycles on this battery\n                    capacity : 0,   // Current capacity of this battery in amphours\n                    max_capacity : 0, // Maximum capacity of this battery in amp hours\n                    charge_rate: 0,   // Charge rate of battery negative means draining, positive means charging.\n                    temp : 0    // Battery temperature in Celsius\n                }\n        };\n    }\n\n    init(service, cb) {\n        this.httpInterface = \"http://\" + service.host + \":\" + service.port;\n        this.socketUrl =  \"ws:\" + service.host + \":\" + service.port;\n\n        async.parallel(\n            [\n                this.createMiscSocket.bind(this),\n                this.createTouchSocket.bind(this),\n                this.createPowerSocket.bind(this)\n            ],\n            cb\n        );\n    }\n\n    /**\n     * Gets the robot's battery temperature.\n     * @method  module:jibo/body~getBatteryTemperature\n     * @return The temperature of the battery in degrees Celsius.\n     */\n    getBatteryTemperature() {\n        return this.bs.powerState.battery.temp;\n    }\n\n    /** Gets the robot's battery level.\n     * @method module:jibo/body~getBatteryLevel\n     * @return The current level of the battery as a percentage.\n     */\n    getBatteryLevel() {\n        return (this.bs.powerState.battery.capacity/this.bs.powerState.battery.max_capacity) * 100;\n    }\n\n    /**\n     * Gets the robot's system voltage.\n     * @method module:jibo/body~getSystemVoltage\n     * @return The current system voltage estimate.\n     */\n    getSystemVoltage() {\n        return this.bs.powerState.vsys;\n    }\n\n    /**\n     * Tells you whether or not the robot's battery is charging.\n     * @method module:jibo/body~isBatteryCharging\n     * @return `true` if the battery is currently charging; `false` otherwise.\n     */\n    isBatteryCharging() {\n        return (this.bs.powerState.source === 'EXTERNAL');\n    }\n\n    /**\n     * Gets the robot's main board temperature.\n     * @method module:jibo/body~getMainBoardTemperature\n     * @return The temperature of the main board in degrees Celsius.\n     */\n    getMainBoardTemperature() {\n        return this.bs.miscState.main_board_temp;\n    }\n\n    /**\n     * Gets the robot's CPU temperature.\n     * @method module:jibo/body~getCPUTemperature\n     * @return The temperature of the CPU in degrees Celsius.\n     */\n    getCPUTemperature() {\n        return this.bs.miscState.cpu_temp;\n    }\n\n    /**\n     * Gets the touch state of pads in Jibo's head.\n     * @method module:jibo/body~getTouchState\n     * @returns touchState {Object} The state of jibo's head pads.\n     * @returns touchState.changed {Array} The pads which have changed since last stream\n     * @returns touchState.pad_state {Array} The array of the 6 pads\n     *                      with `true` for on and `false` for off. Layout of\n     *                      pads, from left to right, top to bottom, is:\n     *                      [(0, 3), (1, 4), (2, 5)]. That is,\n     *                      0   3\n     *                      1   4\n     *                      2   5\n     * @returns touchState.touched {boolean} `true` if any touch pads are touched.\n     */\n    getTouchState() {\n        return this.bs.touchState;\n    }\n\n    /**\n     * Gets the robot's fan speed.\n     * @method module:jibo/body~getFanSpeed\n     * @param {Callback} cb Callback that notifies the caller that the\n     *                      system data was received or if an error was encountered.\n     *                      If successful, returns cooling fan speed as percentage of\n     *                      maximum (range [0.0, 1.0]).\n     *\n     */\n    getFanSpeed(cb) {\n        this._getSystemSetting(\"fan_speed\", cb);\n    }\n\n    /**\n     * Gets LCD backlight information.\n     * @method module:jibo/body~getBacklight\n     * @param {Callback} cb Callback that notifies the caller that the\n     *                      system data was received or if an error was encountered.\n     *                      If successful, returns the LCD backlight brightness\n     *                      in percentage of maximum (range [0.0, 1.0]).\n     */\n    getBacklight(cb) {\n        this._getSystemSetting(\"lcd_backlight\", cb);\n    }\n\n    _getSystemSetting(setting, cb) {\n        if (this.httpInterface === undefined) {\n            cb('Body Service is not available', null);\n            return;\n        }\n\n        let request = new XMLHttpRequest();\n\n        request.open(\"GET\", this.httpInterface + '/settings', true);\n\n        request.onreadystatechange = () => {\n            if(request.readyState == 4) {\n                if (request.status == 200) {\n                    if (request.response) {\n                        // success!\n                        let response = JSON.parse(request.response);\n                        cb(null, response[setting]);\n                    }\n                    else {\n                        cb('No data received from body service', null);\n                    }\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'Body service is unavailable';\n                    if (request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    cb(msg, null);\n                }\n            }\n        };\n\n        request.send();\n    }\n\n    /**\n     * Sets the LCD backlight brightness.\n     * @method module:jibo/body~setBacklight\n     * @param {Value} value Desired brightness of LCD backlight (range [0.0 - 1.0]).\n     * @param {Callback} cb Callback that notifies the caller that\n     *                      system data was received or if an error was encountered.\n     *                      If unsuccessful, returns the error; otherwise, returns `null`.\n     */\n    setBacklight(value, cb) {\n        // ensure that value is between 0.0 and 1.0\n        if ((value < 0.0) || (value > 1.0)) {\n            let error = 'Backlight brightness value of ' + value + ' is out of range [0.0 - 1.0].';\n            cb(error);\n            return;\n        }\n        // get fan speed so we can set current value in body (so we don't muck with it!)\n        this.getFanSpeed((error, fan) => {\n            if (error) {\n                cb(error);\n            }\n            else {\n                let body =\n                {\n                    \"lcd_backlight\" : value,\n                    \"fan_speed\" : fan\n                };\n\n                let request = new XMLHttpRequest();\n                let uri = this.httpInterface + '/settings';\n\n                request.open(\"POST\", uri, true);\n\n                request.onreadystatechange = () => {\n                    if(request.readyState == 4) {\n                        if (request.status == 204) { // no content means success!\n                            cb(null);\n                        }\n                        else {\n                            // failure if anything else\n                            let msg = 'Body service is unavailable';\n                            if (request.statusText !== undefined && request.statusText !== \"\") {\n                                msg = request.statusText;\n                            }\n\n                            cb(msg, null);\n                        }\n                    }\n                };\n\n                request.send(JSON.stringify(body));\n            }\n        });\n    }\n\n   createMiscSocket(cb) {\n        this.MiscSocket = new WebSocket(this.socketUrl + \"/misc\");\n        this.MiscSocket.onerror = () => {\n            console.error(`Error opening misc state socket at ${this.socketUrl}/misc`);\n        };\n        this.MiscSocket.onmessage = (event) => {\n            this.bs.miscState = JSON.parse(event.data);\n        };\n        cb();\n    }\n\n    createTouchSocket(cb) {\n        this.TouchSocket = new WebSocket(this.socketUrl + \"/touch\");\n        this.TouchSocket.onerror = () => {\n            console.error(`Error opening touch state socket at ${this.socketUrl}/touch`);\n        };\n        this.TouchSocket.onmessage = (event) => {\n            this.bs.touchState = JSON.parse(event.data);\n        };\n        cb();\n    }\n\n    createPowerSocket(cb) {\n        this.PowerSocket = new WebSocket(this.socketUrl + \"/power\");\n        this.PowerSocket.onerror = () => {\n            console.error(`Error opening power state socket at ${this.socketUrl}/power`);\n        };\n        this.PowerSocket.onmessage = (event) => {\n            this.bs.powerState = JSON.parse(event.data);\n        };\n        cb();\n    }\n}\n\nexport default BodyService;\n"],"sourceRoot":"/source/"}