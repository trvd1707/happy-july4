{"version":3,"sources":["services/LPSService.js"],"names":[],"mappings":"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","file":"services/LPSService.js","sourcesContent":["import * as async from 'async';\n\n/**\n * Enum of photo types.\n * @alias module:jibo/lps~PhotoType\n * @enum {String}\n */\nlet PhotoType = {\n    /** Debug: 1/2-scale grayscale. */\n    DEBUG: 0,\n    /** Preview: 1/2-scale color.*/\n    PREVIEW: 1,\n    /**  Full: full-scale color. */\n    FULL: 2\n};\n\n/**\n * Enum of cameras.\n * @alias module:jibo/lps~CameraID\n * @enum {String}\n */\nlet CameraID = {\n    /** Left camera. */\n    LEFT: 0,\n    /** Right camera (coming soon). */\n    RIGHT: 1\n};\n\n/**\n * Enum of photo resolutions.\n * @alias module:jibo/lps~PhotoRes\n * @enum {String}\n */\nlet PhotoRes = {\n    /** Small: 672x380 (coming soon).**/\n    SMALL: 1,\n    /** Medium: 1280x720. **/\n    MEDIUM: 2,\n    /** Large: 1920x1080 (coming soon). **/\n    LARGE: 3,\n    /** X-Large: 2688x1520 (coming soon). **/\n    XLARGE: 4\n};\n\nlet _resData = [\n    {\n        \"width\" : 672,\n        \"height\": 380\n    },\n    {\n        \"width\" : 1280,\n        \"height\": 720\n    },\n    {\n        \"width\" : 1920,\n        \"height\": 1080\n    },\n    {\n        \"width\" : 2688,\n        \"height\": 1520\n    }\n];\n\n/**\n * @description\n * Local Perceptual Space\n *\n * ```\n * var jibo = require(\"jibo\");\n * jibo.lps.takePhoto();\n * ```\n * @module jibo/lps\n */\nclass LPSService {\n    constructor() {\n        this.lps = {};\n\n        // visual awareness data\n        this.lps.motionData = {\n            cameras: [],    // List of camera objects\n            entities: []    // List of entity objects\n        };\n\n        // audible awareness data\n        this.lps.audioData = {\n            entities: []    // List of entity objects\n        };\n\n\n        this.PhotoType = PhotoType;\n        this.PhotoRes = PhotoRes;\n        this.CameraID = CameraID;\n    }\n\n    /**\n     * Returns the full state of the Jibo's local perceptual space.\n     * @name module:jibo/lps~motionData\n     * @type {*|{cameras: Array, entities: Array}}\n     * @readOnly\n     */\n    get motionData() {\n        return this.lps.motionData;\n    }\n\n    /**\n     * Gets the visual entity closest to Jibo.\n     * @method module:jibo/lps~getClosestVisualEntity\n     *\n     * @return The closest visual entity to Jibo. If one does not exist, returns undefined.\n     */\n    getClosestVisualEntity() {\n        let entity;\n\n        if (this.lps.motionData !== undefined &&\n            this.lps.motionData.entities !== undefined &&\n            this.lps.motionData.entities.length > 0) {\n            entity = this.lps.motionData.entities[0]; // @TODO - get real \"closest\" entity when multi-track is in\n        }\n\n        return entity;\n    }\n\n    /**\n     * Gets a visual entity by specified ID.\n     * @method module:jibo/lps~getVisualEntityById\n     *\n     * @return The specified visual entity. If it does not exist, returns undefined.\n     */\n    getVisualEntityById(id) {\n        let entity;\n\n        for (let i=0; i< this.lps.motionData.entities.length; i++)\n        {\n            let itr = this.lps.motionData.entities[i];\n            if (itr && (itr.id === id)) {\n                entity = itr;\n                break;\n            }\n        }\n\n        return entity;\n    }\n\n    /**\n     * Gets the closest audible entity to Jibo.\n     * @method module:jibo/lps~getClosestAudibleEntity\n     *\n     * @return The closest audible entity to Jibo. If one does not exist, returns undefined.\n     */\n    getClosestAudibleEntity() {\n        let entity;\n\n        if (this.lps.audioData !== undefined &&\n            this.lps.audioData.entities !== undefined &&\n            this.lps.audioData.entities.length > 0) {\n            entity = this.lps.audioData.entities[0]; // @TODO - get real \"closest\" entity when multi-track is in\n        }\n\n        return entity;\n    }\n\n    /**\n     * Gets an audible entity by specified ID.\n     * @method module:jibo/lps~getAudibleEntityById\n     *\n     * @return The specified audible entity. If it does not exist, returns undefined.\n     */\n    getAudibleEntityById(id) {\n        let entity;\n\n        for (let i=0; i< this.lps.audioData.entities.length; i++)\n        {\n            let itr = this.lps.audioData.entities[i];\n            if (itr && (itr.id === id)) {\n                entity = itr;\n                break;\n            }\n        }\n\n        return entity;\n    }\n\n\n    /**\n     * Gets the current state of the viewfinder preview.\n     *\n     * @return If request successful, returns timestamp, enabled, and window. If unsuccessful, returns error msg.\n     */\n    getPreview(cb){\n        if (this.httpUrl === undefined) {\n            cb('Preview service is not initialized', null);\n            return;\n        }\n\n        let request = new XMLHttpRequest();\n\n        request.open(\"GET\", this.httpUrl + '/media/preview/control', true);\n\n        request.onreadystatechange = () => {\n            if (request.readyState == 4) {\n                if (request.status == 204) {\n                    //if (request.response) {\n                    //    // success!\n                    //    let response = JSON.parse(request.response);\n                    //    cb(null, response);\n                    //}\n                    //else {\n                    //    cb('No data received from barcode service', null);\n                    //}\n                    cb(); // @NOTE: uncomment above when a response is returned\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'Preview service unavailable';\n                    if(request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    cb(msg, null);\n                }\n            }\n        };\n\n        request.send();\n\n    }\n\n    /**\n     * Sets up a new Preview Request, that a window with camera preview be positioned at a given location on-screen.\n     * @method module:jibo/lps~setPreview\n     */\n    setPreview(data, cb){\n        if (this.httpUrl === undefined) {\n            cb('Preview service is not initialized', null);\n            return;\n        }\n\n        let params = {};\n\n        // enable is a required parameter - if not present, return immediately\n        if (!data.hasOwnProperty('enable')){\n            cb(\"Preview service data must have 'enable' property\", null);\n            return;\n        }\n\n        // these are NOT required parameters - if not present, use defaults\n        if (!data.hasOwnProperty('width')){ data.width = 1280;}\n        if (!data.hasOwnProperty('height')){ data.height = 720;}\n        if (!data.hasOwnProperty('x')){ data.x = 0;}\n        if (!data.hasOwnProperty('y')){ data.y = 0;}\n\n        params.enable = data.enable;\n        params.window = {\n            width: data.width,\n            height: data.height,\n            x: data.x,\n            y: data.y\n        }\n\n        let request = new XMLHttpRequest();\n        request.open(\"POST\", this.httpUrl + '/media/preview/control', true);\n        request.onreadystatechange = () => {\n            if (request.readyState == 4) {\n                if (request.status == 204) {\n                    //if (request.response) {\n                    //    // success!\n                    //    let response = JSON.parse(request.response);\n                    //    cb(null, response);\n                    //}\n                    //else {\n                    //    cb('No data received from preview service', null);\n                    //}\n                    cb(); // @NOTE: uncomment above when a response is returned\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'Preview service unavailable';\n                    if(request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    cb(msg, null);\n                }\n            }\n        };\n        request.send(JSON.stringify(params));\n    }\n\n    readBarcode(cb) {\n        if (this.httpUrl === undefined) {\n            cb('Barcode service is not initialized', null);\n            return;\n        }\n\n        let request = new XMLHttpRequest();\n\n        request.open(\"GET\", this.httpUrl + '/lps/barcode', true);\n\n        request.onreadystatechange = () => {\n            if (request.readyState == 4) {\n                if (request.status == 200) {\n                    if (request.response) {\n                        // success!\n                        let response = JSON.parse(request.response);\n                        cb(null, response.barcodes);\n                    }\n                    else {\n                        cb('No data received from barcode service', null);\n                    }\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'Barcode service unavailable';\n                    if(request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    cb(msg, null);\n                }\n            }\n        };\n\n        request.send();\n    }\n\n    /**\n     * Callback for when Jibo takes a photo.\n     * ```\n     * jibo.lps.takePhoto((error, url) => {\n     *     if(!error) {\n     *         let img = new Image();\n     *         img.src = url;\n     *     }\n     *     else {\n     *         console.error(error);\n     *     }\n     * });\n     * ```\n     * @callback module:jibo/lps~OnPhoto\n     * @param {String|null} error `null` if no error, otherwise a an error message.\n     * @param {String} url The image URL.\n     */\n\n    /**\n     * Takes a photo.\n     * @method module:jibo/lps~takePhoto\n     * @param {module:jibo/lps~PhotoRes} photoRes Enumerated value of the resolution of photo requested (672x380, 1280x720, etc.).\n     * @param {boolean} noDistort If `false`, image appears with fish-eye distortion. If `true` (default), removes camera distortion.\n     * @param {module:jibo/lps~CameraID} cameraID Enumerated value of the camera to use (1 = left, 2 = right).\n     * @param {module:jibo/lps~PhotoType} photoType Enumerated value of the type of photo requested (debug, preview, full, etc.).\n     *\n     *\n     * @param {module:jibo/lps~OnPhoto} cb Callback that will be used to notify the caller that the\n     *                      photo was taken and received or if an error was encountered.\n     */\n     takePhoto(photoRes, noDistort, cameraID, photoType, cb) {\n        if (this.httpUrl === undefined) {\n            cb('Photo service is not initialized', null);\n            return;\n        }\n\n        // @TODO - uncomment when we support other resolutions\n        //if (photoRes < this.PhotoRes.SMALL || photoRes > this.PhotoRes.XLARGE) {\n        if (photoRes !== this.PhotoRes.MEDIUM) {\n            photoRes = this.PhotoRes.MEDIUM; // default\n        }\n\n        let width = _resData[photoRes - 1].width;\n        let height = _resData[photoRes -1].height;\n\n        // @TODO - uncomment when we support right camera\n        //if (cameraID < this.CameraID.LEFT || cameraID > this.CameraID.RIGHT) {\n        if (cameraID !== this.CameraID.LEFT) {\n            cameraID = this.CameraID.LEFT; // default\n        }\n\n        if (photoType < this.PhotoType.DEBUG || photoType > this.PhotoType.FULL) {\n            photoType = this.PhotoType.FULL; // default\n        }\n\n        let data = {\n                \"camera\": cameraID,         // One of 0, 1; signifying camera id, typically 0 is left and 1 is right\n                \"width\": width,             // Resolution width of the photo  (672, 1280, 1920, 2688)\n                \"height\": height,           // Resolution height of the photo (380,  720, 1080, 1520)\n                \"type\": photoType,          // One of (0, 1, 2) meaning (DEBUG, half scale Y), (PREVIEW, half scale RGB), (SNAP, full scale RGB), respectively\n                \"undistort\": noDistort      // Remove camera distortion from the photo\n        };\n\n        let url = this.httpUrl + '/media/photo';\n\n        //if (0) {\n        //    // !!!! COPIED FROM LPSSERVICE PAGE !!!!\n        //    //console.log(\"Sending POST request (JQUERY)\");\n        //    let jqxhr = $.post(url, JSON.stringify(data), function (obj) {\n        //        let mySrc = url+\"?id=\"+obj.id;\n        //        cb(null, mySrc);\n        //       // console.log(\"Got response (JQUERY)\");\n        //    });\n        //\n        //    jqxhr.done(function (msg) {\n        //    });\n        //\n        //    jqxhr.fail(function (msg) {\n        //        console.log(\"Failed to get image\");\n        //    });\n        //\n        //    jqxhr.always(function (msg) {\n        //    }, \"json\");\n        //}\n        //else\n        {\n            let request = new XMLHttpRequest();\n\n            request.open(\"POST\", url, true); // true == async\n\n            // force it to be form data type and accepts all media\n            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n            request.setRequestHeader('Accept', '*/*');\n\n            request.onreadystatechange = () => {\n               // console.log(\"request.readyState|status = \" + request.readyState + \" | \" + request.status);\n\n                // request is complete\n                if(request.readyState == 4) {\n                    // \"OK\" status\n                    if(request.status === 200) {\n                        if (request.response) {\n                            // success!\n                            let response = JSON.parse(request.response);\n                            this._getPhoto(response.id, cb);\n                           // console.log(\"Got response (XMLHTTP)\")\n                        }\n                        else {\n                            cb('No data received from photo service', null);\n                        }\n                    }\n                    else {\n                        // failure if anything else\n                        let msg = 'Photo service unavailable';\n                        if(request.statusText !== undefined && request.statusText !== \"\") {\n                            msg = request.statusText;\n                        }\n\n                        cb(msg, null);\n                    }\n                }\n            };\n\n            //console.log(\"Sending POST request (XMLHTTP)\");\n            request.send(JSON.stringify(data));\n        }\n    }\n\n\n    _getPhoto(id, cb) {\n\n        let src = this.httpUrl + '/media/photo?id=' + id;\n\n        cb(null, src);\n    }\n\n\n    init(service, cb) {\n        this.lpsServiceUrl = \"ws:\" + service.host + \":\" + service.port;\n        this.httpUrl = \"http://\" + service.host + \":\" + service.port;\n        async.parallel(\n            [\n                this._createMotionSocket.bind(this),\n                this._createAudioSocket.bind(this)\n            ],\n            cb\n        );\n    }\n\n    _createMotionSocket(cb) {\n        this.motionSocket = new WebSocket(this.lpsServiceUrl + \"/lps/visual_awareness\");\n        this.motionSocket.onerror = () => {\n            console.error(`Error opening visual awareness socket at ${this.lpsServiceUrl}/visual_awareness`);\n        };\n        this.motionSocket.onmessage = (event) => {\n            this.lps.motionData = JSON.parse(event.data);\n        };\n        cb();\n    }\n\n    _createAudioSocket(cb) {\n        this.audioSocket = new WebSocket(this.lpsServiceUrl + \"/lps/audible_awareness\");\n        this.audioSocket.onerror = () => {\n            console.error(`Error opening audible awareness socket at ${this.lpsServiceUrl}/audible_awareness`);\n        };\n        this.audioSocket.onmessage = (event) => {\n            this.lps.audioData = JSON.parse(event.data);\n        };\n        cb();\n    }\n\n\n}\n\nexport default LPSService;\n"],"sourceRoot":"/source/"}