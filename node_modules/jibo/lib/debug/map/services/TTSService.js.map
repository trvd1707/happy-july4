{"version":3,"sources":["services/TTSService.js"],"names":[],"mappings":"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","file":"services/TTSService.js","sourcesContent":["import * as async from 'async';\nimport {EventEmitter} from 'events';\n\n/**\n * Emitted when a word is spoken.\n * @event module:jibo/tts~word\n * @param {String} word The word that was just spoken.\n */\n\n/**\n * Modes of TTS.\n * @alias module:jibo/tts~TTSMode\n * @enum {String}\n */\nconst TTSMode = {\n    /** Option to generate TTS from SSML -- COMING SOON!!!*/\n    SSML: 'ssml',\n    /** Default mode for TTS */\n    TEXT: 'text'\n};\n\n/**\n * TTS Server API paths.\n * {@link https://confluence.jibo.com/display/ENG/TTS+Service|TTS Service Docs}\n * @private\n * @enum {String}\n */\nconst APIPath = {\n    TOKENS: '/tts_tokens',\n    PHONES: '/tts_phones',\n    STOP: '/tts_stop',\n    SPEAK: '/tts_speak',\n    TIMING: '/tts_token_times',\n    EFFECTS: '/tts_effects',\n    ANALYSIS: '/tts_analysis'\n};\n\n\n/**\n * The various event types that TTSService emits.\n * @alias module:jibo/tts~TTSEvents\n * @enum {String}\n */\nconst TTSEvents = {\n    WORD: 'word',\n    PHONE: 'phone',\n    STOP: 'stop',\n    EFFECT: 'effect',\n    ANALYSIS: 'analysis'\n};\n\n/**\n * The various types of actions pedals can take.\n * @private\n * @enum {String}\n */\nconst PedalsActions = {\n    START: 'START',\n    STOP: 'STOP',\n    UPDATE: 'UPDATE'\n};\n\n/**\n * The various events this service will emit.\n * @alias module:jibo/tts~PedalsEvents\n * @enum {String}\n */\n//const PedalsEvents = {\n//    CONNECT: 'connect',\n//    DISCONNECT: 'disconnect',\n//    CONNECT_FAIL: 'connect-fail',\n//    ERROR: 'error'\n//};\n\n/**\n * The default settings for a TTS request body\n * @private\n */\nconst defaultTTSReqBody = {\n    prompt: '',\n    locale: 'en-us',\n    voice: 'griffin',\n    duration_stretch: 1,\n    pitch: 1.0,\n    pitchBandwidth: 0.55,\n    mode: TTSMode.TEXT,\n    outputMode: 'stream'\n};\n\n\n/**\n * @description\n * Text-to-Speech\n *\n * ```\n * var jibo = require(\"jibo\");\n * jibo.tts.on('word', (word) => {\n *     //respond to words\n * });\n * jibo.tts.speak(\"Hello, my name is Jibo\", (err) => {\n *\n * });\n * ```\n * @module jibo/tts\n * @extends {EventEmitter}\n */\nclass TTSService extends EventEmitter {\n    constructor() {\n        super();\n        this.isInitialized = false;\n        this.isTalking = false;\n        this.isStopping = false;\n\n        // Flip this on to have websocket messages logged to the console\n        //this.logging = true;\n\n        // Provide external access to these enums\n        this.TTSEvents = TTSEvents;\n        this.TTSMode = TTSMode;\n    }\n\n    static get TTSMode() {\n        return TTSMode;\n    }\n\n    static get TTSEvents() {\n        return TTSEvents;\n    }\n\n    init(service, cb) {\n        if (!service.host || typeof service.host !== 'string') {\n            throw new Error(`Missing required service.host`);\n        }\n\n        this.httpInterface = \"http://\" + service.host + \":\" + service.port;\n        this.socketUrl =  \"ws:\" + service.host + \":\" + service.port;\n\n        // Wrap effect socket call so we can extract socket and keep ref to it\n        let effectsSocketCreator = (cb) => {\n            let handler = (socket) => {\n                this.effectsSocket = socket;\n                cb();\n            };\n            this.createSocket(APIPath.EFFECTS, \"tts sound effects\", TTSEvents.EFFECT)(handler);\n        };\n\n        async.parallel(\n            [\n                this.createSocket(APIPath.TOKENS, \"tts tokens\", TTSEvents.WORD).bind(this),\n                this.createSocket(APIPath.PHONES, \"tts phones\", TTSEvents.PHONE).bind(this),\n                this.createSocket(APIPath.ANALYSIS, \"tts analysis\", TTSEvents.ANALYSIS).bind(this),\n                effectsSocketCreator\n            ],\n            () => {\n                this.isInitialized = true;\n                cb();\n            }\n        );\n    }\n\n    getOptionsAndCallback(arg1, arg2) {\n\n        let options = {};\n        let callback;\n        if (arg1 === undefined && arg2 === undefined) {\n            options = {};\n        }\n        else if (typeof arg1 === 'object' && arg2 === undefined) {\n            options = arg1;\n        }\n        else if (typeof arg1 === 'function' && arg2 === undefined) {\n            callback = arg1;\n        }\n\n        else if (typeof arg1 === 'object' && typeof arg2 === 'function') {\n            options = arg1;\n            callback = arg2;\n        }\n        return {\n            options, callback\n        };\n    }\n\n\n    createSocket(path, socketDescription, emitterEventName) {\n        return (cb) => {\n            let socket = new WebSocket(this.socketUrl + path);\n            socket.onerror = () => {\n                console.error(`Error opening ${socketDescription} socket at ${this.socketUrl}${path}`);\n            };\n            socket.onmessage = (event) => {\n                // Log events to the console if logging is enabled\n                if(this.logging){\n                    console.log(event);\n                }\n\n                let word;\n                try{\n                    word = JSON.parse(event.data);\n                } catch(err){\n                    // Work around to fix tts service's malformed (Failed ot JSON.parse()) payloads for the\n                    // message when the token status is \"STOP\"\n                    if(event.data === '{\"token\":\"\",\"timestamp\":0.0,\"status\":\"STOP\",\"moreinfo\":[]}'){\n                        this.emit(emitterEventName, {\"token\":\"\",\"timestamp\":0.0,\"status\":\"STOP\",\"moreinfo\":[]});\n                        return;\n                    }\n                    console.log(`Could not JSON.parse() ${socketDescription} event.data. Payload was: '${event.data}'`);\n                }\n                if (word) {\n                    this.emit(emitterEventName, word);\n                }\n            };\n            cb(socket);\n        };\n\n    }\n\n    _dispatchWordSchedule(wordTimings) {\n        let start = Date.now();\n        let index = 0;\n        wordTimings = wordTimings.tokentimes.tokens\n          .filter(token => token.name !== '/pau/');\n\n        let handleWord = () => {\n            let wordObj = wordTimings[index];\n            this.emit('word', {\n                token: wordObj.name,\n                timestamp: wordObj.start,\n                status: 'PLAY',\n                moreinfo: []\n            });\n            index++;\n            if (index < wordTimings.length) {\n                let nextTime = 1000 * wordTimings[index].start;\n                let current = Date.now() - start;\n                setTimeout(handleWord, Math.max(nextTime - current, 0));\n            }\n        };\n\n        if (wordTimings.length) {\n            let nextTime = 1000 * wordTimings[index].start;\n            setTimeout(handleWord, nextTime);\n        }\n    }\n\n    _speak(text, options, callback) {\n        if(!this.isInitialized) {\n            callback(\"TTS Service is not initialized\");\n            return;\n        }\n\n        let doSpeak = () => {\n\n            // We start by getting the word schedule\n            this._getWordTimings(text, options, (err, timings) => {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    // We then start dispatching the word schedule\n                    // asynchronously\n                    this._dispatchWordSchedule(timings);\n\n                    let request = new XMLHttpRequest();\n\n                    let requestBody = JSON.parse(JSON.stringify(defaultTTSReqBody));\n                    requestBody.prompt = text;\n\n                    // Pass in optional parameters\n                    requestBody.duration_stretch = options.duration_stretch ||\n                      requestBody.duration_stretch;\n                    requestBody.pitchBandwidth = options.pitchBandwidth ||\n                      requestBody.pitchBandwidth;\n                    requestBody.pitch = options.pitch || requestBody.pitch;\n                    requestBody.mode = options.mode || requestBody.mode;\n\n                    requestBody = JSON.stringify(requestBody);\n                    request.open(\"POST\", this.httpInterface + APIPath.SPEAK, true);\n\n                    request.onreadystatechange = () => {\n                        if (request.readyState == 4) {\n                            if (request.status === 204) { // HTTP_NO_CONTENT\n                                this.isTalking = false;\n                                callback();\n                            }\n                            else {\n                                // failure if anything else\n                                let msg = 'TTS Service is unavailable';\n                                if (request.statusText !== undefined && request.statusText !== \"\") {\n                                    msg = request.statusText; // use \"reason\" if they gave it\n                                }\n\n                                callback(msg);\n                            }\n                        }\n                    };\n                    this.isTalking = true;\n                    request.send(requestBody);\n                }\n            });\n        };\n\n        if(this.isStopping) {\n            let onStopped = () => {\n                this.removeListener('stopped', onStopped);\n                doSpeak();\n            };\n            this.on('stopped', onStopped);\n        }\n        else if(this.isTalking) {\n            stop(doSpeak);\n        }\n        else {\n            doSpeak();\n        }\n    }\n\n    /**\n     * Makes Jibo speak.\n     * @method module:jibo/tts~speak\n     * @param {String} text Text for Jibo to speak.\n     * @param {Object} [options] Parameters to override default TTS behavior.\n     * @param {number} [options.duration_stretch] Stretches the utterance. 1 = no stretch, 0.5 = halves the duration, 2 doubles the duration. There is no upper limit.\n     *                                            Has no effect if `options.mode === jibo.tts.TTSMode.SSML`.\n     * @param {number} [options.pitch]  Controls the overall pitch of the speaker. There is no SSML tag to override this.\n     *                                  Recommended value is 0.42. The recommended range is [0.2, 0.8].\n     * @param {number} [options.pitchBandwidth] Widens the pitch bandwidth. Recommended value is 1.\n     *                                          The range is [0.0, 2.0]. A value of 0 makes Jibo sound robotic, while a value of 2.0\n     *                                          makes Jibo sound more like a person.\n     * @param {module:jibo/tts~TTSMode} [options.mode] In `jibo.tts.TTSMode.SSML` mode, the `text` argument to this function should contain valid SSML. In text mode, the prompt can contain any text.\n     * @param {Function} [callback] Callback that notifies the caller that the speech has started. If no\n     *                              callback is provided, a `Promise` is returned.\n     * @return {Promise|undefined} If no callback is provided, a `Promise` is returned, which is resolved when done speaking.\n     */\n    speak(text, arg1, arg2) {\n        let {callback, options} = this.getOptionsAndCallback(arg1, arg2);\n        if(!callback) {\n            return new Promise((res, rej) => {\n                let cb = (err) => {\n                    if (err) rej(err);\n                    else res();\n                };\n                this._speak(text, options, cb);\n            });\n        }\n        else {\n            this._speak(text, options, callback);\n        }\n\n    }\n\n\n    _stop(callback) {\n        if(!this.isInitialized) {\n            callback();\n            return;\n        }\n        this.isStopping = true;\n        this.isTalking = false;\n        let request = new XMLHttpRequest();\n        request.timeout = 2000;\n        request.onreadystatechange = () => {\n            if(request.readyState === 4 && request.status === 200) { // HTTP_OK\n                this.isStopping = false;\n                this.emit('stopped');\n                callback();\n            }\n        };\n        request.open(\"GET\", this.httpInterface + APIPath.STOP, true);\n        request.send(null);\n    }\n\n\n    /**\n     * Stops any speech Jibo is uttering.\n     * @method module:jibo/tts~stop\n     * @param {Function} [callback] Callback that notifies the caller that speech has stopped. If no callback is provided, a `Promise` is returned.\n     * @return {Promise|undefined} If no callback is provided a `Promise`, which gets resolved when stopped, is returned.\n     */\n    stop(callback) {\n        if(callback) {\n            this._stop(callback);\n        }\n        else {\n            return new Promise((res) => {\n                this._stop(res);\n            });\n        }\n    }\n\n    _getWordTimings(text, options, cb) {\n        if (typeof text !== 'string') {\n            throw new TypeError(`Invalid params: ${text}, ${TTSMode}`);\n        }\n        if (!this.isInitialized) {\n            throw new Error('Not initialized. Use .init()');\n        }\n\n        let request = new XMLHttpRequest();\n\n        let requestBody = JSON.parse(JSON.stringify(defaultTTSReqBody));\n        requestBody.prompt = text;\n\n        // Pass in optional parameters\n        requestBody.duration_stretch = options.duration_stretch ||\n          requestBody.duration_stretch;\n        requestBody.pitchBandwidth = options.pitchBandwidth ||\n          requestBody.pitchBandwidth;\n        requestBody.pitch = options.pitch || requestBody.pitch;\n        requestBody.mode = options.mode || requestBody.mode;\n\n        // Create actual request body and subscribe response handler\n        requestBody = JSON.stringify(requestBody);\n        request.open('POST', this.httpInterface + APIPath.TIMING, true);\n        request.onreadystatechange = () => {\n            var requestIsDone = request.readyState == 4;\n            var isErrorStatus = request.status < 200 || request.status >= 400;\n            if(requestIsDone && request.status == 200) {\n                // We attempt parsing the message\n                let msg;\n                try{\n                    msg = JSON.parse(request.response);\n                } catch(err){\n                    cb(err);\n                }\n                if (msg) {\n                    if (msg.Status && msg.Status === 'ERROR') {\n                        cb(msg);\n                    }\n                    else {\n                        cb(null, msg);\n                    }\n                }\n            } else if (requestIsDone && isErrorStatus) {\n                cb(new Error(`Request failed with status: ${request.status}`));\n            }\n        };\n        request.send(requestBody);\n    }\n\n    /**\n     * Asynchronously retrieves a word schedule for given text (SSML markup support coming soon!).\n     * @method module:jibo/tts~getWordTimings\n     * @param {String} text The utterance provided to TTS for speaking.\n     * @param {Object} [options] Same options as {@link module:jibo/tts~speak}.\n     * @param {Function} [callback] Callback. If none is provided, a `Promise` will be returned.\n     * @return {Promise|undefined}\n     */\n    getWordTimings(text, arg1, arg2) {\n\n        let {options, callback} = this.getOptionsAndCallback(arg1, arg2);\n\n        if(callback) {\n            this._getWordTimings(text, options, callback);\n        }\n        else {\n            return new Promise((res, rej) => {\n                let cb = (err, schedule) => {\n                    if (err) rej(err);\n                    else res(schedule);\n                };\n                this._getWordTimings(text, options, cb);\n            });\n        }\n\n    }\n\n    _validateEffectNameParam(name) {\n        if (typeof name !== 'string') {\n            throw new TypeError(`Invalid params, name must be string: ${name}`);\n        }\n        if (!this.isInitialized) {\n            throw new Error('Not connected. Cannot send action.');\n        }\n        if (!this.effectsSocket) {\n            throw new Error('Effect socket not initialized.');\n        }\n    }\n\n    _validateEffectValueParam(value) {\n        if (typeof value === 'number') {\n            if (value < 0 || value > 1) {\n                throw new TypeError(`Value out of range [0, 1]: ${value}`);\n            }\n        }\n        else if(typeof value !== 'string') {\n            throw new TypeError(`Value must either be a number or string: ${value}`);\n        }\n    }\n\n    /**\n     * Starts a sound effect.\n     * @method module:jibo/tts~startEffect\n     * @param {String} name The name of the effect.\n     * @param {number | string} value Either a number between 0 and 1 or a\n     * string parameter for the effect.\n     */\n    startEffect(name, value) {\n        this._validateEffectNameParam(name);\n        this._validateEffectValueParam(value);\n\n        var requestBody = {\n            'name': name,\n            'action': PedalsActions.START,\n            'param': (\"\" + value)\n        };\n        this.effectsSocket.send(JSON.stringify(requestBody));\n    }\n\n    /**\n     * Stops a sound effect.\n     * @method module:jibo/tts~stopEffect\n     * @param {String} name The name of the effect.\n     */\n    stopEffect(name) {\n        this._validateEffectNameParam(name);\n\n        var requestBody = {\n            'name': name,\n            'action': PedalsActions.STOP,\n            'param': \"0\"\n        };\n        this.effectsSocket.send(JSON.stringify(requestBody));\n    }\n\n    /**\n     * Updates the value of a sound effect.\n     * @method module:jibo/tts~updateEffect\n     * @param {String} name The name of the effect.\n     * @param {number | string} value Either a number between 0 and 1 or a\n     * string parameter for the effect.\n     */\n    updateEffect(name, value) {\n        this._validateEffectNameParam(name);\n        this._validateEffectValueParam(value);\n\n        var requestBody = {\n            'name': name,\n            'action': PedalsActions.UPDATE,\n            'param': (\"\" + value)\n        };\n        this.effectsSocket.send(JSON.stringify(requestBody));\n    }\n}\n\nexport default TTSService;\n"],"sourceRoot":"/source/"}