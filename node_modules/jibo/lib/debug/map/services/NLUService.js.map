{"version":3,"sources":["services/NLUService.js"],"names":[],"mappings":"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","file":"services/NLUService.js","sourcesContent":["import {EventEmitter} from 'events';\n\n/**\n * This callback is displayed as a global member.\n * @callback module:jibo/nlu~ParseCallback\n * @param {String} error `null` if no error.\n * @param {Object} result Data structure using the following format:\n * ```\n * {\n     *    Input: \"hello my name is Joe I work in a button factory\"\n     *    NLParse: {\n     *       who: \"Joe\",\n     *       what: \"Button factory\"\n     *    }\n     * }\n * ```\n * @param {String} result.Input The speech returned from cloud recognition. Note: there\n *                              will be no punctuation in speech returned from cloud recognition.\n * @param {String} result.NLParse The result of a parse from a `.rules` file.\n */\n\n\n/**\n * @description\n * Natural Language Understanding\n *\n * ```\n * var nlu = require(\"jibo\").nlu;\n * ```\n * @module jibo/nlu\n */\nclass NLUService extends EventEmitter {\n    constructor() {\n        super();\n    }\n\n    init(service, cb) {\n        this.httpInterface = \"http://\" + service.host + \":\" + service.port;\n        this.loggingEnabled = false;\n        cb();\n    }\n\n\n    /**\n     * Precompiles a rule from string.\n     * @param rule {String} Rule to compile.\n     * @param callback {module:jibo/nlu~ParseCallback} Callback for when the rule is compiled with generated handle.\n     * @param handle {String} Optional handle to enable dynamically generated rules to be accessible\n     * within parser for all rule files in skill. Ex. 'crew'. \n     * @method module:jibo/nlu~compile\n     */\n    compile(rule, callback, handle) {\n        let body = {\n            \"REQ_TYPE\":\"COMPILE\",\n            \"REQ_CONTENT\":{\n                \"RULE_STRING\": rule\n            }\n        };\n        if(handle) {\n            body.REQ_CONTENT.URI = \"handle:\" + handle;\n        }\n        let request = new XMLHttpRequest();\n        body = JSON.stringify(body);\n\n        request.open(\"POST\", this.httpInterface + '/nlu_interface', true);\n        request.onreadystatechange = () => {\n            if(request.readyState == 4 && request.status == 200) {\n                let response = JSON.parse(request.response);\n                if(this.loggingEnabled) {\n                    console.log('request.response');\n                    console.log(request.response);\n                }\n                if(response.Status === 'OK') {\n                    let result = response.URI;\n                    callback(null, result);\n                }\n                else if(response.Status === 'ERROR') {\n                    callback(response.Message);\n                }\n\n            }\n            else if(request.readyState == 4 && request.status === 0) {\n                callback(\"NLU Service is unavailable\");\n            }\n        };\n        if(this.loggingEnabled) {\n            console.log(\"body\");\n            console.log(body);\n        }\n        request.send(body);\n    }\n\n    /**\n     * Parses text using a rule.\n     * @param rule {String} Rule to use when parsing text.\n     * @param text {String} The text to parse.\n     * @param callback {callback} Callback for when the parse is complete.\n     * @param messageId {String} message Id to match ASR data to NLU parsing.\n     * @method module:jibo/nlu~parseFromRule\n     */\n    parseFromRule(rule, text, callback, messageId) {\n        text = text.toLowerCase();\n        let body = {\n            \"REQ_TYPE\":\"PARSE_FROM_TEXT\",\n            \"REQ_CONTENT\":{\n                \"RULE_STRING\": rule,\n                \"TXT_STRING\": text\n            },\n            \"MESSAGE_ID\": messageId\n        };\n        let request = new XMLHttpRequest();\n        body = JSON.stringify(body);\n\n        request.open(\"POST\", this.httpInterface + '/nlu_interface', true);\n        request.onreadystatechange = () => {\n            if(request.readyState == 4 && request.status == 200) {\n                let response = JSON.parse(request.response);\n                if(this.loggingEnabled) {\n                    console.log('request.response');\n                    console.log(request.response);\n                }\n                if(response.Status === 'OK') {\n                    let result = response.Result.length > 0 ? response.Result[0] : {Input: text};\n                    callback(null, result);\n                }\n                else if(response.Status === 'ERROR') {\n                    callback(response.Message);\n                }\n\n            }\n            else if(request.readyState == 4 && request.status === 0) {\n                callback(\"NLU Service is unavailable\");\n            }\n        };\n        if(this.loggingEnabled) {\n            console.log(\"body\");\n            console.log(body);\n        }\n        request.send(body);\n    }\n\n    /**\n     * Parse text using a rule file.\n     * @param ruleHandle {String} URI handle for precompiled rule file.\n     * @param text {String} The text to parse.\n     * @param callback {callback} Callback for when the parse is complete.\n     * @param messageId {String} message Id to match ASR data to NLU parsing.\n     * @method module:jibo/nlu~parseFromURI\n     */\n    parseFromURI(ruleHandle, text, callback, messageId) {\n        text = text.toLowerCase();\n        let body = {\n            \"REQ_TYPE\":\"PARSE_FROM_URI\",\n            \"REQ_CONTENT\":{\n                \"URI\": ruleHandle,\n                \"TXT_STRING\": text\n            },\n            \"MESSAGE_ID\": messageId\n        };\n        let request = new XMLHttpRequest();\n        body = JSON.stringify(body);\n\n        request.open(\"POST\", this.httpInterface + '/nlu_interface', true);\n        request.onreadystatechange = () => {\n            if(request.readyState == 4 && request.status == 200) {\n                let response = JSON.parse(request.response);\n                if(this.loggingEnabled) {\n                    console.log('request.response');\n                    console.log(request.response);\n                }\n                if(response.Status === 'OK') {\n                    let result = response.Result.length > 0 ? response.Result[0] : {Input: text};\n                    callback(null, result);\n                }\n                else if(response.Status === 'ERROR') {\n                    callback(response.Message);\n                }\n\n            }\n            else if(request.readyState == 4 && request.status === 0) {\n                callback(\"NLU Service is unavailable\");\n            }\n        };\n        if(this.loggingEnabled) {\n            console.log(\"body\");\n            console.log(body);\n        }\n        request.send(body);\n    }\n\n    setLogging(loggingEnabled) {\n        this.loggingEnabled = loggingEnabled;\n    }\n\n    parseFromFile() {\n\n    }\n}\n\nexport default NLUService;\n"],"sourceRoot":"/source/"}