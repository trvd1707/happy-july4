{"version":3,"sources":["services/AudioService.js"],"names":[],"mappings":"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","file":"services/AudioService.js","sourcesContent":["/**\n * @description\n * Robot audio services\n *\n * ```\n * var jibo = require(\"jibo\");\n * jibo.audio.getMasterVolume();\n * ```\n * @module jibo/audio\n */\nclass AudioService {\n    constructor() {\n        this.httpInterface = undefined;\n    }\n\n    init(service, cb) {\n        this.httpInterface = \"http://\" + service.host + \":\" + service.port;\n        cb();\n    }\n\n    /**\n     * Gets current master volume.\n     * @method module:jibo/audio~getMasterVolume\n     * @param {Callback} cb Callback that notifies the caller that the\n     *                      system data was received or if an error was encountered.\n     *                      If successful, returns the master volume (range [0.0, 1.0]).\n     */\n    getMasterVolume(cb) {\n        this._getMixerSetting((error, settings) => {\n            if (error) {\n                cb(error);\n            }\n            else {\n                cb(null, settings.master.playbackVolume);\n            }\n        });\n    }\n\n    /**\n     * Sets the master volume.\n     * @method module:jibo/audio~setMasterVolume\n     * @param {Value} value Desired master volume (range [0.0 - 1.0]).\n     * @param {Callback} cb Callback that notifies the caller that\n     *                      system data was received or if an error was encountered.\n     *                      If unsuccessful, returns the error; otherwise, returns `null`.\n     */\n    setMasterVolume(value, cb) {\n        // ensure that value is between 0.0 and 1.0\n        if (!value || (value < 0.0) || (value > 1.0)) {\n            let error = 'Master volume of ' + value + ' is out of range [0.0 - 1.0].';\n            cb(error);\n            return;\n        }\n        // get mixer settings so we can only alter the one property\n        this._getMixerSetting((error, settings) => {\n            if (error) {\n                cb(error);\n            }\n            else {\n                let request = new XMLHttpRequest();\n                let uri = this.httpInterface + '/mixer';\n\n                request.open(\"POST\", uri, true);\n\n                request.onreadystatechange = () => {\n                    if(request.readyState == 4) {\n                        if (request.status == 204) { // no content means success!\n                            cb(null);\n                        }\n                        else {\n                            // failure if anything else\n                            let msg = 'Audio Service is unavailable';\n                            if (request.statusText !== undefined && request.statusText !== \"\") {\n                                msg = request.statusText; // use \"reason\" if they gave it\n                            }\n\n                            cb(msg);\n                        }\n                    }\n                };\n\n                settings.master.playbackVolume = value;\n                request.send(JSON.stringify(settings));\n            }\n        });\n    }\n\n\n    _getMixerSetting(cb) {\n        if (this.httpInterface === undefined) {\n            cb('Audio Service is not available', null);\n            return;\n        }\n\n        let request = new XMLHttpRequest();\n\n        request.open(\"GET\", this.httpInterface + '/mixer', true);\n\n        request.onreadystatechange = () => {\n            if(request.readyState == 4) {\n                if (request.status == 200) {\n                    if (request.response) {\n                        // success!\n                        let response = JSON.parse(request.response);\n                        cb(null, response);\n                    }\n                    else {\n                        cb('No data received from audio service', null);\n                    }\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'Audio service is unavailable';\n                    if (request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    cb(msg, null);\n                }\n            }\n        };\n\n        request.send();\n    }\n}\n\nexport default AudioService;\n"],"sourceRoot":"/source/"}