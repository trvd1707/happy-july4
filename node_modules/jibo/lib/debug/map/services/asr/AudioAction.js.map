{"version":3,"sources":["services/asr/AudioAction.js"],"names":[],"mappings":"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","file":"services/asr/AudioAction.js","sourcesContent":["import * as uuid from 'uuid';\nimport ASRVariables from './ASRVariables';\nimport {EventEmitter} from 'events';\n\n/**\n * All speech actions are coodinated by this class. Create a new instance through the\n * asr module.\n * ```\n * var asr = require('jibo').asr;\n * var action = asr.createAudioAction();\n * ```\n * @class AudioAction\n * @extends EventEmitter\n * @memberof module:jibo.services.asr\n * @private\n */\nclass AudioAction extends EventEmitter {\n\n    /**\n     * @private\n     * @param url\n     */\n    constructor(url) {\n        super();\n        this.httpInterface = url;\n        this.id = 'action-' + uuid.v4();\n        ASRVariables.idToAction[this.id] = this;\n        this.isCleared = false;\n    }\n\n    setAudioSourceId(id) {\n        this.audioSourceId = id;\n    }\n\n    /**\n     * Starts this audio action.\n     * ```\n     * var asr = require('jibo').asr;\n     * var action = asr.createAudioAction();\n     * var cloud = new asr.CloudRecognizer();\n     * var endOfSpeech = new asr.EndOfSpeechRecognizer();\n     * var task = cloud + \" | \" + endOfSpeech;\n     * action.start(task);\n     * ```\n     * @function AudioAction#start\n     * @param {String} task The string representation of the task. This is built by concatonating Recognizers.\n     */\n    start(task) {\n        if(this.isCleared) {\n            return;\n        }\n        let body = {\n            action: 'init_and_start',\n            task: task,\n            task_id: this.id,\n            audio_source_id: this.audioSourceId\n        };\n        body = JSON.stringify(body);\n        let request = new XMLHttpRequest();\n        request.open(\"POST\", this.httpInterface, true);\n        request.send(body);\n\n    }\n\n    restart(task) {\n         if(this.isCleared) {\n            return;\n        }\n        let body = {\n            action: 'start',\n            task: task,\n            task_id: this.id,\n            audio_source_id: this.audioSourceId\n        };\n        body = JSON.stringify(body);\n        let request = new XMLHttpRequest();\n        request.open(\"POST\", this.httpInterface, true);\n        request.send(body);   \n    }\n\n    /**\n     * Stops the current action and shuts down all recognizers.\n     * @function AudioAction#stop\n     */\n    stop(cb) {\n        if(this.isCleared) {\n            return;\n        }\n        let request = new XMLHttpRequest();\n        let body = {\n            action: 'stop',\n            task: '',\n            task_id: this.id,\n            audio_source_id: this.audioSourceId\n        };\n        body = JSON.stringify(body);\n        request.open(\"POST\", this.httpInterface, true);\n        request.send(body);\n        if(cb) {\n            cb();\n        }\n    }\n\n    /**\n     * Clears all current recognizers in action from memory.\n     * @function AudioAction#clear\n     */\n    clear() {\n        if(this.isCleared) {\n            return;\n        }\n        delete ASRVariables.idToAction[this.id];\n        this.isCleared = true;\n        let request = new XMLHttpRequest();\n        let body = {\n            action: 'clear',\n            task: '',\n            task_id: this.id,\n            audio_source_id: this.audioSourceId\n        };\n        body = JSON.stringify(body);\n        request.open(\"POST\", this.httpInterface, true);\n        request.send(body);\n    }\n\n    getId() {\n        return this.id;\n    }\n}\n\nexport default AudioAction;\n"],"sourceRoot":"/source/"}