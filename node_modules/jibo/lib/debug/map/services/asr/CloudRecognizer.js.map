{"version":3,"sources":["services/asr/CloudRecognizer.js"],"names":[],"mappings":"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","file":"services/asr/CloudRecognizer.js","sourcesContent":["import Recognizer from './Recognizer';\nimport Runtime from '../../Runtime';\n\nlet CompileStatus = {\n    INVALID: 0,\n    COMPILING: 1,\n    COMPILE_FAILED: 2,\n    COMPILE_SUCCEEDED: 3\n};\n\n\n/**\n * This constructs a cloud speech recognizer. It can be used in parallel with an\n * {EndOfSpeechRecognizer}\n * ```\n * let action = asr.createAudioAction();\n * let cloud = new asr.CloudRecognizer();\n * let endOfSpeech = new asr.EndOfSpeechRecognizer();\n * let task = cloud + \" | \" + endOfSpeech;\n * action.start(task);\n * ```\n * @class CloudRecognizer\n * @private\n * @extends {Recognizer}\n * @memberof module:jibo.services.asr\n * @param {Object} options\n */\nclass CloudRecognizer extends Recognizer {\n    constructor(rule, options) {\n        options = options  ? options : {};\n        options.path = \"nuance_curlmulti\";\n        super(options);\n        this.rule = rule;\n        this.handle = null;\n        this.status = CompileStatus.INVALID;\n        this.callbacks = [];\n        this.type = 'cloud';\n        if(this.rule) {\n            this.compile(() => {});\n        }\n    }\n\n    setRuleHandle(handle) {\n        this.handle = handle;\n        this.status = CompileStatus.COMPILE_SUCCEEDED;\n    }\n\n    callCallbacks(error) {\n        this.callbacks.forEach((callback) => {\n            callback(error);\n        });\n        this.callbacks.length = 0;\n    }\n\n    compile(callback) {\n        this.callbacks.push(callback);\n        if(this.status === CompileStatus.INVALID) {\n            this.status = CompileStatus.COMPILING;\n            Runtime.instance.nlu.compile(this.rule, (err, result) => {\n                if(err) {\n                    this.status = CompileStatus.COMPILE_FAILED;\n                    console.warn(err);\n                    this.callCallbacks('error');\n                }\n                else {\n                    this.status = CompileStatus.COMPILE_SUCCEEDED;\n                    this.handle = result;\n                    this.callCallbacks();\n                }\n            });\n        }\n        else if(this.status === CompileStatus.COMPILE_FAILED) {\n            this.callCallbacks('error');\n        }\n        else if(this.status === CompileStatus.COMPILE_SUCCEEDED) {\n            this.callCallbacks();\n        }\n    }\n\n    onResult(data) {\n        let asr = Runtime.instance.asr;\n        let nlu = Runtime.instance.nlu;\n        asr.pause();\n        let utterance = data.utterances[0].utterance;\n        let messageId = data.message_id;\n        if(this.rule) {\n            this.compile((error) => {\n                let parseFunction = error ? nlu.parseFromRule.bind(nlu) : nlu.parseFromURI.bind(nlu);\n                let ruleReference = error ? this.rule : this.handle;\n                parseFunction(ruleReference, utterance, (error, result) => {\n                    if(error) {\n                        this.emit('error', error);\n                    }\n                    else {\n                        this.emit('result', result);\n                    }\n                    asr.resume();\n                }, messageId);\n            });\n        }\n        else {\n            this.emit('result', {Input: utterance});\n            asr.resume();\n        }\n    }\n\n    onIncremental(data) {\n        let nlu = Runtime.instance.nlu;\n        let utterance = data.utterances[0].utterance;\n        let messageId = data.message_id;\n        if(this.rule) {\n            this.compile((error) => {\n                let parseFunction = error ? nlu.parseFromRule.bind(nlu) : nlu.parseFromURI.bind(nlu);\n                let ruleReference = error ? this.rule : this.handle;\n                parseFunction(ruleReference, utterance, (error, result) => {\n                    if(error) {\n                        this.emit('error', error);\n                    }\n                    else {\n                        this.emit('incremental', result);\n                    }\n                }, messageId);\n            });\n        }\n        else {\n            this.emit('inremental', {Input: utterance});\n        }\n    }\n}\n\nexport default CloudRecognizer;\n"],"sourceRoot":"/source/"}