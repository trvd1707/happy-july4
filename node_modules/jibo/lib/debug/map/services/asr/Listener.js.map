{"version":3,"sources":["services/asr/Listener.js"],"names":[],"mappings":"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","file":"services/asr/Listener.js","sourcesContent":["import {EventEmitter} from 'events';\nimport Runtime from '../../Runtime';\n\n\n/**\n * This constructs a listener. \n * \n * @param options {Object} Listen options\n * @param options.heyJibo {Boolean} true if listen for \"Hey, Jibo\"\n * @param options.detectEnd {Boolean} true if listen for end of speech\n * @param options.incremental {Boolean} true if listen for incremental results\n * @param options.authenticateSpeaker {String} name of speaker, if applicable\n * @param options.precompiledHandle {String} handle id of a precompiled rule file\n *                          through nlu service. Bypasses all rule compilation. \n * @param [rule] {String} The rule to parse results against. If no rule is \n *                          provided only embedded results will be heard.\n * @returns {module:jibo.services.asr.Listener} Listener with given recognition options\n * \n * ```\n * this.listener = asr.createListener(options, rule);\n * this.listener.start();\n * ```\n * Listener will start emitting events. Possible events are: \n * ```\n * this.listener.on('cloud', (result, speaker) => {\n *      // Use the final recognition jibo hears\n * });\n * ```\n * Where result is the {asrResult} with Input and NLParse fields if a rule\n * file was supplied to the listener.\n * \n * ```\n * this.listener.on('incremental', (result) => {\n *      // use incremental speech results\n * });\n * ```\n * Where result is the {asrResult} with Input. \n * \n * ```\n * this.listener.on('embedded', (result, speaker) => {\n *      // use embedded recognition event\n * });            \n * this.listener.on('end', () => {\n *      // use the end of speech event\n * });            \n * this.listener.on('error', (error) => {\n *      // do things\n * });     \n * this.listener.on('finished', () => {\n *      // do things\n *      this.listener.removeAllListeners();\n *      this.listener.stop();\n * }); \n * ```\n * @class Listener\n * @extends {EventEmitter}\n * @memberof module:jibo.services.asr\n */\n\nclass Listener extends EventEmitter {\n    constructor(options, rule){\n        super();\n        this.options = options;\n        this.rule = rule;\n        this.status = \"INVALID\";\n    }\n\n    /**\n     * immediately stop the recognition task\n     * @method module:jibo.services.asr.Listener#onFinished\n     * @private\n     */\n    onFinished(status=\"SUCCEEDED\") {\n        /**\n         * This is the last event to be fired.\n         * @event module:jibo.services.asr.Listener#finished\n         */\n        this.emit('finished');\n        this.status = status;\n        this.removeAllListeners();\n        this.action.stop();\n        this.action.clear();\n    }\n\n\n    /**\n     * once all rules have been recognized, if the\n     * end function is satisfied the behavior will move on to cloud result task\n     * @private\n     */\n    heyJiboResult() {\n        if(this.heyJiboPhrase && this.tdSpeakerResult) {\n            /**\n             * An embedded recognition event occured such as someone saying 'Hey Jibo'.\n             * @event module:jibo.services.asr.Listener#embedded\n             * @param {Object} result\n             * @param {String} result.Input The result of an embedded recognition.\n             * @param {Array} speakers Text dependent speaker ID results.\n             */\n            this.emit('embedded', this.heyJiboPhrase, this.tdSpeakerResult);\n        }\n    }\n\n    /**\n     * once all rules have been recognized, if the\n     * end function is satisfied the behavior will succeed,\n     * @private\n     */\n    cloudResult() {\n        if(this.asrResult && this.tiSpeakerResult) {\n            /**\n             * This event is fired when there is a cloud result.\n             * @event module:jibo.services.asr.Listener#cloud\n             * @param {Object} result\n             * @param {String} result.Input The text recognized so far.\n             * @param {Object} result.NLParse Key value pairs from parsing of a `.rule` file.\n             * @param {Array} speakers Text independent speaker ID results.\n             */\n            if(!this.asrResult) {\n                this.asrResult = {};\n                this.asrResult.status = \"NO-RESULTS\";\n            }\n            this.asrResult.status = \"GOT-RESULTS\";\n            if(!this.asrResult.NLParse) {\n                this.asrResult.NLParse = {};\n                this.asrResult.NLParse.status = \"NO-PARSE\";\n            }\n            else {\n                this.asrResult.NLParse.status = \"GOT-PARSE\";\n            }\n            this.emit('cloud', this.asrResult, this.tiSpeakerResult);\n        }\n    }\n\n    /**\n     * creates task of cloud recognizer with given options.\n     * @private\n     */\n    addCloudRecognizer(options) {\n        // Set up the cloud recognizer\n        let cloudOpts = options;\n        cloudOpts.speakerId = false;\n        let cloud = new this.asr.CloudRecognizer(this.rule, cloudOpts);\n        if(this.options.precompiledHandle) {\n            cloud.setRuleHandle(this.options.precompiledHandle);\n        }\n        cloud.on('result', (result) => {\n            this.asrResult = result;\n            this.cloudResult();\n            cloud.removeAllListeners('result');\n        });\n        cloud.on('error', (error) => {\n            this.emit('error', error);\n        });\n        // TODO: take out this check, it will be handled\n        // by upcoming status improvements in ASR\n        if(options.incremental) {\n            cloud.on('incremental', (result) => {\n                /**\n                 * ASR incremental results.\n                 * @event module:jibo.services.asr.Listener#incremental\n                 * @param {Object} result\n                 * @param {Object} result.Input The text recognized so far.\n                 * @param {Object} result.NLParse Key value pairs from parsing of a `.rule` file.\n                 */\n                this.emit('incremental', result);\n            });\n        }\n        return `${cloud.pack()}`;\n    }\n\n    /**\n     * adds hey jibo embedded recognizer to beginning of argument task\n     * @private\n     */\n    addHeyJibo() {\n        let heytask = ``;        \n        let heyJibo = new this.asr.Recognizer({path: 'hey_jibo'});\n        heyJibo.on('result', (result) => {\n            this.heyJiboPhrase = result;\n            this.heyJiboResult();\n            heyJibo.removeAllListeners('result');\n        });\n        heytask = this.tdReco ? `(${heyJibo.pack()} * ${this.tdReco.pack()})` : `${heyJibo.pack()}`;\n\n        return `(${heytask})`;\n    }\n\n    /**\n     * adds speaker recognizer sequentially to beginning of argument task\n     * @private\n     */\n    addSpeakerRecognizers() {\n        this.tiReco = new this.asr.SpeakerRecognizer({authTI: true});\n        this.tiReco.on('result', (speakerIds) => {\n            this.tiSpeakerResult = speakerIds;\n            this.cloudResult();\n            this.tiReco.removeAllListeners('result');\n        });\n        return `(${this.tiReco.pack()})`;     \n    }\n\n    /**\n     * adds EOS task as parallel to beginning of argument task.\n     * @private\n     */\n    addEOSRecognizer() {\n        let endOfSpeech = new this.asr.EndOfSpeechRecognizer({});\n        endOfSpeech.on('result', () => {\n            /**\n             * This event is fired when end of speech is detected.\n             * @event module:jibo.services.asr.Listener#end\n             */\n            this.emit('end');\n            endOfSpeech.removeAllListeners('result');\n        });\n        return `${endOfSpeech.pack()}`;\n    }\n\n    /**\n     * Begins recognition task of listener. \n     * Once started, the listener will emit events such as:\n     * cloud, incremental, end, error (depending on constructor options)\n     * returns true if listen successfully started,\n     * emits error and returns false if task is already in progress.\n     * @method module:jibo.services.asr.Listener#start\n     * @returns {Boolean} true if start was successful, false otherwise\n     * @public\n     */\n    start() {\n        this.asr = Runtime.instance.asr;\n        if(this.status === \"IN_PROGRESS\") {\n            this.emit('error', 'cannot restart; listener is currently in progress.');\n            return false;\n        }\n        \n        // if(this.options.heyJibo && !this.options.rule) {\n        //     this.embeddedOnly = true;\n        // }\n\n        this.status = 'IN_PROGRESS';\n        // TODO: Change this to false when TI speaker works\n        this.tiSpeakerResult = {};\n        this.tiSpeakerResult.speaker_ids = [];\n        this.tiSpeakerResult.speaker_idstatus = 'ID-TI-NOT-AVAILABLE';\n        this.tdSpeakerResult = false;\n\n        this.action = this.asr.createAudioAction();\n        this.action.on('finished', () => {\n            this.onFinished();\n        });\n        // TODO: because of way ASR system works, \n        // only emits for TD result. Otherwise emits\n        // as normal but with sensory_spkr_id_ti reco.\n        this.action.on('speakerid', (data) => {\n            let speakerIds = data.speaker_ids;\n            let speakerIdStatus = data.speaker_idstatus;\n            this.tdSpeakerResult = {speakerIds, speakerIdStatus};\n            this.heyJiboResult();\n        });\n        this.action.on('error', (message) => {\n            this.emit('error', message);\n        });\n\n        let task;\n        // if we want a cloud recognizer and associated recos.\n        if(!this.options.embeddedOnly) {\n            task = this.addCloudRecognizer(this.options);\n            // Set up speaker Recognizers\n            // let speakerTask = this.addSpeakerRecognizers(task);\n            // task = `(${speakerTask} * ${task})`;        \n            // Set up EOS reocgnizer\n            if(this.options.detectEnd) {\n                let eosTask = this.addEOSRecognizer();\n                task = `(${eosTask} | ${task})`;\n            }\n            // Set up embedded recognizer\n            if(this.options.heyJibo) {\n                let heyTask = this.addHeyJibo();\n                task = `(${heyTask} * ${task})`;\n            }\n        }\n        // if we are only doing an embedded reco.\n        else {\n            task = this.addHeyJibo();\n        }\n        this.action.start(task);    \n\n        return true;\n    }\n\n    /**\n     * explicit call to stop the listener and recognition task. \n     * Listener can still be restarted, but regardless of where\n     * listener was in task, no more events will be emitted. \n     * Listeners are no longer subscribed.\n     * @method module:jibo.services.asr.Listener#stop\n     * @public\n     */\n    stop() {\n        this.onFinished(\"STOPPED\");\n    }\n}\n\nexport default Listener;"],"sourceRoot":"/source/"}