{"version":3,"sources":["services/asr/Recognizer.js"],"names":[],"mappings":"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","file":"services/asr/Recognizer.js","sourcesContent":["import * as uuid from 'uuid';\nimport ASRVariables from './ASRVariables';\nimport ASRService from './ASRService';\nimport {EventEmitter} from 'events';\n\n\n/**\n * Needs description.\n * @class Recognizer\n * @memberof module:jibo.services.asr\n * @private\n * @param {Object} options\n * @param {String} options.path The name of the compiled grammar.\n * @param {boolean} options.incremental `true` to return incremental results from the recognizer.\n */\nclass Recognizer extends EventEmitter {\n\n    constructor(options) {\n        super();\n        this.name = options.name || uuid.v4();\n        options = options || {};\n        this.bargein = (typeof options.bargein === 'boolean') ? options.bargein : true;\n        this.incremental = (typeof options.incremental === 'boolean') ? options.incremental : false;\n        this.timeout = options.timeout ? options.timeout : 0;\n        this.speakerName = options.speakerName ? options.speakerName : \"\";\n        this.speakerId = (typeof options.speakerId === 'boolean') ? options.speakerId : true;\n        this.nbest = options.nbest || 1;\n        if(options.path) {\n            this.path = ASRService.BASE + options.path;\n        }\n        else {\n            this.path = ASRService.BASE + 'nuance_curlmulti';\n        }\n        let split = this.path.split('/');\n        this.name = split[split.length - 1] + '-' + this.name;\n        ASRVariables.idToRecognizer[this.name] = this;\n    }\n\n    setPath(path) {\n        this.path = ASRService.BASE + path;\n    }\n\n    toString() {\n        return this.pack();\n    }\n\n    /**\n     * Packs the contents of this recognizer into a string representation for transfer over the wire.\n     * @function Recognizer#pack\n     * @returns {String} A string represenation of this recognizer.\n     */\n    pack() {\n        return JSON.stringify({\n            name: this.name,\n            path: this.path,\n            bargein: this.bargein,\n            nbest: this.nbest,\n            speaker_name: this.speakerName,\n            speaker_id: this.speakerId,\n            incremental: this.incremental,\n            timeout: this.timeout\n        });\n    }\n\n    onResult(data) {\n        if(data.utterances && data.utterances.length > 0) {\n            //TODO: check that these are the exact fields.\n            let speaker_ids = {\n                speaker_ids: data.speaker_ids, \n                speaker_idstatus: data.speaker_idstatus\n            };\n            this.emit('result', data.utterances[0], speaker_ids);\n        }\n        else {\n            let speaker_ids = {\n                speaker_ids: data.speaker_ids, \n                speaker_idstatus: data.speaker_idstatus\n            };\n            this.emit('result', '', speaker_ids);\n        }\n    }\n\n}\n\nexport default Recognizer;\n"],"sourceRoot":"/source/"}