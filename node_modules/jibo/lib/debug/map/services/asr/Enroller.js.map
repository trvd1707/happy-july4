{"version":3,"sources":["services/asr/Enroller.js"],"names":[],"mappings":"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","file":"services/asr/Enroller.js","sourcesContent":["import {EventEmitter} from 'events';\nimport Runtime from '../../Runtime';\n\n/**\n * This constructs an enroller.\n *\n * An enroller will continue to listen until it emits 'enrollment-succeeded'.\n * At this point it will unsubscribe all listeners and destroy itself.\n * Enrollment requires at least four \"Hey Jibo\"s, after which it will emit either\n * \"result\" or it will emit \"need-more-data\" with the number of utterances\n * still required.\n *\n * @param options {Object} Listen options\n * @param options.enrollmentType {enum} \"text-dependent\" or \"text-independent\"\n * @param options.speakerName {String} name of speaker to enroll\n * @returns {module:jibo.services.asr.Enroller} Enroller with given recognition options\n *\n * ```\n * this.enroller = asr.createEnroller(options, rule);\n * this.enroller.start();\n * ```\n * Listener will start emitting events. Possible events are:\n * ```\n * this.enroller.on('result', (speakerResults) => {\n *      // Use the recognition result\n *      asr.listEnrolledSpeakers(function(data){\n *          //the speaker will be listed in the data.\n *      });\n * });\n * this.enroller.on('need-more-data', (numberRequired) => {\n *      // numberRequired is the number of utterances of\n *      // \"Hey, Jibo\" still required for enrollment\n * })\n *\n * this.enroller.on('enrollment-started', () => {\n *      // enrollment has begun after 4 \"hey jibo\"s\n * })\n * ```\n * @class Enroller\n * @extends {EventEmitter}\n * @memberof module:jibo.services.asr\n */\n\nclass Enroller extends EventEmitter {\n    constructor(options, cb){\n        super(options);\n        this.callback = cb;\n        this.asr = Runtime.instance.asr;\n        this.speakerName = options.speakerName;\n        this.enrollmentType = options.enrollmentType;\n        this.actions = [];\n        this.nSavingAudios = 0;\n    }\n\n    onFinished() {\n        this.enroller.removeAllListeners('result');\n        this.enroller.removeAllListeners('need-more-data');\n\n        this.action.stop();\n        this.action.clear();\n    }\n\n    _consolidateResponse() {\n        if(!this.speakerResult) {\n            // no speaker result, heyJibo has returned but no speaker result, need to restart.\n            this.restart();\n            return;\n        }\n        if(this.speakerResult.speakerIdStatus === \"SAVING_AUDIO\") {\n            this.emit('saving-audio', ++this.nSavingAudios);\n            this.restart();\n        }\n\n        if(this.speakerResult.speakerIdStatus === \"NEED-4-MORE-UTTS\" ||\n           this.speakerResult.speakerIdStatus === \"NEED-3-MORE-UTTS\" ||\n           this.speakerResult.speakerIdStatus === \"NEED-2-MORE-UTTS\" ||\n           this.speakerResult.speakerIdStatus === \"NEED-1-MORE-UTTS\") {\n            // need more data, need to resend with new action.\n            // can't clear old action, because it'll clear itself with the\n            // composite reco\n            this.emit('need-more-data', this.speakerResult.speakerIdStatus[5]);\n            this.action = undefined;\n            this.restart();\n            return;\n        }\n        else if(this.speakerResult.speakerIdStatus === \"ENROLLMENT-STARTED\") {\n            this.emit('enrollment-started');\n            return;\n        }\n\n        if(this.speakerResult && this.speakerResult.speakerIdStatus === \"ENROLLMENT-DONE\") {\n            this.emit('result', this.speakerResult, this.heyJiboResult);\n            this.onFinished();\n            return;\n        }\n    }\n\n    _addSpeakerEnroller() {\n        let sendTD = (this.enrollmentType === \"text-dependent\");\n        this.enroller = new this.asr.SpeakerRecognizer(\n            {\n                enrollTD: sendTD,\n                enrollTI: !sendTD,\n                speakerName: this.speakerName,\n                timeout: 5000,\n                bargein: false,\n                nbest: 1,\n                inremental: false\n            }\n        );\n        this.enroller.on('result', (speakerIds) => {\n            this.speakerResult = speakerIds;\n        });\n        return `${this.enroller.pack()}`;\n    }\n\n    _addHeyJibo() {\n        let heyJibo = new this.asr.Recognizer(\n            {\n                path: 'hey_jibo',\n                timeout: 0,\n                bargein: true,\n                nbest: 1,\n                speakerName: \"\",\n                incremental: false,\n                speakerId: false\n            }\n        );\n        heyJibo.on('result', (result) => {\n            this.heyJiboResult = result;\n        });\n        return `${heyJibo.pack()}`;\n    }\n\n    start() {\n        if(!this.asr.isInitialized) {\n            console.warn('Running enroller without ASR service');\n            return true;\n        }\n\n        this.task = this._addSpeakerEnroller();\n        this.task = `${this._addHeyJibo()} * ${this.task}`;\n\n        this.action = this.asr.createAudioAction();\n        this.action.on('finished', (self) => {\n            this._consolidateResponse();\n            self.stop(() => {\n                self.clear();\n            });\n        });\n        this.action.start(this.task);\n    }\n\n    restart() {\n        this.action = this.asr.createAudioAction();\n        // timeout so that there's time to stop and clear first\n        // don't want to wait for stop timeout in case fragile service.\n        setTimeout(() => {\n            this.action.start(this.task);\n        }, 300);\n\n        this.action.on('finished', (self) => {\n            this._consolidateResponse();\n            self.stop(() => {\n                self.clear();\n            });\n        });\n    }\n\n    stop() {\n        this.onFinished();\n    }\n\n    update() {\n        return this.status;\n    }\n}\n\nexport default Enroller;\n"],"sourceRoot":"/source/"}