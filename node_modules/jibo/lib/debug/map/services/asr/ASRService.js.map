{"version":3,"sources":["services/asr/ASRService.js"],"names":[],"mappings":"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","file":"services/asr/ASRService.js","sourcesContent":["import ASRVariables from './ASRVariables';\nimport AudioAction from './AudioAction';\nimport SpeakerAction from './SpeakerAction';\nimport AudioSource from './AudioSource';\nimport Recognizer from './Recognizer';\nimport SpeakerRecognizer from './SpeakerRecognizer';\nimport EndOfSpeechRecognizer from './EndOfSpeechRecognizer';\nimport CloudRecognizer from './CloudRecognizer';\nimport Listener from './Listener';\nimport Enroller from './Enroller';\n\n/**\n * @description\n * Audio Speech Recognition module.\n *\n * ```\n * var asr = require('jibo').asr;\n * ```\n * @class ASRService\n * @module jibo/asr\n */\nclass ASRService {\n\n    constructor() {\n        this.isInitialized = false;\n        this.msgs = [];\n        this.listSpeakerCallbacks = [];\n        this.deleteSpeakerCallbacks = [];\n    }\n\n    get Recognizer() {\n        return Recognizer;\n    }\n\n    get EndOfSpeechRecognizer() {\n        return EndOfSpeechRecognizer;\n    }\n\n    get CloudRecognizer() {\n        return CloudRecognizer;\n    }\n\n    get SpeakerRecognizer() {\n        return SpeakerRecognizer;\n    }\n\n    init(service, cb) {\n        try {\n            this.socketUrl =  \"ws:\" + service.host + \":\" + service.port + \"/port\";\n            this.audioUrl = \"http://\" + service.host + \":\" + service.port + \"/audio_source\";\n            this.asrInterfaceUrl = \"http://\" + service.host + \":\" + service.port + \"/asr_interface\";\n            this.speakerInterfaceUrl = \"http://\" + service.host + \":\" + service.port + \"/spkr_id_interface\";\n\n            this.socket = new WebSocket(this.socketUrl);\n            this.loggingEnabled = false;\n\n            this.socket.onerror = (/*err*/) => {\n                console.warn(\"error connecting to server\");\n            };\n\n            this.socket.onmessage = (msg) => {\n                let data = JSON.parse(msg.data);\n                this.msgs.push(data);\n                while(!this.paused && this.msgs.length) {\n                    this.processNextMessage();\n                }\n            };\n            this.alsaSource = new AudioSource(this.audioUrl);\n            this.alsaSource.init((err) => {\n                if(err) {\n                    console.warn(err);\n                }\n                this.isInitialized = true;\n                cb();\n            });\n        }\n        catch(err){\n           console.warn(err);\n        }\n    }\n\n\n\n    /*\n     * Pauses ASR messages to preserve message order for other asynchronous events.\n     * @method module:jibo/asr~pause\n     */\n    pause() {\n        this.paused = true;\n    }\n\n    /*\n     * Finishes processing queued ASR messages then continues processing as they arrive.\n     * @method module:jibo/asr~resume\n     */\n    resume() {\n        this.paused = false;\n        while(this.msgs.length) {\n            this.processNextMessage();\n        }\n    }\n\n    /*\n     * Sends next msg in queue to processMessage.\n     * @method module:jibo/asr~processNextMessage\n     * @private\n     */\n    processNextMessage() {\n        this.processMessage(this.msgs.shift());\n    }\n\n    /*\n     * Processes data messages by sending and emitting to appropriate recipients\n     * @method module:jibo/asr~processMessage\n     * @param {Object} data\n     * @private\n     */\n    processMessage(data) {\n        if(this.loggingEnabled) {\n            console.log('----------------------');\n            console.log(data);\n        }\n\n        let action = ASRVariables.idToAction[data.task_id];\n        let recognizer = ASRVariables.idToRecognizer[data.simple_recog_name];\n\n        if(data.status === 'error') {\n            console.warn('ASR Service returned error response. Check ASR debug');\n            if(action) {\n                action.emit('error', data.message);\n            }\n            // throw new Error('unknown data.speaker_idstatus'); \n        }\n\n        if(data.speaker_idstatus === 'LISTING-SPEAKERS') {\n            this.listSpeakerCallback(data);\n        }\n        if(data.speaker_idstatus === 'DELETING-SPEAKER') {\n            this.deleteSpeakerCallback(data);\n        }\n        if(data.speaker_idstatus === 'ENROLLMENT-STARTED') {\n            recognizer.onResult(data);\n        }\n\n        if(data.simple_recog_name === 'Speaker ID TD') {\n            if(!action) {\n                console.warn(\"No action found\");\n                console.log(\"task_id: \", data.task_id);\n                console.log(\"recognizer:\", recognizer);\n            }\n            action.emit('speakerid', data);\n            return;\n        }\n\n        // TODO: take this out once it is fixed in ASR Service. \n        if(data.simple_recog_name === 'pcmwriter') {\n            return;\n        }\n\n        if(data.final_simple) {\n            if(!recognizer) {\n                console.warn(`Could not find recognizer with name ${data.simple_recog_name}`);\n                return;\n            }\n            recognizer.onResult(data);\n            return;\n        }\n\n        else if(data.final_composite) {\n            if(!action) {\n                console.warn(`Could not find action with name ${data.task_id}`);\n                return;\n            }\n            action.emit('finished', action);\n            action.clear();\n            return;\n        }\n\n        if(data.utterances && data.utterances.length > 0 && recognizer) {\n            if(recognizer.onIncremental) {\n                recognizer.onIncremental(data);\n            }\n        }\n    }\n\n\n   /**\n     * Creates a single AudioSource.\n     * @method module:jibo/asr~createWavSource\n     * @returns {AudioAction}\n     * @private\n     */\n    createWavSource(wavs) {\n        this.wavSource = new AudioSource(this.audioUrl, wavs);\n        return this.wavSource;\n    }\n\n    /**\n     * Creates a single AudioAction that will use initialized wav source as audio.\n     * @method module:jibo/asr~createAudioAction\n     * @returns {AudioAction}\n     * @private\n     */\n    createWavAction() {\n        let action = new AudioAction(this.asrInterfaceUrl);\n        this.wavSource.link(action);\n        return action;\n    }\n\n    /**\n     * Creates a single AudioAction.\n     * @method module:jibo/asr~createAudioAction\n     * @returns {AudioAction}\n     * @private\n     */\n    createAudioAction() {\n        let action = new AudioAction(this.asrInterfaceUrl);\n        this.alsaSource.link(action);\n        return action;\n    }\n\n    /**\n     * Creates a single AudioAction.\n     * @method module:jibo/asr~createAudioAction\n     * @returns {AudioAction}\n     * @private\n     */\n    createSpeakerAction() {\n        let action = new SpeakerAction(this.speakerInterfaceUrl);\n        this.alsaSource.link(action);\n        return action;\n    }\n\n\n    /**\n     * Creates a single AudioAction and returns in callback.\n     * @method module:jibo/asr~createAudioAction\n     * @returns {AudioAction}\n     * @private\n     */\n    createSpeakerActionAsync(cb) {\n        let action = new SpeakerAction(this.speakerInterfaceUrl);\n        this.alsaSource.link(action);\n        return cb(action);\n    }\n\n\n    /**\n     * Lists all speakers enrolled on connected Robot.\n     * @method module:jibo/asr~listEnrolledSpeakers\n     * @param cb {Function} the callback through which the speaker ID status \n     * (list/delete) will be returned.\n     */\n    listEnrolledSpeakers(cb) {\n        this.listSpeakerCallbacks.push(cb);\n        this.createSpeakerActionAsync((action) => {\n            action.listSpeakers();\n        });\n    }\n\n\n    /*\n     * Sends every subscribed callback listening for a listing-speakers \n     * ASR message the most recently received speaker list through ASR socket. \n     *                      then removes all callbacks in the subscribed list. \n     * @method module:jibo/asr~listSpeakerCallback\n     * @param data {Object} ASR socket data for speakers.\n     * @param data.speaker_idstatus {String} \"LISTING-SPEAKERS\"\n     * @param data.speaker_ids for Text-Dependent {Array} Array of speakers enrolled with 'hey jibo'\n     * @param data.speaker_ids for Text-Independent {Array} Array of speakers enrolled with free speech\n     * @private\n     */\n    listSpeakerCallback(data) {\n        this.listSpeakerCallbacks.forEach((cb) => {\n            cb(data);\n        });\n        this.listSpeakerCallbacks = [];\n    }\n\n\n    /**\n     * Deletes speaker from enrolled speakers. \n     * @method module:jibo/asr~deleteSpeaker\n     * @param speaker {String} the name of the speaker to be deleted\n     * @param textIdType {String} type of enrollment to be deleted. \"Text-Dependent\", \n     * \"Text-Independent\", \"TD+TI\" are only options\n     * @param cb {Function} the callback through which the speaker ID status \n     * (list/delete) will be returned.\n     */\n    deleteSpeaker(speaker, textIdType=\"TD+TI\", cb) {\n        this.deleteSpeakerCallbacks.push(cb);\n        this.createSpeakerActionAsync((action) => {\n            action.deleteSpeaker(speaker, textIdType);\n        });\n    }\n\n    /*\n     * Sends every subscribed callback listening for a delete-speakers \n     * ASR message the most recently received deleted speaker through ASR socket. \n     * then removes all callbacks in the subscribed list. \n     * @method module:jibo/asr~deleteSpeakerCallback\n     * @param data {Object} ASR socket data for speakers.\n     * @param data.speaker_idstatus {String} \"DELETING-SPEAKER\" or \"NO-SPEAKERS-TO-DELETE\"\n     * @private\n     */\n    deleteSpeakerCallback(data) {\n        this.deleteSpeakerCallbacks.forEach((cb) => {\n            cb(data);\n        });\n        this.deleteSpeakerCallbacks = [];\n    }\n\n    /*\n     * Logs every message recieved by ASR service\n     * @method module:jibo/asr~setLogging\n     * @param loggingEnabled {boolean} send true to log all ASR messages\n     * @public\n     */\n    setLogging(loggingEnabled) {\n        this.loggingEnabled = loggingEnabled;\n    }\n\n    /**\n     * Returns listener which emits listen events.\n     * @param options {Object} Listen options.\n     * @param options.bargein {boolean} `true` to use echo cancellation.\n     * @param options.heyJibo {boolean} `true` to listen for \"hey jibo\".\n     * @param options.detectEnd {boolean} `true` to listen for end of speech.\n     * @param options.incremental {boolean} `true` to listen for incremental results.\n     * @param options.authenticateSpeaker {String} Name of speaker, if applicable.\n     * @param rule {String}  The rule to use to parse audio input.\n     * @returns {module:jibo.services.asr.Listener} Listener with given recognition options.\n     * @method module:jibo/asr~createListener\n     */\n    createListener(options, rule) {\n        return new Listener(options, rule);\n    }\n\n    /**\n     * Returns enroller which emits enrollment events.\n     * @param options {Object} Enroller options.\n     * @param options.speakerName {String} name of speaker to enroll.\n     * @param options.enrollmentType {enum} 'text-dependent' or 'text-independent'.\n     * @returns {module:jibo.services.asr.Enroller} Enroller with given enrollment options.\n     * @method module:jibo/asr~createEnroller\n     */\n    createEnroller(options, cb) {\n        return new Enroller(options, cb);\n    }\n\n}\n\nASRService.BASE = \"/usr/local/share/asrservice/sharedresources/\";\n\nexport default ASRService;\n"],"sourceRoot":"/source/"}