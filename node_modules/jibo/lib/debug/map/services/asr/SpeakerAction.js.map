{"version":3,"sources":["services/asr/SpeakerAction.js"],"names":[],"mappings":";;;;;;AAAA,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,6BAAyB,gBAAgB,CAAC,CAAA;AAC1C,uBAA2B,QAAQ,CAAC,CAAA;AAEpC;IAA4B,iCAAY;IACpC,uBAAY,GAAG;QACX,iBAAO,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,cAAc,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QACrC,sBAAY,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;IAC5C,CAAC;IAED,wCAAgB,GAAhB,UAAiB,EAAE;QACf,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,8EAA8E;IAC9E,mDAAmD;IACnD,qCAAa,GAAb,UAAc,OAAU,EAAE,UAAU;QAAtB,uBAAU,GAAV,YAAU;QACpB,IAAI,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;QACnC,IAAI,IAAI,GAAG;YACP,MAAM,EAAE,QAAQ;YAChB,OAAO,EAAE,IAAI,CAAC,EAAE;YAChB,YAAY,EAAE,UAAU;YACxB,YAAY,EAAE,OAAO;SACxB,CAAC;QACF,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAC/C,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,oCAAY,GAAZ,UAAa,OAAU,EAAE,UAAU;QAAtB,uBAAU,GAAV,YAAU;QACnB,IAAI,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;QACnC,IAAI,IAAI,GAAG;YACP,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,EAAE;YAChB,YAAY,EAAE,UAAU,IAAI,OAAO;YACnC,YAAY,EAAE,OAAO;SACxB,CAAC;QACF,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC5B,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAC/C,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IACL,oBAAC;AAAD,CAjDA,AAiDC,CAjD2B,qBAAY,GAiDvC;AAED;kBAAe,aAAa,CAAC","file":"services/asr/SpeakerAction.js","sourcesContent":["import * as uuid from 'uuid';\nimport ASRVariables from './ASRVariables';\nimport {EventEmitter} from 'events';\n\nclass SpeakerAction extends EventEmitter {\n    constructor(url) {\n        super();\n        this.httpInterface = url;\n        this.id = 'spkr-action-' + uuid.v4();\n        ASRVariables.idToAction[this.id] = this;\n    }\n    \n    setAudioSourceId(id) {\n        this.audioSourceId = id;\n    }\n\n    /*\n     * Deletes a speaker from the list of enrolled speakers.\n     * @param {String} speaker - the name of the speaker to be deleted (empty deletes all speakers)\n     * @param {String} textIdType - the type of enrollment to be deleted (\"TD\" or \"TI\" for \"text dependent\" or \"text independent\")\n     */\n    // TODO: add warning somewhere \"you are about to delete all enrolled speakers\"\n    // necessary? because these are only for jibo apps \n    deleteSpeaker(speaker=\"\", textIdType) {\n        let request = new XMLHttpRequest();\n        let body = {\n            action: \"delete\",\n            task_id: this.id,\n            spkr_id_type: textIdType,\n            speaker_name: speaker\n        };\n        body = JSON.stringify(body);\n        request.open(\"POST\", this.httpInterface, true);\n        request.send(body);\n    }\n\n    /*\n     * Lists speakers from the available enrolled speakers. \n     * @param {String} speaker - the name of the speaker to be listed (will return types (td, ti) of enrollment available (empty lists all speakers)\n     * @param {String} textIdType - the type of enrollment to be listed (\"TD\" or \"TI\" for \"text dependent\" or \"text independent\")\n     */\n    listSpeakers(speaker=\"\", textIdType) {\n        let request = new XMLHttpRequest();\n        let body = {\n            action: \"list\",\n            task_id: this.id,\n            spkr_id_type: textIdType || \"TD+TI\",\n            speaker_name: speaker\n        };\n        body = JSON.stringify(body);\n        request.open(\"POST\", this.httpInterface, true);\n        request.send(body);\n    }\n}\n\nexport default SpeakerAction;"],"sourceRoot":"/source/"}