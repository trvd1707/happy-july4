{"version":3,"sources":["services/SystemManager.js"],"names":[],"mappings":"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","file":"services/SystemManager.js","sourcesContent":["import {EventEmitter} from 'events';\nimport * as path from \"path\";\nimport * as semver from \"semver\";\n\nimport PathUtils from \"../utils/PathUtils\";\n\n\n/**\n * The various event types that system manager's notification system emits.\n * @alias module:jibo/systemManager~NotificationEvents\n * @enum {String}\n */\nconst NotificationEvents = {\n    SHUTDOWN: 'shutdown'\n    // @TODO - add any others here\n};\n\n\n/**\n * @class SystemManager\n * @memberof module:jibo.services\n * @private\n */\nclass SystemManager extends EventEmitter {\n    constructor() {\n        super();\n        this.notifications = {\n            type: \"\",           // Arbitrary string identifying the type of data associated with this notification\n            channel: \"\",        // Notification channel name. One of: \"GENERAL\", \"NETWORK\", \"POWER_MANAGEMENT\", \"HARDWARE_FAULT\"\n            ts: [0, 0],         // chronometer timestamp associated with this notification\n            data: { }           // type-specific notification data\n        } ;\n\n        // Provide external access to these enums\n        this.NotificationEvents = NotificationEvents;\n    }\n\n    static get NotificationEvents() {\n        return NotificationEvents;\n    }\n\n    init(service, cb) {\n        this.httpInterface = \"http://\" + service.host + \":\" + service.port;\n        this.socketUrl = \"ws:\" + service.host + \":\" + service.port;\n\n        this.loggingEnabled = false;\n\n        this.getVersion( (error, currentVersion) => {\n            if (error) {\n                // couldn't retrieve version? hmm...\n                cb(error);\n                return;\n            }\n\n            // Use semver version check\n            let dir = PathUtils.findRoot(__dirname);\n            let jiboVersion = require(path.resolve(dir, 'package.json')).platform;\n            if(!semver.satisfies(currentVersion, jiboVersion)) {\n                let errorMsg = \"Platform version check failed! Skill allows version \" + jiboVersion + \" but your current version is \" + currentVersion + \".\";\n                cb(errorMsg);\n            }\n            else {\n                // create out notification socket\n                this._createNotificationSocket(cb)\n            }\n        });\n    }\n\n    setLogging(logging) {\n        this.loggingEnabled = logging;\n    }\n\n\n    _createNotificationSocket(cb) {\n        this.NotificationSocket = new WebSocket(this.socketUrl + \"/system_notifications\");\n        this.NotificationSocket.onerror = () => {\n            console.error(`Error opening system notifications socket at ${this.socketUrl}/system_notifications`);\n        };\n        this.NotificationSocket.onmessage = (event) => {\n            try {\n                this.notifications = JSON.parse(event.data);\n                // @TODO - check for shutdown type here\n                this.emit(NotificationEvents.SHUTDOWN, this.notifications);\n            }\n            catch(e) {\n                console.error('System notification event data is not JSON format.');\n            }\n        };\n        cb();\n    }\n\n\n    /**\n     * getVersion - Gets current version of platform build if connected to robot (raw numbers xx.xx.xx).\n     * @function module:jibo/systemManager~getVersion\n     *\n     * @param {function} cb Callback that notifies the caller that the\n     *                      version was retrieved; If successful, returns version; otherwise, error string.\n     **/\n    getVersion(callback) {\n\n        this.getDisplayVersion( (error, version) => {\n            // parse out number\n            if (version) {\n                let verMatch = version.trim().match('(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)');\n                callback(null, verMatch[0]);\n            }\n            else {\n                callback(\"Could not retrieve platform version from \" + version, null);\n            }\n        });\n   }\n\n    /**\n     * getDisplayVersion - Gets current display-friendly version of platform build if connected to robot.\n     * @function module:jibo/systemManager~getDisplayVersion\n     *\n     * @param {function} cb Callback that notifies the caller that the\n     *                      version was retrieved; If successful, returns version; otherwise, error string.\n     **/\n    getDisplayVersion(callback) {\n        this._handleGET(\"/version\", \"version\", callback);\n    }\n\n    // @TODO - document and mark @private\n    getCredentials(callback) {\n        this._handleGET(\"/credentials\", undefined, callback);\n    }\n\n    // @TODO- document and mark @private\n    setCredentials(creds, callback) {\n        if(!creds) {\n            callback(\"No credentials given\");\n            return;\n        }\n\n        let request = new XMLHttpRequest();\n        let body = \"\";\n        try {\n            body = JSON.stringify(creds);\n        }\n        catch(e) {\n            callback(\"Credentials are not valid JSON\");\n            return;\n        }\n\n        request.open(\"POST\", this.httpInterface + \"/credentials\", true);\n        request.onreadystatechange = () => {\n            if(request.readyState == 4) {\n                if (request.status == 204) {\n                    callback(); // success!\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'System Manager is unavailable';\n                    if (request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    callback(msg);\n                }\n            }\n        };\n        if(this.loggingEnabled) {\n            console.log(\"credentials requested\");\n            console.log(body);\n        }\n        request.send(body);\n    }\n\n\n    // @TODO - document and mark @private\n    getMode(callback) {\n        this._handleGET(\"/mode\", \"mode\", callback);\n    }\n\n    // @TODO- document and mark @private\n    setMode(_mode, callback) {\n        if(!_mode) {\n            callback(\"No mode given\");\n            return;\n        }\n\n        let request = new XMLHttpRequest();\n        let body = \"\";\n        try {\n            body = JSON.stringify(\n                {\n                    mode: _mode\n                });\n        }\n        catch(e) {\n            callback(\"Mode request is not valid JSON\");\n            return;\n        }\n\n        request.open(\"POST\", this.httpInterface + \"/mode\", true);\n        request.onreadystatechange = () => {\n            if(request.readyState == 4) {\n                if (request.status == 204) {\n                    callback(); // success!\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'System Manager is unavailable';\n                    if (request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    callback(msg);\n                }\n            }\n        };\n        if(this.loggingEnabled) {\n            console.log(\"mode requested\");\n            console.log(body);\n        }\n        request.send(body);\n    }\n\n\n    /**\n     * checkForUpdates - Returns a current list of available platform updates.\n     * @function module:jibo/systemManager~checkForUpdates\n     *\n     * @param {function} cb Callback that notifies the caller of any updates; If successful,\n     *                      returns the metadata associated with each update (if any exist); otherwise, error string.\n     *\n     * @private\n     **/\n    checkForUpdates(callback) {\n        this._handleGET(\"/update\", \"updates\", callback);\n    }\n\n\n    /**\n     * @private\n     **/\n    downloadUpdates(data, callback) {\n        if (!data || !data.hasOwnProperty('ids') || data.ids.length === 0) {\n            callback('No IDs given.');\n            return;\n        }\n\n        let request = new XMLHttpRequest();\n        request.open(\"PUT\", this.httpInterface + \"/update\" , true); // true == async\n\n        // the download callback will be a stream of update statuses (we may change this to websocket later)\n        // so we have to keep track of the previous statuses that we want to parse out of the newer stream\n        request.previousText = \"\";\n\n        request.onreadystatechange = () => {\n            if(request.readyState > 2) {\n                if(request.status === 200) {\n\n                    if (request.responseText) {\n\n                        // strip off the last bit from the previous bit\n                        let newResponse = request.responseText.substring(request.previousText.length);\n\n                        // now make sure we have the last '{}' entry (some can be cut off at the end so some ugly\n                        // parsing is necessary here)\n                        let lastIdx = newResponse.lastIndexOf('}');\n\n                        if (lastIdx !== -1) {\n                            lastIdx += 1; // need the closing curly bracket\n                            let firstIdx = newResponse.lastIndexOf('{', lastIdx);\n                            newResponse = newResponse.substring(firstIdx, lastIdx);\n                            //console.log(\"new response = \" + newResponse);\n                            let cbData = JSON.parse(newResponse);\n                            //if (cbData.status === \"finished\") {\n                            //    console.log(\"responseText\");\n                            //    console.log(request.responseText);\n                            //    console.log(\"previousText\");\n                            //    console.log(request.previousText);\n                            //    console.log(cbData);\n                            //}\n                            callback(null, cbData);\n                        }\n\n                        // save off for next time\n                        request.previousText = request.responseText;\n\n                    }\n                    else {\n                        callback('No data received from OTA service', null);\n                    }\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'System Manager is unavailable';\n                    if(request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    callback(msg, null);\n                }\n            }\n        };\n\n        this.getVersion((error, version) => {\n            if (error) {\n                callback(\"Cannot retrieve platform version to check compatibility. Download aborted.\", null);\n            }\n            else {\n\n                let body = {};\n                if (version === \"0.12.1\") {\n\n                    // for build 0.12.1, we could only send one update at a time\n                    body = {\n                        \"id\": data.ids[0]\n                    };\n                }\n                else {\n                    body = {\n                        \"ids\": data.ids\n                    };\n                }\n                request.send(JSON.stringify(body));\n            }\n        });\n    }\n\n    /**\n     * @private\n     **/\n    installUpdates(data, callback) {\n        if (!data || !data.hasOwnProperty('ids') || data.ids.length === 0) {\n            callback('No IDs given.');\n            return;\n        }\n\n        let request = new XMLHttpRequest();\n\n        request.open(\"POST\", this.httpInterface + \"/update\", true);\n        request.onreadystatechange = () => {\n            if(request.readyState == 4) {\n                if (request.status == 204) {\n                    callback(); // success!\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'System Manager is unavailable';\n                    if (request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    callback(msg);\n                }\n            }\n        };\n\n        this.getVersion((error, version) => {\n            if (error) {\n                callback(\"Cannot retrieve platform version to check compatibility. Download aborted.\", null);\n            }\n            else {\n\n                let body = {};\n                if (version === \"0.12.1\") {\n\n                    // for build 0.12.1, we could only send one update at a time\n                    body = {\n                        \"id\": data.ids[0]\n                    };\n                }\n                else {\n                    body = {\n                        \"ids\": data.ids\n                    };\n                }\n\n                if(this.loggingEnabled) {\n                    console.log(\"install requested\");\n                    console.log(body);\n                }\n\n                request.send(JSON.stringify(body));\n            }\n        });\n    }\n\n    //\n    // private http GET helper; assumes return status code is 200 (OK)\n    _handleGET(url, property, callback) {\n        let request = new XMLHttpRequest();\n        request.open(\"GET\", this.httpInterface + url, true);\n\n        request.onreadystatechange = () => {\n            if(request.readyState == 4) {\n                if (request.status == 200) {\n                    let response = JSON.parse(request.response);\n                    let data = (property ? response[property] : response);\n                    if (this.loggingEnabled) {\n                        console.log(property);\n                        console.log(data);\n                    }\n                    callback(null, data);\n                }\n                else {\n                    // failure if anything else\n                    let msg = 'System Manager is unavailable';\n                    if (request.statusText !== undefined && request.statusText !== \"\") {\n                        msg = request.statusText;\n                    }\n\n                    callback(msg, null);\n                }\n            }\n        };\n\n        request.send();\n    }\n\n    /**\n     * getIdentity - Gets the identity of the robot if connected.\n     * @function module:jibo/systemManager~getIdentity (object containing name and WiFi MAC address)\n     *\n     * @param {function} cb Callback that notifies the caller that the\n     *                      identity was retrieved; If successful, returns object containing name and MAC\n     *                      address; otherwise, error string.\n     **/\n    getIdentity(callback) {\n\n        this._handleGET(\"/identity\", undefined, (error, response) => {\n            if (error) {\n                callback(\"Could not retrieve identity from Jibo\", null);\n            }\n            else {\n                callback(null, {\"name\": response.name, \"wifi_mac\": response.wifi_mac});\n            }\n        });\n    }\n}\n\nexport default SystemManager;\n"],"sourceRoot":"/source/"}