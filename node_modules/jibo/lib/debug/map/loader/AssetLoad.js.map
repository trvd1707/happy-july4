{"version":3,"sources":["loader/AssetLoad.ts"],"names":[],"mappings":"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","file":"loader/AssetLoad.js","sourcesContent":["import {EventEmitter} from 'events';\nimport Task from './tasks/Task';\nimport {Complete} from './tasks/Task';\nimport AssetManager from './AssetManager';\nimport AssetUtils from './AssetUtils';\nimport LoaderError from './LoaderError';\n\nexport interface Asset {\n    id?:string;\n    cache?:boolean;\n    complete?:Complete;\n}\n\nexport interface ITaskDefinition {\n    test: (asset:Asset) => boolean;\n    priority: number;\n    prototype: any;\n    new (manager:AssetManager, asset:Asset) : Task;\n}\n\ninterface SetupOptions {\n    startAll?:boolean;\n    autoStart?:boolean;\n    cacheAll?:boolean;\n}\n\n/**\n * Class that represents a single multi load.\n * @class AssetLoad\n * @memberof module:jibo/loader\n */\nclass AssetLoad extends EventEmitter\n{\n    // @if DEBUG\n    /**\n     * Debugging Keep track of how many we've created\n     * @type {int}\n     * @name module:jibo/loader.AssetLoad.ID\n     * @static\n     * @private\n     */\n    private static ID:number;\n    // @endif\n\n    public manager:AssetManager;\n    public id:number;\n    public mode:number;\n    public startAll:boolean;\n    public tasks:Array<Task>;\n    public results:any;\n    public running:boolean;\n    public numLoaded:number;\n    public total:number;\n    public cacheAll:boolean;\n\n    /**\n     * @constructor\n     * @param {module:jibo/loader.AssetManager} manager Reference to the manager.\n     */\n    constructor(manager:AssetManager)\n    {\n        super();\n\n        /**\n         * Reference to the Task Manager.\n         * @type {module:jibo/loader.AssetManager}\n         * @name module:jibo/loader.AssetLoad#manager\n         */\n        this.manager = manager;\n\n        // @if DEBUG\n        this.id = AssetLoad.ID++;\n        // @endif\n\n        /**\n         * How to display the results, either as single (0), map (1) or list (2).\n         * @type {int}\n         * @name module:jibo/loader.AssetLoad#mode\n         * @default 1\n         */\n        this.mode = MAP_MODE;\n\n        /**\n         * If we should run the tasks in parallel (`true`) or serial (`false`).\n         * @type {Boolean}\n         * @name module:jibo/loader.AssetLoad#startAll\n         * @default true\n         */\n        this.startAll = true;\n\n        /**\n         * `true` if we should try to cache all items in the load.\n         * @type {Boolean}\n         * @name module:jibo/loader.AssetLoad#cacheAll\n         * @default false\n         */\n        this.cacheAll = false;\n\n        /**\n         * The list of tasks to load.\n         * @type {Array<module:jibo/loader.Task>}\n         * @name module:jibo/loader.AssetLoad#tasks\n         */\n        this.tasks = [];\n\n        /**\n         * The results to return when we're done.\n         * @type {Array|Object}\n         * @name module:jibo/loader.AssetLoad#results\n         */\n        this.results = null;\n\n        /**\n         * `true` if the load is currently running.\n         * @type {Boolean}\n         * @name module:jibo/loader.AssetLoad#running\n         * @default false\n         */\n        this.running = false;\n\n        /**\n         * The total number of assets loaded.\n         * @type {int}\n         * @name module:jibo/loader.AssetLoad#numLoaded\n         * @default 0\n         */\n        this.numLoaded = 0;\n\n        /**\n         * The total number of assets.\n         * @type {int}\n         * @name module:jibo/loader.AssetLoad#total\n         * @default 0\n         */\n        this.total = 0;\n    }\n\n    /**\n     * When an asset is finished.\n     * @event module:jibo/loader.AssetLoad#taskDone\n     * @param {*} result The loader result.\n     * @param {object} originalAsset The original load asset.\n     * @param {array} assets Collection to add additional assets to.\n     */\n\n    /**\n     * When all assets have been completely loaded.\n     * @event module:jibo/loader.AssetLoad#complete\n     * @param {Array|Object} results The results of load.\n     */\n\n    /**\n     * Checks how many assets have finished loading.\n     * @event module:jibo/loader.AssetLoad#progress\n     * @param {number} percentage The amount loaded from 0 to 1.\n     */\n\n    // @if DEBUG\n    /**\n     * Debugging purposes.\n     * @method module:jibo/loader.AssetLoad#toString\n     * @return {String}\n     */\n    toString(): string\n    {\n        return \"[AssetLoad (index: \" + this.id + \")]\";\n    }\n    // @endif\n\n    /**\n     * Initializes the Load.\n     * @method module:jibo/loader.AssetLoad#setup\n     * @param {object|array} assets The collection of assets to load.\n     * @param {object} [options] The loading options.\n     * @param {Boolean} [options.startAll=true] `true` to start all load requests at once, false to start a chain of loads.\n     * @param {Boolean} [options.autoStart=true] `true` to start running automatically.\n     * @param {Boolean} [options.cacheAll=false] `true` to cache all load results, `false` to allow assets to cache themselves.\n     */\n    setup(assets:Array<Asset>|{[id:string]: Asset}, options?:SetupOptions): void\n    {\n        // Save options to load\n        this.startAll = options.startAll;\n        this.cacheAll = options.cacheAll;\n\n        // Update the results mode and tasks\n        this.mode = this.addTasks(assets);\n\n        // Set the default container for the results\n        this.results = this.getAssetsContainer(this.mode);\n\n        // Start running\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Starts the load process.\n     * @method module:jibo/loader.AssetLoad#start\n     */\n    start(): void\n    {\n        // Empty load percentage\n        this.emit('progress', 0);\n\n        // Keep track if we're currently running\n        this.running = true;\n        this.nextTask();\n    }\n\n    /**\n     * Sets back to the original state.\n     * @method module:jibo/loader.AssetLoad#reset\n     */\n    reset()\n    {\n        this.removeAllListeners('complete');\n        this.removeAllListeners('progress');\n        this.removeAllListeners('taskDone');\n        // Cancel any tasks\n        this.tasks.forEach((task) =>\n        {\n            task.status = Task.FINISHED;\n            task.destroy();\n        });\n        this.total = 0;\n        this.numLoaded = 0;\n        this.mode = MAP_MODE;\n        this.tasks.length = 0;\n        this.results = null;\n        this.startAll = true;\n        this.cacheAll = false;\n        this.running = false;\n    }\n\n    /**\n     * Creates a list of tasks from assets.\n     * @method  module:jibo/loader.AssetLoad#addTasks\n     * @private\n     * @param  {Object|Array} assets The assets to load.\n     */\n    addTasks(assets:Asset|Array<Asset>|{[id:string]: Asset}): number\n    {\n        let asset;\n        let mode = MAP_MODE;\n\n        // Apply the defaults incase this is a single\n        // thing that we're trying to load\n        assets = this.applyDefaults(assets);\n\n        let isSingle = this.getTaskByAsset(assets);\n\n        if (isSingle)\n        {\n            this.addTask(<Asset>assets);\n            return SINGLE_MODE;\n        }\n        else\n        {\n            let task;\n            if (Array.isArray(assets))\n            {\n                for (let i = 0; i < assets.length; i++)\n                {\n                    asset = this.applyDefaults(assets[i]);\n                    task = this.addTask(asset);\n                    if (!task.id)\n                    {\n                        // If we don't have the id to return\n                        // a mapped result, we'll fallback to array results\n                        mode = LIST_MODE;\n                    }\n                }\n            }\n            else if (AssetUtils.isPlain(assets))\n            {\n                for (let id in assets)\n                {\n                    asset = this.applyDefaults(assets[id]);\n                    asset.id = id;\n                    task = this.addTask(asset);\n                }\n            }\n            else\n            {\n                // @if DEBUG\n                console.error(\"Asset type unsupported\", asset);\n                // @endif\n            }\n        }\n        return mode;\n    }\n\n    /**\n     * Converts assets into object defaults.\n     * @method module:jibo/loader.AssetLoad#applyDefaults\n     * @private\n     * @static\n     * @param  {*} asset The function to convert.\n     * @return {Object} The object asset to use.\n     */\n    applyDefaults(asset:any):any\n    {\n        // convert to a LoadTask\n        if (isString(asset))\n        {\n            return {\n                src: asset\n            };\n        }\n        // convert to a FunctionTask\n        else if (isFunction(asset))\n        {\n            return {\n                async: asset\n            };\n        }\n        return asset;\n    }\n\n    /**\n     * Loads a single asset.\n     * @method module:jibo/loader.AssetLoad#addTask\n     * @private\n     * @param {Object} asset The asset to load.\n     *      Can either be an object, URL/path, or async function.\n     * @return {Task} New task instance.\n     */\n    addTask(asset:Asset):Task\n    {\n        let TaskClass = this.getTaskByAsset(asset);\n        let task;\n        if (TaskClass)\n        {\n            if (asset.cache === undefined && this.cacheAll)\n            {\n                asset.cache = true;\n            }\n            task = new TaskClass(this.manager, asset);\n            this.tasks.push(task);\n            ++this.total;\n        }\n        else\n        {\n            // @if DEBUG\n            console.error(\"Unable to find a task definition for asset\", asset);\n            // @endif\n        }\n        return task;\n    }\n\n    /**\n     * Gets the Task definition for an asset.\n     * @method  module:jibo/loader.AssetLoad#getTaskByAsset\n     * @private\n     * @static\n     * @param  {Object} asset The asset to check.\n     * @return {Function} The Task class.\n     */\n    getTaskByAsset(asset:Asset):ITaskDefinition\n    {\n        let TaskClass:ITaskDefinition;\n        let taskDefs = this.manager.taskDefs;\n\n        // Loop backwards to get the registered tasks first\n        // then will default to the basic Loader task\n        for (let i = 0, len = taskDefs.length; i < len; i++)\n        {\n            TaskClass = taskDefs[i];\n            if (TaskClass.test(asset))\n            {\n                return TaskClass;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Runs the next task that's waiting.\n     * @method  module:jibo/loader.AssetLoad#nextTask\n     * @private\n     */\n    nextTask()\n    {\n        let tasks = this.tasks;\n        for (let i = 0; i < tasks.length; i++)\n        {\n            let task = tasks[i];\n            if (task.status === Task.WAITING)\n            {\n                task.status = Task.RUNNING;\n                task.start(this.taskDone.bind(this, task));\n\n                // If we aren't running in parallel, then stop\n                if (!this.startAll)\n                {\n                    return;\n                }\n            }\n        }\n    }\n\n    /**\n     * Handler when a task has completed.\n     * @method  module:jibo/loader.AssetLoad#taskDone\n     * @private\n     * @param  {Task} task Reference to original task.\n     * @param {LoaderError} err The error thrown by load.\n     * @param  {*} [result] The result of load.\n     */\n    taskDone(task:Task, err:LoaderError, result:any = null): void\n    {\n        // Ignore if we're destroyed\n        if (!this.running)\n        {\n            return;\n        }\n\n        let index = this.tasks.indexOf(task);\n\n        // Task was already removed, because a clear\n        if (index === -1)\n        {\n            return;\n        }\n\n        // Remove the completed task\n        this.tasks.splice(index, 1);\n\n        // Assets\n        let assets = [];\n\n        // Handle the file load tasks\n        if (result)\n        {\n            // Handle the result\n            switch (this.mode)\n            {\n                case SINGLE_MODE:\n                    this.results = result;\n                    break;\n                case LIST_MODE:\n                    this.results.push(result);\n                    break;\n                case MAP_MODE:\n                    this.results[task.id] = result;\n                    break;\n            }\n\n            // Should we cache the task?\n            if (task.cache)\n            {\n                this.manager.cache.write(task.id, result);\n            }\n        }\n\n        // If the task has a complete method\n        // we'll make sure that gets called\n        // with a reference to the tasks\n        // can potentially add more\n        if (task.complete)\n        {\n            task.complete(err, result, task.original, assets);\n        }\n\n        if (!err)\n        {\n            this.emit('taskDone', result, task.original, assets);\n        }\n\n        task.destroy();\n\n        // Add new assets to the things to load\n        let mode = this.addTasks(assets);\n\n        // Update the progress total\n        this.emit('progress', ++this.numLoaded / this.total);\n\n        // Check to make sure if we're in\n        // map mode, we keep it that way\n        if (this.mode === MAP_MODE && mode !== this.mode)\n        {\n            // @if DEBUG\n            console.error(\"Load assets require IDs to return mapped results\", assets);\n            // @endif\n            // @if RELEASE\n            console.error(\"Assets require IDs\", assets);\n            // @endif\n            return;\n        }\n\n        // There was an error, pass it along\n        if (err)\n        {\n            // @if DEBUG\n            console.error('Unable to load asset', task.original);\n            // @endif\n\n            this.emit('complete', err, null);\n            return;\n        }\n\n        if (this.tasks.length)\n        {\n            // Run the next task\n            this.nextTask();\n        }\n        else\n        {\n            // We're finished!\n            this.emit('complete', err, this.results);\n        }\n    }\n\n    /**\n     * Gets an empty assets collection.\n     * @method module:jibo/loader.AssetLoad#getAssetsContainer\n     * @private\n     * @param {int} mode The mode.\n     * @return {Array|Object|null} Empty container for assets.\n     */\n    getAssetsContainer(mode:number): Array<Asset>|{[id:string]: Asset}\n    {\n        switch (mode)\n        {\n            case SINGLE_MODE:\n                return null;\n            case LIST_MODE:\n                return [];\n            case MAP_MODE:\n                return {};\n        }\n    }\n\n    /**\n     * Destroys this and discards.\n     * @private\n     * @method module:jibo/loader.AssetLoad#destroy\n     */\n    destroy()\n    {\n        this.removeAllListeners();\n        this.reset();\n        this.tasks = null;\n        this.manager = null;\n    }\n}\n\n/**\n * The result is a single result.\n * @property {int} module:jibo/loader.AssetLoad.SINGLE_MODE\n * @private\n * @final\n * @static\n * @default 0\n */\nconst SINGLE_MODE = 0;\n\n/**\n * The result is a map of result objects.\n * @property {int} module:jibo/loader.AssetLoad.MAP_MODE\n * @private\n * @final\n * @static\n * @default 1\n */\nconst MAP_MODE = 1;\n\n/**\n * The result is an array of result objects.\n * @property {int} module:jibo/loader.AssetLoad.LIST_MODE\n * @private\n * @final\n * @static\n * @default 2\n */\nconst LIST_MODE = 2;\n\n/**\n * Checks if an object is a String type.\n * @method module:jibo/loader.AssetLoad.isString\n * @private\n * @param  {*}  obj The object to check.\n * @return {Boolean} `true` if object is a String, `false` otherwise.\n */\nfunction isString(obj)\n{\n    return typeof obj === \"string\";\n}\n\n/**\n * Checks if an object is a function type.\n * @method module:jibo/loader.AssetLoad.isFunction\n * @private\n * @param  {*}  obj The object to check.\n * @return {Boolean} `true` if object is a function, `false` otherwise.\n */\nfunction isFunction(obj)\n{\n    return typeof obj === \"function\";\n}\n\nexport default AssetLoad;\n"],"sourceRoot":"/source/"}