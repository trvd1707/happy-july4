{"version":3,"sources":["loader/AssetCache.ts"],"names":[],"mappings":";AACA,2BAAuB,cAAc,CAAC,CAAA;AAEtC;;;;GAIG;AACH;IAII;QAEI;;;;;WAKG;QACH,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,yBAAI,GAAJ,UAAK,EAAS;QAEV,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC;IACnC,CAAC;IAED;;;;;OAKG;IACH,0BAAK,GAAL,UAAM,EAAS,EAAE,OAAW;QAExB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CACpB,CAAC;YACG,OAAO,CAAC,IAAI,CAAC,2CAA2C,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;YACrE,kBAAkB;YAClB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACpB,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACH,2BAAM,GAAN,UAAO,KAAkB;QAErB,IAAI,EAAE,GAAU,OAAO,KAAK,KAAK,QAAQ,GAAW,KAAK,GAAW,KAAM,CAAC,EAAE,CAAC;QAE9E,+BAA+B;QAC/B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CACR,CAAC;YACG,MAAM,CAAC;QACX,CAAC;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC7B,EAAE,CAAC,CAAC,MAAM,CAAC,CACX,CAAC;YACG,wBAAwB;YACxB,EAAE,CAAC,CAAC,oBAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAC/B,CAAC;gBACG,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CACvB,CAAC;oBACG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;gBACpC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAC/B,CAAC;gBACG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACvC,CAAC;YAED,IAAI,CACJ,CAAC;gBACG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC/B,CAAC;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,kCAAa,GAAb,UAAc,MAAM;QAEhB,uCAAuC;QACvC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CACZ,CAAC;YACG,MAAM,CAAC;QACX,CAAC;QAED,8CAA8C;QAC9C,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CACnB,CAAC;YACG,MAAM,CAAC,OAAO,EAAE,CAAC;QACrB,CAAC;QAED,uCAAuC;QACvC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,KAAK,CAAC,CAC7B,CAAC;YACG,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;QACpB,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,0BAAK,GAAL;QAEI,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAC3B,CAAC;YACG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACpB,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,4BAAO,GAAP;QAEI,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IACL,iBAAC;AAAD,CAlIA,AAkIC,IAAA;AAED;kBAAe,UAAU,CAAC","file":"loader/AssetCache.js","sourcesContent":["import {Asset} from './AssetLoad';\nimport AssetUtils from './AssetUtils';\n\n/**\n * Manages a cache for assets.\n * @class AssetCache\n * @memberof module:jibo/loader\n */\nclass AssetCache\n{\n    public _cache:{[id:string]: any};\n\n    constructor()\n    {\n        /**\n         * The cache containing assets.\n         * @type {Object}\n         * @name module:jibo/loader.AssetCache#_cache\n         * @private\n         */\n        this._cache = {};\n    }\n\n    /**\n     * Retrieves a single asset from the cache.\n     * @method module:jibo/loader.AssetCache#read\n     * @param {String} id The asset to get.\n     */\n    read(id:string): any\n    {\n        return this._cache[id] || null;\n    }\n\n    /**\n     * Adds a single asset to the cache.\n     * @method module:jibo/loader.AssetCache#write\n     * @param {String} id The id to save the asset as.\n     * @param {*} content The asset content to save.\n     */\n    write(id:string, content:any): void\n    {\n        if (this._cache[id])\n        {\n            // @if DEBUG\n            console.warn(\"AssetCache: overwriting existing asset: '\" + id + \"'\");\n            // @endif\n            // Remove it first\n            this.delete(id);\n        }\n        this._cache[id] = content;\n    }\n\n    /**\n     * Removes a single asset from the cache.\n     * @method module:jibo/loader.AssetCache#delete\n     * @param {Object|String} asset The asset to remove.\n     */\n    delete(asset:Asset|string): void\n    {\n        let id:string = typeof asset === \"string\" ? <string>asset : (<Asset>asset).id;\n\n        // If we don't have an ID, stop\n        if (!id)\n        {\n            return;\n        }\n\n        let result = this._cache[id];\n        if (result)\n        {\n            // Destroy mapped result\n            if (AssetUtils.isPlain(result))\n            {\n                for (let key in result)\n                {\n                    this.destroyResult(result[key]);\n                }\n            }\n            // Destroy list of results\n            else if (Array.isArray(result))\n            {\n                result.forEach(this.destroyResult);\n            }\n            // Destory single\n            else\n            {\n                this.destroyResult(result);\n            }\n            delete this._cache[id];\n        }\n    }\n\n    /**\n     * Destroys a result object.\n     * @method module:jibo/loader.AssetCache#destroyResult\n     * @private\n     * @param  {*} result The object to destroy.\n     */\n    destroyResult(result): void\n    {\n        // Ignore null results or empty objects\n        if (!result)\n        {\n            return;\n        }\n\n        // Destroy any objects with a destroy function\n        if (result.destroy)\n        {\n            result.destroy();\n        }\n\n        // Clear images if we have an HTML node\n        if (result.tagName === \"IMG\")\n        {\n            result.src = \"\";\n        }\n    }\n\n    /**\n     * Removes all assets from the cache.\n     * @method module:jibo/loader.AssetCache#empty\n     */\n    empty(): void\n    {\n        for (let id in this._cache)\n        {\n            this.delete(id);\n        }\n    }\n\n    /**\n     * Destroys the cache. Don't use after this.\n     * @method module:jibo/loader.AssetCache#destroy\n     */\n    destroy(): void\n    {\n        this.empty();\n        this._cache = null;\n    }\n}\n\nexport default AssetCache;\n"],"sourceRoot":"/source/"}