{"version":3,"sources":["loader/AssetManager.ts"],"names":[],"mappings":"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","file":"loader/AssetManager.js","sourcesContent":["import AssetCache from './AssetCache';\nimport Task from './tasks/Task';\nimport AssetLoad from './AssetLoad';\nimport {Asset, ITaskDefinition} from './AssetLoad';\nimport Loader from './Loader';\nimport LoaderError from './LoaderError';\n\nexport interface LoadOptions {\n    complete?: Function;\n    progress?: Function;\n    taskDone?: Function;\n    cacheAll?: boolean;\n    startAll?: boolean;\n    autoStart?: boolean;\n}\n\n/**\n * Gets the progress of the load.\n * @callback module:jibo/loader.AssetManager~progressCallback\n * @param {Number} progress The amount of tasks loaded from 0 to 1.\n */\n\n/**\n * Executes when a load is complete.\n * @callback module:jibo/loader.AssetManager~completeCallback\n * @param {Error} error The error, if any, thrown by loading.\n * @param {*} result The result of load.\n */\n\n/**\n * Handles the asynchronous loading of multiple assets.\n * @class AssetManager\n * @memberof module:jibo/loader\n */\nclass AssetManager\n{\n    public loader:Loader;\n    public loads:Array<AssetLoad>;\n    public loadPool:Array<AssetLoad>;\n    public taskDefs:Array<ITaskDefinition>;\n    public cache:AssetCache;\n\n    constructor()\n    {\n        /**\n         * The loader instance to load a file.\n         * @type {module:jibo/loader.Loader}\n         * @name module:jibo/loader.AssetManager#loader\n         * @readOnly\n         */\n        this.loader = new Loader();\n\n        /**\n         * The collection of current multiloads.\n         * @type {array<module:jibo/loader.AssetLoad>}\n         * @name module:jibo/loader.AssetManager#loads\n         * @private\n         * @readOnly\n         */\n        this.loads = [];\n\n        /**\n         * The expired loads to reuse.\n         * @type {array<module:jibo/loader.AssetLoad>}\n         * @name module:jibo/loader.AssetManager#loadPool\n         * @private\n         * @readOnly\n         */\n        this.loadPool = [];\n\n        /**\n         * The collection of task definitions.\n         * @type {array}\n         * @name module:jibo/loader.AssetManager#taskDefs\n         * @readOnly\n         */\n        this.taskDefs = [];\n\n        /**\n         * The cache of assets.\n         * @type {module:jibo/loader.AssetCache}\n         * @name module:jibo/loader.AssetManager#cache\n         * @readOnly\n         */\n        this.cache = new AssetCache();\n    }\n\n    /**\n     * Registers new tasks types. These tasks must extend Task.\n     * @method module:jibo/loader.AssetManager#register\n     * @private\n     * @param {Function|String} TaskClass The class task reference.\n     * @param {int} [priority=0] The priority. Higher priority tasks\n     *      are tested first. More general tasks should be lower\n     *      and more specific tasks should be higher.\n     */\n    register(TaskClass:ITaskDefinition, priority:number=0): void\n    {\n        TaskClass.priority = priority;\n\n        // @if DEBUG\n        if (!(TaskClass.prototype instanceof Task))\n        {\n            console.error(\"Registering task much extend Task\", TaskClass);\n        }\n        else if (!TaskClass.test)\n        {\n            console.error(\"Registering task much have test method\");\n        }\n        // @endif\n\n        this.taskDefs.push(TaskClass);\n\n        // Sort definitions by priority\n        // where the higher priorities are first\n        this.taskDefs.sort(function(a, b)\n        {\n            return b.priority - a.priority;\n        });\n    }\n\n    /**\n     * Loads a bunch of assets. Can only call one load at a time.\n     * @method module:jibo/loader.AssetManager#load\n     * @param {Object|Array} asset The assets to load.\n     * @param {Object} [options] The loading options.\n     * @param {module:jibo/loader.AssetManager~completeCallback} [options.complete] The callback when finished.\n     * @param {module:jibo/loader.AssetManager~progressCallback} [options.progress] The callback when loading percentage is updated.\n     * @param {module:jibo/loader.Task~completeCallback} [options.taskDone] The callback when finished with each individual task.\n     * @param {Boolean} [options.autoStart=true] `true` to start running right away.\n     * @param {Boolean} [options.startAll=true] `true` to run all the tasks at once, in parallel.\n     * @param {Boolean} [options.cacheAll=false] `true` to cache all files.\n     * @return {module:jibo/loader.AssetLoad} The reference to the current load.\n     */\n    load(assets:{[id:string]: Asset}|Array<Asset>, options?:LoadOptions)\n    {\n        // Apply defaults to options\n        options = Object.assign(\n        {\n            complete: null,\n            progress: null,\n            taskDone: null,\n            cacheAll: false,\n            startAll: true,\n            autoStart: true,\n        }, options);\n\n        const load:AssetLoad = this.getLoad();\n\n        // Add to the stack of current loads\n        this.loads.push(load);\n\n        // Override the complete callback with a bind of the\n        // original callback with the task\n        options.complete = this._onLoaded.bind(\n            this,\n            options.complete,\n            load\n        );\n\n        // Handle the finish\n        load.once('complete', options.complete);\n\n        // Called when a task is complete\n        if (options.taskDone)\n        {\n            load.on('taskDone', options.taskDone);\n        }\n\n        // Start the load\n        load.setup(assets, options);\n\n        return load;\n    }\n\n    /**\n     * Stashes the load for use later.\n     * @method module:jibo/loader.AssetManager#poolLoad\n     * @private\n     * @param {module:jibo/loader.AssetLoad} load The load to recycle.\n     */\n    poolLoad(load:AssetLoad)\n    {\n        load.reset();\n        this.loadPool.push(load);\n    }\n\n    /**\n     * Gets either a new AssetLoad or a recycled one.\n     * @method module:jibo/loader.AssetManager#getLoad\n     * @private\n     * @return {AssetLoad} The load to use.\n     */\n    getLoad():AssetLoad\n    {\n        if (this.loadPool.length > 0)\n        {\n            return this.loadPool.pop();\n        }\n        return new AssetLoad(this);\n    }\n\n    /**\n     * Handler when a load is finished.\n     * @method module:jibo/loader.AssetManager#_onLoaded\n     * @private\n     * @param {module:jibo/loader.AssetManager~completeCallback} complete The function to call when done.\n     * @param {AssetLoad} load The current load.\n     * @param {*} The returned results.\n     */\n    _onLoaded(complete, load:AssetLoad, err:LoaderError, results:any)\n    {\n        let index = this.loads.indexOf(load);\n        if (index > -1)\n        {\n            this.loads.splice(index, 1);\n        }\n        if (complete)\n        {\n            complete(err, results);\n        }\n        this.poolLoad(load);\n    }\n\n    /**\n     * Destroys the AssetManager.\n     * @method module:jibo/loader.AssetManager#destroy\n     */\n    destroy()\n    {\n        this.loader = null;\n\n        this.cache.destroy();\n        this.cache = null;\n\n        this.loadPool = null;\n        this.loads = null;\n        this.taskDefs = null;\n    }\n}\n\nexport default AssetManager;\n"],"sourceRoot":"/source/"}