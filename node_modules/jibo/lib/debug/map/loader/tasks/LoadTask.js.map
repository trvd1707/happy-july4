{"version":3,"sources":["loader/tasks/LoadTask.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiB,QAAQ,CAAC,CAAA;AAI1B;;;;;;;;;;;;;;;;;GAiBG;AACH;IAAuB,4BAAI;IAiBvB,kBAAY,OAAoB,EAAE,KAAS;QAEvC,kBAAM,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjC;;;WAGG;QACH,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACzB,CAAC;IArBD;;;;;;OAMG;IACI,aAAI,GAAX,UAAY,KAAS;QAEjB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;IACvB,CAAC;IAaD;;;;OAIG;IACH,wBAAK,GAAL,UAAM,QAAiB;QAEnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IACL,eAAC;AAAD,CArCA,AAqCC,CArCsB,cAAI,GAqC1B;AAED;kBAAe,QAAQ,CAAC","file":"loader/tasks/LoadTask.js","sourcesContent":["import Task from './Task';\nimport {Callback} from '../Loader';\nimport AssetManager from '../AssetManager';\n\n/**\n * Internal class for dealing with async load assets through Loader.\n * ```\n * jibo.loader.load({\n *    src: \"data.json\" \n * }, (err, data) => {});\n * ```\n * @class LoadTask\n * @extends module:jibo/loader.Task\n * @memberof module:jibo/loader\n * @constructor\n * @param {module:jibo/loader.AssetManager} manager Instance of AssetManager.\n * @param {Object} asset The data properties.\n * @param {String} asset.src The source.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {String} [asset.id] ID of asset.\n * @param {Function} [asset.complete] The function to call when done.\n */\nclass LoadTask extends Task\n{\n    static priority:number;\n    public src:string;\n\n    /**\n     * Tests if this task should be run.\n     * @method module:jibo/loader.LoadTask.test\n     * @static\n     * @param {Object} asset The asset to check.\n     * @return {Boolean} `true` if the asset is compatible with this asset.\n     */\n    static test(asset:any):boolean\n    {\n        return !!asset.src;\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset, asset.src);\n\n        /**\n         * The source URL to load.\n         * @property {String} src\n         */\n        this.src = asset.src;\n    }\n\n    /**\n     * Starts the task.\n     * @method  module:jibo/loader.LoadTask#start\n     * @param  {module:jibo/loader.Task~completeCallback} callback Callback when finished.\n     */\n    start(callback:Callback): void\n    {\n        this.simpleLoad(this.src, callback);\n    }\n}\n\nexport default LoadTask;\n"],"sourceRoot":"/source/"}