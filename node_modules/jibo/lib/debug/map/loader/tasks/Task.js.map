{"version":3,"sources":["loader/tasks/Task.ts"],"names":[],"mappings":"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","file":"loader/tasks/Task.js","sourcesContent":["import AssetManager from '../AssetManager';\nimport {Callback} from '../Loader';\nimport {Asset} from '../AssetLoad';\nimport LoaderError from '../LoaderError';\n\n// Callback when finished loading\nexport declare type Complete = (err:LoaderError, result:any, originalAsset?:Asset, assets?:Array<Asset>) => void;\n\n/**\n * Executes when the task starts.\n * @callback module:jibo/loader.Task~startCallback\n * @param {Error} error The error thrown by task.\n * @param {*} result The final result of task loading.\n */\n\n/**\n * Executes when the task is complete.\n * @callback module:jibo/loader.Task~completeCallback\n * @param {Error} error The error, if any, thrown by loading.\n * @param {*} result The result of load.\n * @param {Object} originalAsset The original asset object.\n * @param {Array} additionalAsset An Array to add additional assets.\n */\n\n/**\n * Single asynchronous task.\n * @class Task\n * @memberof module:jibo/loader\n * @constructor\n * @param {module:jibo/loader.AssetManager} manager Reference to the AssetManager instance.\n * @param {Object} asset The asset data.\n * @param {String} [asset.id=null] The task ID.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {module:jibo/loader.Task~completeCallback} [asset.complete=null] Call when complete.\n * @param {String} [fallbackId] The ID to set if no ID is explicitly set.\n *      This can be used for caching something that has no id.\n */\nabstract class Task\n{\n    /**\n     * Status for when task is waiting to be run.\n     * @name module:jibo/loader.Task.WAITING\n     * @type {int}\n     * @static\n     * @readOnly\n     * @final\n     * @default 0\n     */\n    static WAITING:number = 0;\n\n    /**\n     * Status for when task is currently being run.\n     * @name module:jibo/loader.Task.RUNNING\n     * @type {int}\n     * @static\n     * @readOnly\n     * @final\n     * @default 1\n     */\n    static RUNNING:number = 1;\n\n    /**\n     * Status for when task is finished.\n     * @name module:jibo/loader.Task.FINISHED\n     * @type {int}\n     * @static\n     * @readOnly\n     * @final\n     * @default 2\n     */\n    static FINISHED:number = 2;\n\n    public status:number;\n    public complete:Complete;\n    public cache:boolean;\n    public id:string;\n    public original:any;\n\n    /**\n     * Internal class for dealing with async load assets.\n     */\n    constructor(public manager:AssetManager, asset:Asset, fallbackId?:string)\n    {\n        /**\n         * The current status of the task.\n         * @property {int} status 0 = waiting, 1 = running, 2 = finished.\n         * @name module:jibo/loader.Task#status\n         * @default 0\n         */\n        this.status = Task.WAITING;\n\n        /**\n         * The user call to fire when completed. Returns the arguments\n         * result, originalAsset, and additionalAsset.\n         * @type {module:jibo/loader.Task~completeCallback}\n         * @name module:jibo/loader.Task#complete\n         * @default null\n         * @readOnly\n         */\n        this.complete = asset.complete || null;\n\n        /**\n         * `true` to cache the load and use later.\n         * @type {Boolean}\n         * @name module:jibo/loader.Task#cache\n         * @default false\n         * @readOnly\n         */\n        this.cache = !!asset.cache;\n\n        /**\n         * The task id.\n         * @type {String}\n         * @name module:jibo/loader.Task#id\n         */\n        this.id = asset.id || null;\n\n        /**\n         * Reference to the original asset data.\n         * @type {Object}\n         * @name module:jibo/loader.Task#original\n         * @readOnly\n         */\n        this.original = asset;\n\n        // We're trying to cache but we don't have an ID\n        if (this.cache && !this.id)\n        {\n            if (fallbackId && typeof fallbackId === \"string\")\n            {\n                // Remove the file extension\n                let extIndex = fallbackId.lastIndexOf('.');\n                if (extIndex > -1)\n                {\n                    fallbackId = fallbackId.substr(0, extIndex);\n                }\n\n                // Check for the last folder slash then remove it\n                let slashIndex = fallbackId.lastIndexOf('/');\n                if (slashIndex > -1)\n                {\n                    fallbackId = fallbackId.substr(slashIndex + 1);\n                }\n\n                // Update the id\n                asset.id = this.id = fallbackId;\n            }\n\n            // Check for ID if we're caching\n            if (!this.id)\n            {\n                // @if DEBUG\n                console.error(\"Caching an asset requires an id, none set\", asset);\n                // @endif\n                this.cache = false;\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     * @method  module:jibo/loader.Task#start\n     * @param  {module:jibo/loader.Task~startCallback} callback Callback when finished.\n     */\n    start(callback:Callback)\n    {\n        // callback must be: callback(err, result);\n    }\n\n    /**\n     * Pass-through to the application load method.\n     * @method module:jibo/loader.Task#load\n     * @protected\n     * @param {String|Array|Object} source The source to load.\n     * @param {Object|Function} [options] The load options or callback function.\n     */\n    load(source:any, options:any)\n    {\n        if (typeof options === \"function\")\n        {\n            options = { complete: options };\n        }\n        return this.manager.load(source, options);\n    }\n\n    /**\n     * Pass-through to the application Loader.load.\n     * @method module:jibo/loader.Task#simpleLoad\n     * @protected\n     * @param {String} url Path to file to load.\n     * @param {Function} complete The callback.\n     * @param {Function} [progress] The load progress.\n     * @param {Object} [data] Additional data.\n     */\n    simpleLoad(url:string, complete:Callback)\n    {\n        return this.manager.loader.load(url, complete);\n    }\n\n    /**\n     * Destroys this and discards.\n     * @method module:jibo/loader.Task#destroy\n     */\n    destroy()\n    {\n        this.manager = null;\n        this.status = Task.FINISHED;\n        this.id = null;\n        this.complete = null;\n        this.original = null;\n    }\n}\n\nexport default Task;\n"],"sourceRoot":"/source/"}