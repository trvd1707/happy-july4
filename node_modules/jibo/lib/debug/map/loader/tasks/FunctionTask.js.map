{"version":3,"sources":["loader/tasks/FunctionTask.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiB,QAAQ,CAAC,CAAA;AAI1B;;;;;;;;;;;;;;;;;;;GAmBG;AACH;IAA2B,gCAAI;IAiB3B,sBAAY,OAAoB,EAAE,KAAS;QAEvC,kBAAM,OAAO,EAAE,KAAK,CAAC,CAAC;QAEtB;;;;WAIG;QACH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IAC7B,CAAC;IAtBD;;;;;;OAMG;IACI,iBAAI,GAAX,UAAY,KAAS;QAEjB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;IACzB,CAAC;IAcD;;;;OAIG;IACH,4BAAK,GAAL,UAAM,QAAiB;QAEnB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,8BAAO,GAAP;QAEI,gBAAK,CAAC,OAAO,WAAE,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IACL,mBAAC;AAAD,CAhDA,AAgDC,CAhD0B,cAAI,GAgD9B;AAED;kBAAe,YAAY,CAAC","file":"loader/tasks/FunctionTask.js","sourcesContent":["import Task from './Task';\nimport AssetManager from '../AssetManager';\nimport {Callback} from '../Loader';\n\n/**\n * Internal class for dealing with async function calls with AssetManager.\n * ```\n * jibo.loader.load({\n *    async: (done) => {\n *        done(); \n *    },\n * }, (err) => {});\n * ```\n * @class FunctionTask\n * @extends module:jibo/loader.Task\n * @memberof module:jibo/loader\n * @constructor\n * @param {module:jibo/loader.AssetManager} manager Instance of AssetManager.\n * @param {Object} asset The data properties.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {Function} asset.async The required function to call.\n * @param {Function} [asset.complete] The function to call when done.\n * @param {String} [asset.id] The task id for mapping the result, if any.\n */\nclass FunctionTask extends Task\n{\n    static priority:number;\n    public async:Function;\n\n    /**\n     * Tests if the task should be run.\n     * @method module:jibo/loader.FunctionTask.test\n     * @static\n     * @param {Object} asset The asset to check.\n     * @return {Boolean} `true` if the asset is compatible with this task.\n     */\n    static test(asset:any):boolean\n    {\n        return !!asset.async;\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset);\n\n        /**\n         * The asynchronous call.\n         * @type {Function}\n         * @name module:jibo/loader.FunctionTask#async\n         */\n        this.async = asset.async;\n    }\n\n    /**\n     * Starts the task.\n     * @method module:jibo/loader.FunctionTask#start\n     * @param {module:jibo/loader.Task~completeCallback} callback Callback when done.\n     */\n    start(callback:Callback):void\n    {\n        this.async(callback);\n    }\n\n    /**\n     * Destroys this and discards.\n     * @method module:jibo/loader.FunctionTask#destroy\n     */\n    destroy():void\n    {\n        super.destroy();\n        this.async = null;\n    }\n}\n\nexport default FunctionTask;\n"],"sourceRoot":"/source/"}