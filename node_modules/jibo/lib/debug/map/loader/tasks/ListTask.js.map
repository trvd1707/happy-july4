{"version":3,"sources":["loader/tasks/ListTask.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiB,QAAQ,CAAC,CAAA;AAE1B,2BAAuB,eAAe,CAAC,CAAA;AAGvC;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH;IAAuB,4BAAI;IAmBvB,kBAAY,OAAoB,EAAE,KAAS;QAEvC,kBAAM,OAAO,EAAE,KAAK,CAAC,CAAC;QAEtB;;;;WAIG;QACH,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAE3B;;;;WAIG;QACH,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QAE/B;;;;WAIG;QACH,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;IACnC,CAAC;IApCD;;;;;;OAMG;IACI,aAAI,GAAX,UAAY,KAAS;QAEjB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,oBAAU,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAC/F,CAAC;IA4BD;;;;OAIG;IACH,wBAAK,GAAL,UAAM,QAAiB;QAEnB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EACrB;YACI,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACH,0BAAO,GAAP;QAEI,gBAAK,CAAC,OAAO,WAAE,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IACL,eAAC;AAAD,CArEA,AAqEC,CArEsB,cAAI,GAqE1B;AAED;kBAAe,QAAQ,CAAC","file":"loader/tasks/ListTask.js","sourcesContent":["import Task from './Task';\nimport AssetManager from '../AssetManager';\nimport AssetUtils from '../AssetUtils';\nimport {Callback} from '../Loader';\n\n/**\n * Internal class for grouping a list of tasks into one task.\n * ```\n * jibo.loader.load({\n *    assets: [\n *        { src: \"data.json\" },\n *        \"image.png\"\n *    ]\n * }, (err, results) => {});\n * ```\n * @class ListTask\n * @extends module:jibo/loader.Task\n * @constructor\n * @memberof module:jibo/loader\n * @param {module:jibo/loader.AssetManager} manager Instance of AssetManager.\n * @param {Object} asset The data properties.\n * @param {Array|Object} asset.assets The collection of assets to load.\n * @param {Boolean} [asset.cacheAll=false] `true` to cache each item in assets.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {String} [asset.id] ID of asset.\n * @param {Function} [asset.complete=null] The event to call when done.\n * @param {Function} [asset.progress=null] The event to call when progress is updated.\n */\nclass ListTask extends Task\n{\n    static priority:number;\n    public assets:any;\n    public cacheAll:boolean;\n    public progress:(progress:number) => void;\n\n    /**\n     * Tests if this task should be run.\n     * @method module:jibo/loader.ListTask.test\n     * @static\n     * @param {Object} asset The asset to check.\n     * @return {Boolean} `true` if the asset is compatible with this asset.\n     */\n    static test(asset:any):boolean\n    {\n        return !!asset.assets && (Array.isArray(asset.assets) || AssetUtils.isPlain(asset.assets));\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset);\n\n        /**\n         * The collection of assets to load.\n         * @type {Array|Object}\n         * @name module:jibo/loader.ListTask#assets\n         */\n        this.assets = asset.assets;\n\n        /**\n         * `true` if each asset in the collection should be cached.\n         * @type {Boolean}\n         * @name module:jibo/loader.ListTask#cacheAll\n         */\n        this.cacheAll = asset.cacheAll;\n\n        /**\n         * Callback when progress is updated.\n         * @type {Function}\n         * @name module:jibo/loader.ListTask#progress\n         */\n        this.progress = asset.progress;\n    }\n\n    /**\n     * Starts the task.\n     * @method  module:jibo/loader.ListTask#start\n     * @param  {module:jibo/loader.Task~completeCallback} callback Callback when finished.\n     */\n    start(callback:Callback): void\n    {\n        this.load(this.assets,\n        {\n            complete: callback,\n            progress: this.progress,\n            cacheAll: this.cacheAll\n        });\n    }\n\n    /**\n     * Destroys this and discards.\n     * @method module:jibo/loader.ListTask#destroy\n     */\n    destroy(): void\n    {\n        super.destroy();\n        this.assets = null;\n    }\n}\n\nexport default ListTask;\n"],"sourceRoot":"/source/"}