{"version":3,"sources":["loader/Loader.ts"],"names":[],"mappings":"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","file":"loader/Loader.js","sourcesContent":["import LoaderError from './LoaderError';\nimport path = require('path');\nimport fs = require('fs');\n\n// Callback when finished loading\nexport declare type Callback = (err:Error, result?:any) => void;\n\nmodule FILETYPE {\n    export const IMAGE = 'image';\n    export const SOUND = 'sound';\n    export const VIDEO = 'video';\n    export const JSON = 'json';\n    export const XML = 'xml';\n    export const CSS = 'css';\n    export const JAVASCRIPT = 'js';\n    export const SVG = 'svg';\n    export const TEXT = 'text';\n    export const HTML = 'html';\n}\n\nmodule MIMETYPE {\n    export const jpg = 'image/jpeg';\n    export const jpeg = 'image/jpeg';\n    export const gif = 'image/gif';\n    export const png = 'image/png';\n    export const bmp = 'image/bmp';\n    export const webp = 'image/webp';\n}\n\n/**\n * Loads all assets to a skill,\n * including images, data, code, and sounds. Loader supports cache-busting\n * in the browser using dynamic query string parameters.\n * @class Loader\n * @memberof module:jibo/loader\n */\nclass Loader {\n\n    public basePath:string;\n\n\tconstructor() {\n        /**\n         * Base to append to all file requests.\n         * @type {String}\n         * @name module:jibo/loader.Loader#basePath\n         */\n        this.basePath = '';\n\t}\n\n    /**\n     * Loads the asset file.\n     * @method module:jibo/loader.Loader#load\n     * @param {String} uri The file to load.\n     * @param {Function} callback Callback when complete.\n     */\n    load(uri:string, callback:Callback): void\n    {\n        const type = this.getFileType(uri);\n        if (!path.isAbsolute(uri))\n        {\n            uri = this.basePath + uri;\n        }\n        switch(type)\n        {\n            case FILETYPE.IMAGE:\n                this.loadImage(uri, callback);\n                break;\n            case FILETYPE.SOUND:\n                this.loadSound(uri, callback);\n                break;\n            case FILETYPE.JSON:\n                this.loadJSON(uri, callback);\n                break;\n            case FILETYPE.JAVASCRIPT:\n                this.loadJS(uri, callback);\n                break;\n            case FILETYPE.TEXT:\n                this.baseLoad('text', uri, 'utf8', callback);\n                break;\n            case FILETYPE.CSS:\n                this.loadStyle(uri, callback);\n                break;\n            case FILETYPE.XML:\n                this.loadDOM(uri, 'application/xml', callback);\n                break;\n            case FILETYPE.SVG:\n                this.loadDOM(uri, 'image/svg+xml', callback);\n                break;\n            case FILETYPE.HTML:\n                this.loadDOM(uri, 'text/html', callback);\n                break;\n            case FILETYPE.VIDEO:\n            default:\n                this.baseLoad('binary', uri, null, callback);\n                break;\n        }\n    }\n\n    /**\n     * Loads XML or SVG elements.\n     * @method module:jibo/loader.Loader#loadDOM\n     * @private\n     * @param {String} uri The file to load.\n     * @param {String} type The file type to parse DOM.\n     * @param {Function} callback Callback when complete.\n     */\n    private loadDOM(uri:string, type:string, callback:Callback): void\n    {\n        this.baseLoad(type, uri, 'utf8', (err, data) =>\n        {\n            try\n            {\n                const parser = new DOMParser();\n                const object = parser.parseFromString(data, type);\n                callback(null, object);\n            }\n            catch(e)\n            {\n                callback(this.createError(e, uri));\n            }\n        });\n    }\n\n    /**\n     * Loads CSS element and return HTMLStyleElement.\n     * @method module:jibo/loader.Loader#loadStyle\n     * @private\n     * @param {String} uri The file to load.\n     * @param {String} type The file type to parse DOM.\n     * @param {Function} callback Callback when complete.\n     */\n    private loadStyle(uri:string, callback:Callback): void\n    {\n        this.baseLoad('CSS', uri, 'utf8', (err, data) =>\n        {\n            const style = document.createElement('style');\n            style.type = 'text/css';\n            style.innerHTML = data;\n            callback(null, style);\n        });\n    }\n\n    /**\n     * Loads an image file as an Image object.\n     * @method module:jibo/loader.Loader#loadImage\n     * @private\n     * @param {String} uri The file to load.\n     * @param {Function} callback Callback when complete.\n     */\n    private loadImage(uri:string, callback:Callback):void\n    {\n        this.baseLoad('image', uri, 'base64', (err, data) =>\n        {\n            const mimeType = this.getMimeType(uri);\n            const result = new Image();\n            result.src = `data:${mimeType};base64,${data}`;\n            callback(null, result);\n        });\n    }\n\n    /**\n     * Loads a sound file as Array buffer.\n     * @method loadSound\n     * @private\n     * @param {String} uri The file to load.\n     * @param {Function} callback Callback when complete.\n     */\n    private loadSound(uri:string, callback:Callback):void\n    {\n        this.baseLoad('sound', uri, null, (err, data) =>\n        {\n            const result:ArrayBuffer = new ArrayBuffer(data.length);\n            const view:Uint8Array = new Uint8Array(result);\n            for (let i:number = 0; i < data.length; ++i) {\n                view[i] = data[i];\n            }\n            callback(null, result);\n        });\n    }\n\n    /**\n     * Loads a JSON file.\n     * @method module:jibo/loader.Loader#loadJSON\n     * @private\n     * @param {String} uri The file to load.\n     * @param {Function} callback Callback when complete.\n     */\n    private loadJSON(uri:string, callback:Callback):void\n    {\n        this.baseLoad('JSON', uri, 'utf8', (err, data) =>\n        {\n            try\n            {\n                data = JSON.parse(data);\n            }\n            catch(e)\n            {\n                return callback(this.createError(e, uri, 'Failed to parse JSON'));\n            }\n            callback(null, data);\n        });\n    }\n\n    /**\n     * Loads a JavaScript file.\n     * @method loadJS\n     * @private\n     * @param {String} uri The file to load.\n     * @param {Function} callback Callback when complete.\n     */\n    private loadJS(uri:string, callback:Callback):void\n    {\n        try\n        {\n            const result:any = require(uri);\n            callback(null, result);\n        }\n        catch(e)\n        {\n            callback(this.createError(e, uri, 'Unable to read JavaScript file'));\n        }\n    }\n\n    /**\n     * Gets a file type by uri.\n     * @method module:jibo/loader.Loader#getFileType\n     * @private\n     * @param {String} uri The file uri.\n     * @return {String} The filetype.\n     */\n    private getFileType(uri:string): string\n    {\n        const extension = path.extname(uri).toLowerCase();\n        switch (extension) {\n            case '.jpeg':\n            case '.jpg':\n            case '.gif':\n            case '.png':\n            case '.webp':\n            case '.bmp':\n                return FILETYPE.IMAGE;\n            case '.ogg':\n            case '.oga':\n            case '.mp3':\n            case '.m4a':\n            case '.wav':\n                return FILETYPE.SOUND;\n            case '.mp4':\n            case '.m4v':\n            case '.ogv':\n            case '.ogm':\n            case '.webm':\n                return FILETYPE.VIDEO;\n            case '.json':\n            case '.keys':\n            case '.bt':\n                return FILETYPE.JSON;\n            case '.xml':\n                return FILETYPE.XML;\n            case '.css':\n                return FILETYPE.CSS;\n            case '.js':\n                return FILETYPE.JAVASCRIPT;\n            case '.svg':\n                return FILETYPE.SVG;\n            case '.html':\n            case '.htm':\n                return FILETYPE.HTML;\n            default:\n                return FILETYPE.TEXT;\n        }\n    }\n\n    /**\n     * Gets a mime type by uri.\n     * @method module:jibo/loader.Loader#getMimeType\n     * @private\n     * @param {String} uri The file uri.\n     * @return {String} The mime type.\n     */\n    private getMimeType(uri:string):string\n    {\n        let extension = path.extname(uri).toLowerCase();\n        if (extension) {\n            extension = extension.substr(1);\n        }\n        return MIMETYPE[extension] || null;\n    }\n\n    /**\n     * Gets a mime type by uri.\n     * @method module:jibo/loader.Loader#baseLoad\n     * @private\n     * @param {String} type The named type of file\n     * @param {String} uri The file uri.\n     * @param {String} encoding The readFile encoding type.\n     * @param {Function} callback\n     */\n    private baseLoad(type:string, uri:string, encoding:string, callback:Callback): void\n    {\n        fs.readFile(uri, encoding, (err, data) =>\n        {\n            if (err)\n            {\n                return callback(this.createError(err, uri, `Unable to read ${type} file`));\n            }\n            callback(null, data);\n        });\n    }\n\n    /**\n     * Creates new LoaderError.\n     * @method module:jibo/loader.Loader#createError\n     * @private\n     * @param {Error} err The original error.\n     * @param {String} uri The file URL to load.\n     * @param {String} [message] The optional message.\n     * @return {module:jibo/loader.LoaderError} The new error.\n     */\n    private createError(err:any, uri:string, message?:string): LoaderError\n    {\n        return new LoaderError(typeof err === 'string' ? new Error(err) : err, uri, message);\n    }\n}\nexport default Loader;\n"],"sourceRoot":"/source/"}