{"version":3,"sources":["loader/LoaderPlugin.ts"],"names":[],"mappings":"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","file":"loader/LoaderPlugin.js","sourcesContent":["import AssetManager from './AssetManager';\nimport AssetLoad from './AssetLoad';\nimport Loader from './Loader';\nimport AssetUtils from './AssetUtils';\nimport Task from './tasks/Task';\nimport LoadTask from './tasks/LoadTask';\nimport ListTask from './tasks/ListTask';\nimport FunctionTask from './tasks/FunctionTask';\nimport LoaderError from './LoaderError';\nimport {ITaskDefinition} from './AssetLoad';\n\n/**\n * Adds all assets to a skill,\n * including custom ones from your file system\n * that are not included in the template skill by default.\n * Assets can include images, sounds, code, data, and other files.\n * @module jibo/loader\n */\nclass LoaderPlugin\n{\n    private static _instance:LoaderPlugin;\n    public assetManager:AssetManager;\n    public AssetUtils;\n    public Loader;\n    public Task;\n    public LoadTask;\n    public ListTask;\n    public FunctionTask;\n    public LoaderError;\n\n    /**\n     * Gets singleton instance of sound library.\n     * @private\n     * @static\n     * @name module:jibo/sound.instance\n     * @type {module:jibo/sound}\n     */\n    static get instance():LoaderPlugin\n    {\n        return LoaderPlugin._instance;\n    }\n\n    constructor()\n    {\n        // Check for singleton\n        if (LoaderPlugin._instance)\n        {\n            throw new Error(\"Only one LoaderPlugin can be created at once\");\n        }\n\n        // Set singleton\n        LoaderPlugin._instance = this;\n\n        /**\n         * Instance of the asset manager.\n         * @name module:jibo/loader#assetManager\n         * @type {module:jibo/loader.AssetManager}\n         */\n        this.assetManager = new AssetManager();\n\n        // Expose public classes\n        this.AssetUtils = AssetUtils;\n        this.Loader = Loader;\n        this.Task = Task;\n        this.LoadTask = LoadTask;\n        this.ListTask = ListTask;\n        this.FunctionTask = FunctionTask;\n        this.LoaderError = LoaderError;\n\n        // Register tasks\n        this.register(LoadTask, 0)\n            .register(ListTask, 5)\n            .register(FunctionTask, 10);\n    }\n\n    /**\n     * Handles any errors coming from the manager.\n     * @method module:jibo/loader#register\n     * @param {Function} TaskDefinition The class definition for a loader task.\n     * @param {int} [priority=0] The priority of the task. Higher priority tasks\n     *        are run first and therefore should be more specific\n     *        types of tasks. Lower priority tasks are more generalized.\n     * @return {module:jibo/loader} The loader module for chaining.\n     */\n    register(TaskDefinition:ITaskDefinition, priority:number=0): LoaderPlugin\n    {\n        this.assetManager.register(TaskDefinition, priority);\n        return this;\n    }\n\n    /**\n     * Performs simple load of a single file.\n     * @method module:jibo/loader#load\n     * @param {String} source The file to load.\n     * @param {module:jibo/loader.AssetManager~completeCallback} complete The completed callback with a single\n     *      parameters result object.\n     * @param {Boolean} [cache=false] `true` to save to the asset cache after load.\n     */\n    /**\n     * Loads a single file with options.\n     * @method module:jibo/loader#load\n     * @param {Object} asset The file resource to load.\n     * @param {String} asset.src The file to load.\n     * @param {Boolean} [asset.cache=false] `true` if the result should be cached for later.\n     * @param {module:jibo/loader.AssetManager~completeCallback} [asset.complete=null] Callback when finished.\n     * @param {module:jibo/loader.AssetManager~completeCallback} [complete] The completed callback with a single\n     *      parameter which is a result object. Will\n     *      only use if `asset.complete` is undefined.\n     */\n    /**\n     * Loads a single custom asset with options.\n     * @method module:jibo/loader#load\n     * @param {Object} asset The single asset resource to load, properties\n     *      will depend on the type of asset loading.\n     * @param {module:jibo/loader.AssetManager~completeCallback} [asset.complete=null] Callback when finished.\n     * @param {String} [asset.id=null] The ID to attach to this asset.\n     * @param {Boolean} [asset.cache=false] `true` if the result should be cached for later.\n     * @param {module:jibo/loader.AssetManager~completeCallback} [complete] The completed callback with a single\n     *      parameters which is a result object. Will\n     *      only use if `asset.complete` is undefined.\n     */\n    /**\n     * Loads a map of multiple assets and return mapped result objects.\n     * @method module:jibo/loader#load\n     * @param {Object} assets Load a map of assets.\n     * @param {module:jibo/loader.AssetManager~completeCallback|object} [options] Callback where the only parameter is the\n     *      map of the results by ID, or the collection of load options.\n     * @param {module:jibo/loader.AssetManager~completeCallback} [options.complete=null] The complete callback if using load options.\n     * @param {module:jibo/loader.Task~completeCallback} [options.taskDone=null] The callback when a single item is finished.\n     * @param {module:jibo/loader.AssetManager~progressCallback} [options.progress=null] Callback percentage updates.\n     * @param {Boolean} [options.cacheAll=false] `true` if tasks should be cached.\n     * @param {Boolean} [options.startAll=true] `true` if tasks should be run in parallel.\n     */\n    /**\n     * Loads a list of multiple assets and return array of result objects.\n     * @method module:jibo/loader#load\n     * @param {Array} assets The list of assets.\n     *      If each object has a `id` the result will be a mapped object.\n     * @param {function|object} [options] Callback where the only parameter is the\n     *      collection or map of the results, or the collection of load options.\n     * @param {module:jibo/loader.AssetManager~completeCallback} [options.complete=null] The complete callback if using load options.\n     * @param {module:jibo/loader.Task~completeCallback} [options.taskDone=null] The callback when a single item is finished.\n     * @param {module:jibo/loader.AssetManager~progressCallback} [options.progress=null] Callback percentage updates.\n     * @param {Boolean} [options.cacheAll=false] `true` if tasks should be cached.\n     * @param {Boolean} [options.startAll=true] `true` if tasks should be run in parallel.\n     */\n    load(source:any, complete?:any, progress?:any, cache?:any, data?:any):AssetLoad\n    {\n        let options;\n\n        // If the load arguments are setup like the Loader.load call\n        // then we'll convert to an object that we can use\n        if (typeof source === \"string\")\n        {\n            source = {\n                src: source,\n                progress: progress || null,\n                complete: complete || null,\n                cache: !!cache,\n                data: data || null\n            };\n        }\n        else\n        {\n            // Presume complete is an options object\n            options = complete;\n\n            // Second argument is callback\n            if (typeof complete === \"function\")\n            {\n                options = {\n                    complete: complete\n                };\n            }\n        }\n        return this.assetManager.load(source, options);\n    }\n\n    /**\n     * Sets the base path to prepend to all loads.\n     * @name module:jibo/loader#basePath\n     * @type {String}\n     */\n    set basePath(basePath:string)\n    {\n        this.assetManager.loader.basePath = basePath;\n    }\n    get basePath(): string\n    {\n        return this.assetManager.loader.basePath;\n    }\n\n    /**\n     * Unloads an asset or list of assets.\n     * @method module:jibo/loader#unload\n     * @param {Array|String} assets The collection of asset ids or\n     *      single asset id. As an array, it can be a manifest\n     *      with objects that contain an ID, or an array of multiple strings.\n     * @return {module:jibo/loader} The loader module for chaining.\n     */\n    unload(assets:any): LoaderPlugin\n    {\n        if (typeof assets === \"string\")\n        {\n            assets = Array.prototype.slice.call(arguments);\n        }\n\n        for (let i = 0; i < assets.length; i++)\n        {\n            this.assetManager.cache.delete(assets[i]);\n        }\n        return this;\n    }\n\n    /**\n     * Unloads all assets from the assets cache.\n     * @method module:jibo/loader#unloadAll\n     * @return {module:jibo/loader} The loader module for chaining.\n     */\n    unloadAll(): LoaderPlugin\n    {\n        this.assetManager.cache.empty();\n        return this;\n    }\n\n    /**\n     * Gets an asset from the cache by ID\n     * @method module:jibo/loader#cached\n     * @param {String} id The asset to fetch.\n     * @return {*|null} The cached object or null if empty.\n     */\n    cached(id:string):any\n    {\n        return this.assetManager.cache.read(id);\n    }\n}\n\nexport default LoaderPlugin;\n"],"sourceRoot":"/source/"}