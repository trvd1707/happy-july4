{"version":3,"sources":["loader/LoaderError.ts"],"names":[],"mappings":";;;;;;AAOA;;;;;GAKG;AACH;IAA0B,+BAAK;IAI3B;;;;OAIG;IACH;;;;OAIG;IACH,qBAAmB,aAAiB,EAAS,OAAc,EAAE,OAAgB;QAEzE,kBAAM,OAAO,CAAC,CAAC;QAFA,kBAAa,GAAb,aAAa,CAAI;QAAS,YAAO,GAAP,OAAO,CAAO;QAIvD;;;;WAIG;QACH,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;QAE1B;;;;WAIG;QACH,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,aAAa,CAAC,OAAO,IAAI,YAAY,CAAC;QAEhE;;;;WAIG;QACH,IAAI,CAAC,KAAK,GAAG,CAAM,IAAI,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACH,8BAAQ,GAAR;QAEI,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;IAC3C,CAAC;IACL,kBAAC;AAAD,CAjDA,AAiDC,CAjDyB,KAAK,GAiD9B;AAED;kBAAe,WAAW,CAAC","file":"loader/LoaderError.js","sourcesContent":["export declare class Error {\n    public name: string;\n    public message: string;\n    public stack: string;\n    constructor(message?: string);\n}\n\n/**\n * Error type when a load process fails.\n * @class LoaderError\n * @extends Error\n * @memberof module:jibo/loader\n */\nclass LoaderError extends Error\n{\n    public message: string;\n\n    /**\n     * The original loading error thrown, usually `fs`.\n     * @name module:jibo/loader.LoaderError#originalError\n     * @type {Error}\n     */\n    /**\n     * The full path to the file request. Combines the `basePath` with `asset.src`.\n     * @name module:jibo/loader.LoaderError#request\n     * @type {String}\n     */\n    constructor(public originalError:any, public request:string, message?: string)\n    {\n        super(message);\n\n        /**\n         * The name of the error type.\n         * @name module:jibo/loader.LoaderError#name\n         * @type {String}\n         */\n        this.name = 'LoaderError';\n\n        /**\n         * Error message.\n         * @name module:jibo/loader.LoaderError#message\n         * @type {String}\n         */\n        this.message = message || originalError.message || 'load error';\n\n        /**\n         * Stack trace for the error.\n         * @name module:jibo/loader.LoaderError#stack\n         * @type {String}\n         */\n        this.stack = (<any>new Error()).stack;\n    }\n\n    /**\n     * Converts the error to a string.\n     * @method module:jibo/loader.LoaderError#toString\n     * @return {String} String representation of error.\n     */\n    toString():string\n    {\n        return this.name + ': ' + this.message;\n    }\n}\n\nexport default LoaderError;\n"],"sourceRoot":"/source/"}