{"version":3,"sources":["bt/Decorator.ts"],"names":[],"mappings":";;;;;;AAAA,uBAAmB,UAAU,CAAC,CAAA;AAC9B,4BAAwB,eAAe,CAAC,CAAA;AAGxC;;;;;;;;;;;;;;;;;GAiBG;AACH;IAAiC,6BAAW;IAIxC,mBAAY,OAAW,EAAE,cAAkB;QAEvC,kBAAM,OAAO,EAAE,cAAc,CAAC,CAAC;QAE/B;;;;;WAKG;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAUD;;;;;OAKG;IACH,0BAAM,GAAN;QACI,IAAI,OAAO,GAAW,IAAI,CAAC,KAAK,EAAE,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,GAAG,gBAAM,CAAC,WAAW,GAAG,gBAAM,CAAC,MAAM,CAAC;QAC5D,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,yBAAK,GAAL;QACI,IAAI,CAAC,OAAO,GAAG,gBAAM,CAAC,WAAW,CAAC;QAClC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACH,2BAAO,GAAP,UAAQ,MAAa;QACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IACL,gBAAC;AAAD,CA1DA,AA0DC,CA1DgC,qBAAW,GA0D3C;AAED;kBAAe,SAAS,CAAC","file":"bt/Decorator.js","sourcesContent":["import Status from './Status';\nimport BaseElement from './BaseElement';\nimport Behavior from './Behavior';\n\n/**\n * @class Decorator\n * @memberof module:jibo/bt\n * @description Baseclass for all decorators. Decorators can force a behavior to succeed or fail. They can restart\n * a behavior once it's failed or succeeded, and they can modify when a behavior starts.\n *\n * Subclasses: {@link module:jibo/bt/decorators.Case|Case}, {@link module:jibo/bt/decorators.FailOnCondition|FailOnCondition}, {@link module:jibo/bt/decorators.StartOnCondition|StartOnCondition}, {@link module:jibo/bt/decorators.StartOnEvent|StartOnEvent}, {@link module:jibo/bt/decorators.StartOnAnimEvent|StartOnAnimEvent}, {@link module:jibo/bt/decorators.SucceedOnCondition|SucceedOnCondition}, {@link module:jibo/bt/decorators.Case|Case},\n * {@link module:jibo/bt/decorators.TimeoutFail|TimeoutFail}, {@link module:jibo/bt/decorators.TimeoutSucceed|TimeoutSucceed},{@link module:jibo/bt/decorators.TimeoutSucceedJs|TimeoutSucceedJs}, {@link module:jibo/bt/decorators.WhileCondition|WhileCondition}, {@link module:jibo/bt/decorators.StartOnEvent|StartOnEvent}, \n * {@link module:jibo/bt/decorators.SucceedOnEmbedded|SucceedOnEmbedded}, {@link module:jibo/bt/decorators.SucceedOnEvent|SucceedOnEvent}, {@link module:jibo/bt/decorators.SucceedOnListen|SucceedOnListen}, {@link module:jibo/bt/decorators.SucceedOnListenJs|SucceedOnListenJs}\n *\n * @constructor\n * @param {Object} [options] Options for the decorator \n * @param {String} [options.name=''] Name of the decorator instance\n * @param {module:jibo/bt.Blackboard} [options.blackboard=null] Blackobard instance\n * @param {module:jibo/bt.BehaviorEmitter} [options.emitter=null] Emitter instance\n * @param {String} [options.assetPack=''] Name of the asset pack\n * @param {Object} [defaultOptions] Defaults for options\n */\nabstract class Decorator extends BaseElement {\n\n    behavior:Behavior;\n\n    constructor(options:any, defaultOptions:any) {\n\n        super(options, defaultOptions);\n\n        /**\n         * The parent behavior\n         * @name module:jibo/bt.Decorator~behavior\n         * @type {Behavior} \n         * @readOnly\n         */\n        this.behavior = null;\n    }\n\n    /**\n     * Called every frame. Gives a chance for this decorator to change the status of a behavior.\n     * @method module:jibo/bt.Decorator~update\n     * @param result {module:jibo/bt.Status} The current status of the behavior this decorator is decorating.\n     * @returns {module:jibo/bt.Status} The modified status of the behavior this decorator is decorating.\n     */\n    abstract update(result:Status):Status;\n\n    /**\n     * Internal start from the behavior tree level\n     * @method module:jibo/bt.Decorator~_start\n     * @private\n     * @return {Boolean} Success\n     */\n    _start():boolean {\n        let success:boolean = this.start();\n        this._status = success ? Status.IN_PROGRESS : Status.FAILED;\n        return success;\n    }\n\n    /**\n     * Internal stop from the behavior tree level\n     * @method module:jibo/bt.Decorator~_stop\n     * @private\n     */\n    _stop():void {\n        this._status = Status.INTERRUPTED;\n        this.stop();\n    }\n\n    /**\n     * Internal update from the behavior tree level\n     * @method module:jibo/bt.Decorator~_update\n     * @private\n     * @param {module:jibo/bt.Status} result\n     * @return {module:jibo/bt.Status} resulting status\n     */\n    _update(result:Status):Status {\n        this._status = this.update(result);\n        return this._status;\n    }\n}\n\nexport default Decorator;\n"],"sourceRoot":"/source/"}