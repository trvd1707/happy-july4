{"version":3,"sources":["bt/Factory.ts"],"names":[],"mappings":"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","file":"bt/Factory.js","sourcesContent":["import path = require('path');\nimport callsite = require('callsite');\nimport BehaviorEmitter from './BehaviorEmitter';\nimport Blackboard from './Blackboard';\nimport BehaviorTree from './BehaviorTree';\nimport Status from './Status';\nimport Behavior from \"./Behavior\";\nimport Decorator from \"./Decorator\";\n\n/**\n * Utility methods for registering behaviors and creating behaviors trees.\n * @class Factory\n * @module jibo/bt\n */\nclass Factory {\n\n    _behaviors:{[key:string]:{[key:string]:Behavior}};\n    behaviors:{[key:string]:{[key:string]:Behavior}};\n    decorators:{[key:string]:{[key:string]:Decorator}};\n    blackboard:any;\n    Status:any;\n\n    constructor(bt) {\n\n        /**\n         * Map of behaviors\n         * @name module:jibo/bt~_behaviors\n         * @type {Object}  \n         * @private\n         */\n        this._behaviors = {};\n\n        this.Status = Status;\n\n        /**\n         * The default blackboard\n         * @name module:jibo/bt~blackboard\n         * @type {module:jibo/bt.Blackboard}  \n         * @private\n         */\n        this.blackboard = new Blackboard();\n\n        // Mixin the classes\n        Object.assign(this, bt);\n\n        // Register core behaviors and decorators\n        this.registerCore();\n    }\n\n    /**\n     * Register a behavior or decorator globally\n     * @name module:jibo/bt~register\n     * @method\n     * @param {String} name The PascalCased name for the behavior\n     * @param {String} namespace This behavior's namespace. Pass in a globally unique name for this namesapce.\n     * @param {Module} classRef Class reference for the behavior or decorator\n     */\n    register(name, namespace, classRef) {\n        let ns = this._behaviors[namespace];\n        if (!ns) {\n            ns = this._behaviors[namespace] = {};\n        }\n        ns[name] = classRef;\n    }\n\n    /**\n     * Add all behaviors\n     * @method module:jibo/bt~registerCore\n     * @private\n     */\n    registerCore() {\n        const namespace = 'core';\n        const all = Object.assign({}, this.behaviors, this.decorators);\n\n        // Add the core behaviors/decorators\n        for (let name in all) {\n            this.register(name, namespace, all[name]);\n        }\n    }\n\n    /**\n     * Creates a runnable behavior tree from a bt file import.\n     * ```\n     * var jibo = require('jibo');\n     * var Status = jibo.bt.Status;\n     * var root = jibo.bt.create('../behaviors/main');\n     * root.start();\n     * let intervalId = setInterval(() => {\n     *    if (root.status !== Status.IN_PROGRESS) {\n     *        clearInterval(intervalId);\n     *    }\n     *    else {\n     *        root.update();\n     *    }\n     * }, 33);\n     * ```\n     * @method module:jibo/bt~create\n     * @param {String} uri Relative or absolute path to a `.bt` file.\n     * @param {Object} [overrides] Options for populating behavior tree globals.\n     * @param {module:jibo/bt.Blackboard} [overrides.blackboard] Override the default blackboard object for this behavior tree.\n     * @param {Object} [overrides.notepad] Provide your own notepad object instead of the default one.\n     * @param {String} [overrides.assetPack] The asset pack name to use for loading assets in this tree.\n     * @returns {module:jibo/bt.BehaviorTree}\n     */\n    create(uri:string, overrides:any = {}) {\n        let treePath:string;\n        uri = uri.substr(0, uri.lastIndexOf(path.parse(uri).ext));\n        if(!path.isAbsolute(uri)) {\n            let calleeDirname:string = callsite()[1].getFileName();\n            // Remove \"file://\" for callers included with <script> tags\n            calleeDirname = calleeDirname.replace(/^file\\:\\/\\//, '');\n            treePath = path.join(calleeDirname, '..', uri);\n        }\n        else {\n            treePath = uri;\n        }\n        let createTree:Function;\n        try {\n            createTree = require(treePath);\n        }\n        catch(e) {\n            console.error(e);\n            throw new Error(uri + ' is not a valid behavior tree');\n        }\n\n        let blackboard = overrides.blackboard || this.blackboard;\n        let notepad = overrides.notepad || {};\n        let result = {};\n        let emitter = new BehaviorEmitter();\n\n        let tree = createTree(blackboard, notepad, result, emitter);\n        let map = {};\n        let i, j, node, id;\n        let ids = Object.keys(tree);\n        let namespace = \"\", ns;\n\n        for(i = 0; i < ids.length; i++) {\n            id = ids[i];\n            node = tree[id];\n            namespace = node['asset-pack'] || \"core\";\n            if (namespace === \"project\" && overrides.assetPack) {\n                namespace = overrides.assetPack;\n            }\n            ns = this._behaviors[namespace];\n\n            if (!ns) {\n                throw new Error(\"Namespace '\" + namespace + \"' is not registered with the behavior factory\");\n            }\n            else if(!ns[node.class]) {\n                throw new Error(\"Behavior '\" + node.class + \"' in namespace '\" + namespace + \"' is not registered with the behavior factory\");\n            }\n            else if (Array.isArray(node.args)) {\n                throw new Error(\"Behavior '\" + node.class + \"' options are invalid, re-run behaviorify\");\n            }\n\n            let Constructor = ns[node.class];\n            // let args = node.args ? [node.name].concat(node.args) : [node.name];\n            // map[id] = Constructor.apply(null, args);\n            let options = Object.assign({\n                name: node.name,\n                emitter: emitter,\n                blackboard: blackboard,\n                assetPack: overrides.assetPack || \"\"\n            }, node.options || {});\n            map[id] = new Constructor(options);\n        }\n\n        let possibleRoots = {};\n        for(i = 0; i < ids.length; i++) {\n            id = ids[i];\n            node = tree[id];\n            if(!node.parent) {\n                possibleRoots[node.id] = true;\n            }\n            if(node.skipped) {\n                delete possibleRoots[node.id];\n                continue;\n            }\n            let behavior = map[node.id];\n            if(node.children) {\n                let children = [];\n                for(j = 0; j < node.children.length; j++) {\n                    let childId = node.children[j];\n                    let child = map[childId];\n                    if(!tree[childId].skipped){\n                        children.push(child);\n                    }\n                }\n                behavior.children = children;\n            }\n            if (node.decorators) {\n                let decorators = [];\n                for(j = 0; j < node.decorators.length; j++) {\n                    let decorator = map[node.decorators[j]];\n                    delete possibleRoots[node.decorators[j]];\n                    if (!tree[node.decorators[j]].skipped){\n                        decorators.push(decorator);\n                    }\n                }\n                if(decorators.length > 0) {\n                    behavior.decorators = decorators;\n                }\n            }\n        }\n        let root = map[Object.keys(possibleRoots)[0]];\n        return new BehaviorTree(root, this.blackboard, notepad, result, emitter);\n    }\n}\n\nexport default Factory;"],"sourceRoot":"/source/"}