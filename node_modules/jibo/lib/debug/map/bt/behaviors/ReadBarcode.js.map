{"version":3,"sources":["bt/behaviors/ReadBarcode.js"],"names":[],"mappings":";;;;;;AAAA,yBAAqB,aAAa,CAAC,CAAA;AACnC,uBAAmB,WAAW,CAAC,CAAA;AAC/B,wBAAoB,eAAe,CAAC,CAAA;AAGpC;;;;;;;;GAQG;AAEH;;;;;;;GAOG;AACH;IAAyC,+BAAQ;IAC7C,qBAAY,OAAO;QACf,kBAAM,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,OAAO,CAAC;IACjC,CAAC;IACD,2BAAK,GAAL;QAAA,iBAOC;QANG,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,WAAW,CAAC;QACjC,iBAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,UAAC,KAAK,EAAE,IAAI;YACzC,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpC,KAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,SAAS,CAAC;QACnC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IACD,4BAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IACL,kBAAC;AAAD,CAhBA,AAgBC,CAhBwC,kBAAQ,GAgBhD;AAhBD;6BAgBC,CAAA","file":"bt/behaviors/ReadBarcode.js","sourcesContent":["import Behavior from '../Behavior';\nimport Status from '../Status';\nimport Runtime from '../../Runtime';\n\n\n/**\n * Function that returns the options object.\n * @callback module:jibo/bt/behaviors.ReadBarcode~onBarcode\n * @param {string|null} error `null` if no error.\n * @param {Object} data The result of the  barcode if one is found.\n * @param {number} data.type The type of barcode found. The types are 0 (EAN8), 1 (UPCE), 2 (ISBN10), 3 (UPCA), 4 (EAN13),\n *                           5 (ISBN13), 6 (Interleaved 2 of 5), 7 (Code 39), 8 (PDF417), 9 (QR-Code), 10 (Code 128).\n * @param {String} data.content The payload of the detected barcode.\n */\n\n/**\n * @class ReadBarcode\n * @extends module:jibo/bt.Behavior\n * @memberof module:jibo/bt/behaviors\n * @description Makes Jibo take a photo and search for a barcode or QR code in that image.\n * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.\n * @param {module:jibo/bt/behaviors.ReadBarcode~onBarcode} options.onBarcode Called after Jibo takes a picture. The results are passed to this function.\n */\nexport default class ReadBarcode extends Behavior {\n    constructor(options) {\n        super(options);\n        this.status = Status.INVALID;\n    }\n    start() {\n        this.status = Status.IN_PROGRESS;\n        Runtime.instance.lps.readBarcode((error, data) => {\n            this.options.onBarcode(error, data);\n            this.status = Status.SUCCEEDED;\n        });\n        return true;\n    }\n    update() {\n        return this.status;\n    }\n}"],"sourceRoot":"/source/"}