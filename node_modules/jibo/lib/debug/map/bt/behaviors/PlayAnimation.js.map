{"version":3,"sources":["bt/behaviors/PlayAnimation.js"],"names":[],"mappings":"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","file":"bt/behaviors/PlayAnimation.js","sourcesContent":["import Behavior from '../Behavior';\nimport Status from '../Status';\nimport jibo from '../../jibo';\nimport PathUtils from '../../utils/PathUtils';\nimport KeysAnimation from '../../rendering/animation/KeysAnimation';\n\n/**\n * @class PlayAnimation\n * @extends module:jibo/bt.Behavior\n * @memberof module:jibo/bt/behaviors\n * @description Plays the animation specified by `animPath`. Succeeds when the animation is finished playing. Playing an\n *              animation consists of two phases: the transition phase and the play phase. The transition phase will\n *              transition Jibo from his current position to the start position this the specified animation. The play\n *              phase, plays the animation with the current configuration.\n * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.\n * @param {String} options.animPath The path to the `.keys` file. This behaviuor assumes `${project}/animations` is the root for\n *                          all the animations.\n * @param {Function} options.config Called and passed a {@link AnimationBuilder} object for configuration purposes. Do not call\n *                          {@link AnimationBuilder#play}. This is done automatically by the behavior.\n * @param {Boolean} [options.cache=true] True to cache the animation. False to play once and destroy.\n */\nexport default class PlayAnimation extends Behavior {\n    constructor(options) {\n        super(options);\n\n        //backward support\n        if (typeof this.options.cache === 'undefined') {\n            this.options.cache = true;\n        }\n\n        //backward support\n        if (typeof this.options.upload === 'undefined') {\n            this.options.upload = true;\n        }\n        \n        //first default this asset to the 'animations' folder\n        this.alias = PathUtils.setDefaultPath('animations', options.animPath);\n\n        // Reference to the builder\n        this.animation = null;\n\n        // Bound function\n        this.onEvent = this.onEvent.bind(this);\n        this.status = Status.INVALID;\n        this.cache = this.options.cache;\n    }\n\n    start() {\n        this.status = Status.IN_PROGRESS;\n        const animation = jibo.loader.cached(this.alias);\n\n        // Don't reload the animation, it's already cached\n        if (this.cache && animation) {\n            animation.reset();\n            this.onKeysLoaded(null, animation);\n        }\n        // Load the animation\n        else {\n            const src = PathUtils.getAssetUri(this.alias, this.assetPack);\n            jibo.loader.load({\n                id: this.alias,\n                cache: true,\n                src: src,\n                upload: this.options.upload,\n                root: PathUtils.findRoot(src),\n                type: 'keys',\n                complete: this.onKeysLoaded.bind(this)\n            });\n        }\n        return true;\n    }\n\n    onKeysLoaded(err, animation)\n    {\n        if (err) {\n            this.status = Status.FAILED;\n            return;\n        }\n        // Add instances\n        this.animation = animation;\n\n        // Listen for stopped event\n        this.animation.on(KeysAnimation.STOPPED, () => {\n            this.reset();\n            this.status = Status.SUCCEEDED;\n        });\n        // register for all events\n        this.animation.on(KeysAnimation.EVENT, this.onEvent);\n        if (this.options.config) {\n            this.options.config(this.animation);\n        }\n        this.instance = this.animation.builder.play();\n    }\n\n    stop() {\n        if (!this.instance) {\n            this.instance.stop();\n        }\n        this.reset();\n    }\n\n    reset() {\n        if (this.animation) {\n            // de-register for these events if animation stopped\n            this.animation.removeListener(KeysAnimation.EVENT, this.onEvent);\n        }\n        this.animation = null;\n        if (!this.cache) {\n            jibo.loader.unload(this.alias);\n        }\n    }\n\n    onEvent(eventType, animInstance, payload) {\n        jibo.behaviorEmitter.emit(\n            payload.eventName,\n            animInstance,\n            payload.payload\n        );\n    }\n\n    update() {\n        return this.status;\n    }\n}"],"sourceRoot":"/source/"}