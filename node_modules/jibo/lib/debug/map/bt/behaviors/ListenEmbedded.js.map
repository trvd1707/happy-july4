{"version":3,"sources":["bt/behaviors/ListenEmbedded.js"],"names":[],"mappings":";;;;;;AAAA,yBAAqB,aAAa,CAAC,CAAA;AACnC,kCAA8B,iCAAiC,CAAC,CAAA;AAChE,qBAAiB,QAAQ,CAAC,CAAA;AAE1B;;GAEG;AAEH;;;;GAIG;AAEH;;;;;;;;;GASG;AACH;IAA6B,kCAAQ;IACjC,wBAAY,OAAO;QACf,kBAAM,OAAO,CAAC,CAAC;QACf,IAAI,SAAS,GAAG,IAAI,2BAAiB,CAAC;YAClC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;YACvB,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC/B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;SAC5B,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAI,CAAC;YACrB,UAAU,EAAE,CAAC,SAAS,CAAC;SAC1B,CAAC,CAAC;IACP,CAAC;IACD,8BAAK,GAAL;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAClC,CAAC;IACD,6BAAI,GAAJ;QACI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IACD,+BAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;IACL,qBAAC;AAAD,CAvBA,AAuBC,CAvB4B,kBAAQ,GAuBpC;AAED;;;;;GAKG;AACH,cAAc,CAAC,KAAK,GAAG;IACnB;;OAEG;IACH,QAAQ,EAAE,UAAU;CACvB,CAAC;AAEF;kBAAe,cAAc,CAAC","file":"bt/behaviors/ListenEmbedded.js","sourcesContent":["import Behavior from '../Behavior';\nimport SucceedOnEmbedded from '../decorators/SucceedOnEmbedded';\nimport Null from './Null';\n\n/**\n * @typedef {Object} jibo.bt.behaviors.ListenEmbedded~Options\n */\n\n/**\n * Called when the {@link module:jibo/bt.EmbeddedListenEmitter|EmbeddedListenEmitter} is constructed.\n * @callback module:jibo/bt/behaviors.ListenEmbedded~OnResult\n * @param {module:jibo/bt.EmbeddedListenEmitter} listener Use this instance to listen for listen events.\n */\n\n/**\n * @class ListenEmbedded\n * @extends module:jibo/bt.Behavior\n * @memberof module:jibo/bt/behaviors\n * @description Succeeds when when the specified audio phrase is spotted.\n * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.\n * @param {module:jibo/bt/behaviors.ListenEmbedded~Rules} options.rule The embedded rule to listen for.\n * @param {module:jibo/bt/behaviors.ListenEmbedded~OnResult} options.onResult Called and passed a {@link module:jibo/bt.EmbeddedListenEmitter|EmbeddedListenEmitter} object. Events are\n *                                     fired from the emitter at certain points in this behavior's lifecycle.\n */\nclass ListenEmbedded extends Behavior {\n    constructor(options) {\n        super(options);\n        let decorator = new SucceedOnEmbedded({\n            rule: this.options.rule,\n            onResult: this.options.onResult,\n            emitter: this.emitter,\n            blackboard: this.blackboard,\n            assetPack: this.assetPack\n        });\n        this.behavior = new Null({\n            decorators: [decorator]\n        });\n    }\n    start() {\n        return this.behavior._start();\n    }\n    stop() {\n        this.behavior._stop();\n    }\n    update() {\n        return this.behavior._update();\n    }\n}\n\n/**\n * Embedded listen rule types.\n * @name module:jibo/bt/behaviors.ListenEmbedded~Rules\n * @readOnly\n * @enum {String}\n */\nListenEmbedded.Rules = {\n    /** \n     * Listen for \"Hey Jibo\" \n     */\n    HEY_jibo: \"hey_jibo\"\n};\n\nexport default ListenEmbedded;"],"sourceRoot":"/source/"}