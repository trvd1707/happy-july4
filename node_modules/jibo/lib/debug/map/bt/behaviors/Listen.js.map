{"version":3,"sources":["bt/behaviors/Listen.js"],"names":[],"mappings":";;;;;;AAAA,yBAAqB,aAAa,CAAC,CAAA;AACnC,qBAAiB,QAAQ,CAAC,CAAA;AAC1B,gCAA4B,+BAA+B,CAAC,CAAA;AAE5D;;;;;;GAMG;AAEH;;;;GAIG;AAEH;;;;GAIG;AAGH;;;;;;;;;;GAUG;AACH;IAAoC,0BAAQ;IACxC,gBAAY,OAAO;QACf,kBAAM,OAAO,CAAC,CAAC;QACf,IAAI,SAAS,GAAG,IAAI,yBAAe,CAAC;YAChC,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;SAC5B,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAI,CAAC;YACrB,UAAU,EAAE,CAAC,SAAS,CAAC;SAC1B,CAAC,CAAC;IACP,CAAC;IACD,sBAAK,GAAL;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAClC,CAAC;IACD,qBAAI,GAAJ;QACI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IACD,uBAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;IACL,aAAC;AAAD,CAxBA,AAwBC,CAxBmC,kBAAQ,GAwB3C;AAxBD;wBAwBC,CAAA","file":"bt/behaviors/Listen.js","sourcesContent":["import Behavior from '../Behavior';\nimport Null from './Null';\nimport SucceedOnListen from '../decorators/SucceedOnListen';\n\n/**\n * @typedef {Object} module:jibo/bt/behaviors.Listen~Options\n * @property {boolean} heyJibo Listen for \"Hey, Jibo\" first.\n * @property {boolean} detectEnd Listen for end of speech.\n * @property {boolean} incremental Return incremental ASR results as they are streamed from the cloud.\n * @property {String} authenticateSpeaker Authenticates against that person.\n */\n\n/**\n * Function that returns the options object.\n * @callback module:jibo/bt/behaviors.Listen~GetOptions\n * @returns {module:jibo/bt/behaviors.Listen~Options}\n */\n\n/**\n * Function that returns the options object.\n * @callback module:jibo/bt/behaviors.Listen~OnResult\n * @param {module:jibo/bt.ListenEmitter} listener Use this instance to listen for listen events.\n */\n\n\n/**\n * @class Listen\n * @extends module:jibo/bt.Behavior\n * @memberof module:jibo/bt/behaviors\n * @description Performs audio speech recognition and applies and parses the results according to a rules file.\n * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.\n * @param {module:jibo/bt/behaviors.Listen~GetOptions} options.getOptions Returns the options object.\n * @param {String} options.rule Path the to `.rule` file. This assumes the path starts at `${project}/rules`.\n * @param {module:jibo/bt/behaviors.Listen~OnResult} options.onResult Called and passed a {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} object. Events are fired from the Listener\n *                                   at certain points in this behavior's lifecycle.\n */\nexport default class Listen extends Behavior {\n    constructor(options) {\n        super(options);\n        let decorator = new SucceedOnListen({\n            getOptions: options.getOptions, \n            rule: options.rule,\n            onResult: options.onResult,\n            emitter: this.emitter,\n            blackboard: this.blackboard,\n            assetPack: this.assetPack\n        });\n        this.behavior = new Null({\n            decorators: [decorator]\n        });\n    }\n    start() {\n        return this.behavior._start();\n    }\n    stop() {\n        this.behavior._stop();\n    }\n    update() {\n        return this.behavior._update();\n    }\n}"],"sourceRoot":"/source/"}