{"version":3,"sources":["bt/behaviors/PlayAudio.js"],"names":[],"mappings":";;;;;;AAAA,yBAAqB,aAAa,CAAC,CAAA;AACnC,uBAAmB,WAAW,CAAC,CAAA;AAC/B,0BAAsB,uBAAuB,CAAC,CAAA;AAC9C,qBAAiB,YAAY,CAAC,CAAA;AAE9B;;;;;;;;;GASG;AACH;IAAuC,6BAAQ;IAC3C,mBAAY,OAAO;QACf,kBAAM,OAAO,CAAC,CAAC;QAEf,kBAAkB;QAClB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;QAC9B,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IACD,yBAAK,GAAL;QACI,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,WAAW,CAAC;QAEjC,IAAM,KAAK,GAAG,cAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,CAAC;YACF,cAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACb,IAAI,EAAE,OAAO;gBACb,EAAE,EAAE,IAAI,CAAC,KAAK;gBACd,GAAG,EAAE,mBAAS,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC;gBACtD,KAAK,EAAE,IAAI;gBACX,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;aACrC,CAAC,CAAC;QACP,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,4BAAQ,GAAR,UAAS,GAAG,EAAE,KAAK;QAAnB,iBAMC;QALG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACZ,KAAI,CAAC,KAAK,EAAE,CAAC;YACb,KAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,SAAS,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wBAAI,GAAJ;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACtB,CAAC;QACD,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAED,yBAAK,GAAL;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,cAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;IACL,CAAC;IACD,0BAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IACL,gBAAC;AAAD,CAzDA,AAyDC,CAzDsC,kBAAQ,GAyD9C;AAzDD;2BAyDC,CAAA","file":"bt/behaviors/PlayAudio.js","sourcesContent":["import Behavior from '../Behavior';\nimport Status from '../Status';\nimport PathUtils from '../../utils/PathUtils';\nimport jibo from '../../jibo';\n\n/**\n * @class PlayAudio\n * @extends module:jibo/bt.Behavior\n * @memberof module:jibo/bt/behaviors\n * @description Plays the audio specified by `audioPath`. Succeeds when the audio file is finished playing.\n * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.\n * @param {String} options.audioPath The path to any audo file format supported by HTML5 Audio. This behaviuor assumes `${project}/audio`\n *                           is the root for all the audio files.\n * @param {Boolean} options.cache=true True to cache the audio. False to play once and destroy.\n */\nexport default class PlayAudio extends Behavior {\n    constructor(options) {\n        super(options);\n\n        //backward support\n        if (typeof this.options.cache === 'undefined') {\n            this.options.cache = true;\n        }\n\n        this.status = Status.INVALID;\n        this.alias = this.options.audioPath;\n        this.cache = this.options.cache;\n        this.sound = null;\n    }\n    start() {\n        this.status = Status.IN_PROGRESS;\n\n        const sound = jibo.loader.cached(this.alias);\n        if (this.cache && sound) {\n            this.onLoaded(null, sound);\n        }\n        else {\n            jibo.loader.load({\n                type: 'sound',\n                id: this.alias, \n                src: PathUtils.getAudioUri(this.alias, this.assetPack),\n                cache: true,\n                complete: this.onLoaded.bind(this)\n            });\n        }\n        return true;\n    }\n\n    onLoaded(err, sound) {\n        this.sound = sound;\n        this.sound.play(() => {\n            this.reset();\n            this.status = Status.SUCCEEDED;\n        });\n    }\n    \n    stop() {\n        if (this.sound) {\n            this.sound.stop();\n        }\n        this.reset();\n    }\n\n    reset() {\n        this.sound = null;\n        if (!this.cache) {\n            jibo.loader.unload(this.alias);\n        }\n    }\n    update() {\n        return this.status;\n    }\n}"],"sourceRoot":"/source/"}