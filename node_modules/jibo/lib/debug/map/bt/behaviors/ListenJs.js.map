{"version":3,"sources":["bt/behaviors/ListenJs.js"],"names":[],"mappings":";;;;;;AAAA,yBAAqB,aAAa,CAAC,CAAA;AACnC,kCAA8B,iCAAiC,CAAC,CAAA;AAChE,qBAAiB,QAAQ,CAAC,CAAA;AAE1B;;;;;;GAMG;AAEH;;;;GAIG;AAEH;;;;GAIG;AAEH;;;;;;;;;;;GAWG;AACH;IAAsC,4BAAQ;IAC1C,kBAAY,OAAO;QACf,kBAAM,OAAO,CAAC,CAAC;QACf,IAAI,SAAS,GAAG,IAAI,2BAAiB,CAAC;YAClC,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;SAC5B,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAI,CAAC;YACrB,UAAU,EAAE,CAAC,SAAS,CAAC;SAC1B,CAAC,CAAC;IACP,CAAC;IACD,wBAAK,GAAL;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAClC,CAAC;IACD,uBAAI,GAAJ;QACI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC;IACD,yBAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;IACL,eAAC;AAAD,CAxBA,AAwBC,CAxBqC,kBAAQ,GAwB7C;AAxBD;0BAwBC,CAAA","file":"bt/behaviors/ListenJs.js","sourcesContent":["import Behavior from '../Behavior';\nimport SucceedOnListenJs from '../decorators/SucceedOnListenJs';\nimport Null from './Null';\n\n/**\n * @typedef {Object} module:jibo/bt/behaviors.ListenJs~Options\n * @property {boolean} heyJibo Listen for \"Hey, Jibo\" first.\n * @property {boolean} detectEnd Listen for end of speech.\n * @property {boolean} incremental Return incremental ASR results as they are streamed from the cloud.\n * @property {String} authenticateSpeaker Authenticates against that person.\n */\n\n/**\n * Function that returns the options object.\n * @callback module:jibo/bt/behaviors.ListenJs~GetOptions\n * @returns {module:jibo/bt/behaviors.ListenJs~Options}\n */\n\n/**\n * Called when the {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} is constructed.\n * @callback module:jibo/bt/behaviors.ListenJs~OnResult\n * @param {module:jibo/bt.ListenEmitter} listener Use this instance to listen for listen events.\n */\n\n/**\n * @class ListenJs\n * @extends module:jibo/bt.Behavior\n * @memberof module:jibo/bt/behaviors\n * @description Performs audio speech recognition and applies and parses the results according to a rules file.\n * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.\n * @param {module:jibo/bt/behaviors.ListenJs~GetOptions} options.getOptions Returns the options object.\n * @param {Function} options.getRule This function returns a string representation of a rule. Use this behavior to dynamically generate rules files instead\n *                      of loading a rule file from disk.\n * @param {module:jibo/bt/behaviors.ListenJs~OnResult} options.onResult Called and passed a {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} object. Events are fired from the Listener\n *                                   at certain points in this behavior's lifecycle.\n */\nexport default class ListenJs extends Behavior {    \n    constructor(options) {\n        super(options);\n        let decorator = new SucceedOnListenJs({\n            getOptions: options.getOptions,\n            getRule: options.getRule,\n            onResult: options.onResult,\n            emitter: this.emitter,\n            blackboard: this.blackboard,\n            assetPack: this.assetPack\n        });\n        this.behavior = new Null({\n            decorators: [decorator]\n        });\n    }\n    start() {\n        return this.behavior._start();\n    }\n    stop() {\n        this.behavior._stop();\n    }\n    update() {\n        return this.behavior._update();\n    }\n}"],"sourceRoot":"/source/"}