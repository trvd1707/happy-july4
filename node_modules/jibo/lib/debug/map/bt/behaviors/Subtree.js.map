{"version":3,"sources":["bt/behaviors/Subtree.ts"],"names":[],"mappings":";;;;;;AAAA,yBAAqB,aAAa,CAAC,CAAA;AACnC,uBAAmB,WAAW,CAAC,CAAA;AAC/B,wBAAoB,eAAe,CAAC,CAAA;AACpC,0BAAsB,uBAAuB,CAAC,CAAA;AAE9C;;;;;;;;;;;;;GAaG;AACH;IAAqC,2BAAQ;IAIzC,iBAAY,OAAW;QACnB,kBAAM,OAAO,CAAC,CAAC;QAEf,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QAC7C,CAAC;QACD,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,sBAAI,iCAAY;aAAhB,UAAiB,YAAmB;YAChC,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,mBAAS,CAAC,cAAc,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAChF,IAAI,CAAC,SAAS,GAAG,mBAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAC1D,CAAC;;;OAAA;IAED,uBAAK,GAAL;QACI,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,WAAW,CAAC;QACjC,IAAM,GAAG,GAAG,mBAAS,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7E,IAAI,CAAC,IAAI,GAAG,iBAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE;YACxC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;YAClC,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;SAC5B,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,MAAM,CAAC;QAC9D,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,sBAAI,GAAJ;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,CAAC;IACL,CAAC;IACD,wBAAM,GAAN;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,gBAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;QACD,IAAI,MAAM,GAAU,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAEvC,EAAE,CAAC,CAAC,MAAM,KAAK,gBAAM,CAAC,SAAS,IAAI,MAAM,KAAK,gBAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,cAAC;AAAD,CArDA,AAqDC,CArDoC,kBAAQ,GAqD5C;AArDD;yBAqDC,CAAA","file":"bt/behaviors/Subtree.js","sourcesContent":["import Behavior from '../Behavior';\nimport Status from '../Status';\nimport Runtime from '../../Runtime';\nimport PathUtils from '../../utils/PathUtils';\n\n/**\n * @class Subtree\n * @extends module:jibo/bt.Behavior\n * @memberof module:jibo/bt/behaviors\n * @description Encapsulates an external subtree file (`.bt` file) into a single behavior. This behavior fails if the\n * `.bt` tree fails, and succeeds if that tree succeeds.\n * @param {Object} options See {@link module:jibo/bt.Behavior|Behavior} for all options.\n * @param {String} options.behaviorPath The path to the `.bt` file this behavior encapsulates. This assumes the root\n *                          of all `.bt` files is in `${project}/behaviors`.\n * @param {Function} options.getNotepad Returns an object that will become this referenced tree's notepad. Think of this as the\n *                              arguments to this subtree.\n * @param {Function} options.onResult Called when the external tree either fails or succeeds. A result object is passed as an argument.\n *                            This result object is populated by the external tree. Think of this as the return value.\n */\nexport default class Subtree extends Behavior {\n\n    public root:any;\n\n    constructor(options:any) {\n        super(options);\n\n        if (options.behaviorPath) {\n            this.behaviorPath = options.behaviorPath;\n        }\n        this.status = Status.INVALID;\n        this.root = null;\n    }\n\n    set behaviorPath(behaviorPath:string) {\n        this.options.behaviorPath = PathUtils.setDefaultPath('behaviors', behaviorPath);\n        this.assetPack = PathUtils.getAssetPack(behaviorPath);\n    }\n\n    start():boolean {\n        this.status = Status.IN_PROGRESS;\n        const uri = PathUtils.getAssetUri(this.options.behaviorPath, this.assetPack);\n        this.root = Runtime.instance.bt.create(uri, {\n            notepad: this.options.getNotepad(),\n            blackboard: this.blackboard,\n            assetPack: this.assetPack\n        });\n        this.status = this.root.start() ? this.status : Status.FAILED;\n        return true;\n    }\n\n    stop():void {\n        if (this.root) {\n            this.root.stop();\n            this.root = null;\n        }\n    }\n    update():Status {\n        if (this.status === Status.FAILED) {\n            this.root = null;\n            return this.status;\n        }\n        if (!this.root) {\n            return this.status;\n        }\n        let status:Status = this.root.update();\n\n        if (status === Status.SUCCEEDED || status === Status.FAILED) {\n            this.options.onResult(this.root.result);\n            this.root = null;\n        }\n        return status;\n    }\n}\n"],"sourceRoot":"/source/"}