{"version":3,"sources":["bt/BaseElement.ts"],"names":[],"mappings":";AAAA,uBAAmB,UAAU,CAAC,CAAA;AAI9B;;;;;;;;;;GAUG;AACH;IASI,qBAAY,OAAO,EAAE,cAAc;QAF5B,YAAO,GAAU,gBAAM,CAAC,OAAO,CAAC;QAGnC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,cAAc,GAAG,cAAc,IAAI,EAAE,CAAC;QAEtC;;;;;WAKG;QACH;;;;;WAKG;QACH,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,IAAI;YAChB,SAAS,EAAE,EAAE;SAChB,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;QAE5B;;;;;WAKG;QACH,IAAI,CAAC,OAAO,GAAG,gBAAM,CAAC,OAAO,CAAC;QAE9B;;;;;WAKG;QACH;;;;;WAKG;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;QAE1C;;;;;WAKG;QACH;;;;;WAKG;QACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QAEpC;;;;;WAKG;QACH;;;;;WAKG;QACH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC;IAClD,CAAC;IAcD,sBAAI,6BAAI;QAZR;;;;;WAKG;QACH;;;;;WAKG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAC7B,CAAC;;;OAAA;IAcD,sBAAI,sCAAa;QAZjB;;;;;WAKG;QACH;;;;;WAKG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;;;OAAA;IAED;;;;OAIG;IACH;;;;OAIG;IACH,2BAAK,GAAL;QACI,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACH;;;OAGG;IACH,0BAAI,GAAJ;QACI,MAAM,CAAC;IACX,CAAC;IACL,kBAAC;AAAD,CA5IA,AA4IC,IAAA;AAED;kBAAe,WAAW,CAAC","file":"bt/BaseElement.js","sourcesContent":["import Status from './Status';\nimport Blackboard from \"./Blackboard\";\nimport BehaviorEmitter from \"./BehaviorEmitter\";\n\n/**\n * @class BaseElement\n * @memberof module:jibo/bt\n * @private\n * @description Parent class for Behavior and Decorator.\n * \n * Subclasses: {@link module:jibo/bt/behaviors.Behavior|Behavior}, {@link module:jibo/bt/behaviors.ParentBehavior|ParentBehavior}, {@link module:jibo/bt/behaviors.Decorator|Decorator}\n *\n * @constructor\n * @param {Object} [options] Options for the behavior \n */\nabstract class BaseElement\n{\n    public status:Status;\n    public blackboard:Blackboard;\n    public emitter:BehaviorEmitter;\n    public options:any;\n    public assetPack: string;\n    public _status:Status = Status.INVALID;\n\n    constructor(options, defaultOptions) {\n        options = options || {};\n        defaultOptions = defaultOptions || {};\n\n        /**\n         * The list of options\n         * @name module:jibo/bt.Behavior~options\n         * @type {Object} \n         * @readOnly\n         */\n        /**\n         * The list of options\n         * @name module:jibo/bt.Decorator~options\n         * @type {Object} \n         * @readOnly\n         */\n        this.options = Object.assign({\n            name: \"\", \n            emitter: null,\n            blackboard: null,\n            assetPack: \"\"\n        }, defaultOptions, options);\n\n        /**\n         * The current internal status of the element\n         * @name module:jibo/bt.BaseElement~_status\n         * @type {String} \n         * @private\n         */\n        this._status = Status.INVALID;\n\n        /**\n         * Instance of the blackboard\n         * @name module:jibo/bt.Behavior~blackboard\n         * @type {module:jibo/bt.Blackboard} \n         * @readOnly\n         */\n        /**\n         * Instance of the blackboard\n         * @name module:jibo/bt.Decorator~blackboard\n         * @type {module:jibo/bt.Blackboard} \n         * @readOnly\n         */\n        this.blackboard = this.options.blackboard;\n\n        /** \n         * Instance of the behavior emitter\n         * @name module:jibo/bt.Behavior~emitter\n         * @type {module:jibo/bt.BehaviorEmitter} \n         * @readOnly\n         */\n        /** \n         * Instance of the behavior emitter\n         * @name module:jibo/bt.Decorator~emitter\n         * @type {module:jibo/bt.BehaviorEmitter} \n         * @readOnly\n         */\n        this.emitter = this.options.emitter;\n\n        /** \n         * Name of the asset pack\n         * @name module:jibo/bt.Behavior~assetPack\n         * @type {String} \n         * @readOnly\n         */\n        /** \n         * Name of the asset pack\n         * @name module:jibo/bt.Decorator~assetPack\n         * @type {String} \n         * @readOnly\n         */\n        this.assetPack = this.options.assetPack || \"\";\n    }\n\n    /**\n     * Name of the behavior\n     * @name module:jibo/bt.Behavior~name\n     * @type {String}\n     * @readOnly\n     */\n    /**\n     * Name of the behavior\n     * @name module:jibo/bt.Decorator~name\n     * @type {String}\n     * @readOnly\n     */\n    get name():string {\n        return this.options.name;\n    }\n\n    /**\n     * Get the current status\n     * @name module:jibo/bt.Behavior~currentStatus\n     * @type {String}\n     * @readOnly\n     */\n    /**\n     * Get the current status\n     * @name module:jibo/bt.Decorator~currentStatus\n     * @type {String}\n     * @readOnly\n     */\n    get currentStatus():Status {\n        return this._status;\n    }\n\n    /**\n     * Starts the behavior or decorator\n     * @method module:jibo/bt.Decorator~start\n     * @returns {Boolean} `true` if this element is started successfully. `false` otherwise.\n     */\n    /**\n     * Starts the behavior or decorator\n     * @method module:jibo/bt.Behavior~start\n     * @returns {Boolean} `true` if this element is started successfully. `false` otherwise.\n     */\n    start():boolean {\n        return true;\n    }\n\n    /**\n     * Stops the behavior or decorator, must override\n     * @method module:jibo/bt.Behavior~stop\n     */\n    /**\n     * Stops the behavior or decorator, must override\n     * @method module:jibo/bt.Decorator~stop\n     */\n    stop():void {\n        return;\n    }\n}\n\nexport default BaseElement;\n"],"sourceRoot":"/source/"}