{"version":3,"sources":["bt/decorators/Case.js"],"names":[],"mappings":";;;;;;AAAA,0BAAsB,cAAc,CAAC,CAAA;AAErC;;;GAGG;AAEH;;;;;;;;;;GAUG;AACH;IAAkC,wBAAS;IAA3C;QAAkC,8BAAS;IAO3C,CAAC;IANA,oBAAK,GAAL;QACC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC;IACE,qBAAM,GAAN,UAAO,MAAM;QACT,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,WAAC;AAAD,CAPA,AAOC,CAPiC,mBAAS,GAO1C;AAPD;sBAOC,CAAA","file":"bt/decorators/Case.js","sourcesContent":["import Decorator from '../Decorator';\n\n/**\n * @callback module:jibo/bt/decorators.Case~CaseConditional\n * @returns {boolean} Return `true` to succeed the decorated behavior. `false` otherwise.\n */\n\n/**\n * @class Case\n * @extends module:jibo/bt.Decorator\n * @memberof module:jibo/bt/decorators\n * @description\n * Performs a single check before the behavior it's decorating starts. If that check fails, `Case` fails the\n * behavior. Useful for decorating behaviors under a {@link module:jibo/bt/behaviors.Switch|Switch} behavior.\n * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.\n * @param {module:jibo/bt/decorators.Case~CaseConditional} options.conditional Function called every frame.\n * Return `false` when you want component to fail.\n */\nexport default class Case extends Decorator {\n\tstart() {\n\t\treturn this.options.conditional();\n\t}\n    update(result) {\n        return result;\n    }\n}"],"sourceRoot":"/source/"}