{"version":3,"sources":["bt/decorators/SucceedOnListenJs.js"],"names":[],"mappings":"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","file":"bt/decorators/SucceedOnListenJs.js","sourcesContent":["import Decorator from '../Decorator';\nimport Status from '../Status';\nimport {EventEmitter} from 'events';\nimport Runtime from '../../Runtime';\n\n/**\n * @class ListenEmitter\n * @description Used to listen for cloud events.\n * @extends EventEmitter\n * @memberof module:jibo/bt\n */\n\n/**\n * @typedef {Object} module:jibo/bt/decorators.SucceedOnListenJs~Options\n * @property {boolean} heyJibo Listen for \"Hey, Jibo\" first.\n * @property {boolean} detectEnd Listen for end of speech.\n * @property {boolean} incremental Return incremental ASR results as they are streamed from the cloud.\n * @property {String} authenticateSpeaker Authenticates against that person.\n */\n\n/**\n * Function that returns the options object.\n * @callback module:jibo/bt/decorators.SucceedOnListenJs~GetOptions\n * @returns {module:jibo/bt/decorators.SucceedOnListenJs~Options}\n */\n\n\n\n/**\n * Called when the {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} is constructed.\n * @callback module:jibo/bt/decorators.SucceedOnListenJs~OnResult\n * @param {module:jibo/bt.ListenEmitter} listener Use this instance to listen for listen events.\n */\n\n/**\n * @class SucceedOnListenJs\n * @extends module:jibo/bt.Decorator\n * @memberof module:jibo/bt/decorators\n * @description Performs audio speech recognition and applies and parses the results according to a rules file.\n * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.\n * @param {module:jibo/bt/decorators.SucceedOnListenJs~GetOptions} options.getOptions Returns the options object.\n * @param {Function} options.getRule This function returns a string representation of a rule. Use this decorator to dynamically generate rules files instead\n *                      of loading a rule file from disk.\n * @param {module:jibo/bt/decorators.SucceedOnListenJs~OnResult} options.onResult Called and passed a {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} object. Events are fired from the Listener\n *                                   at certain points in this behavior's lifecycle.\n */\nexport default class SucceedOnListenJs extends Decorator {\n    constructor(options) {\n        super(options);\n        this.status = Status.INVALID;\n    }\n    start() {\n        this.starting = true;\n        let options = this.options.getOptions();\n        let asr = Runtime.instance.asr;\n        this.status = Status.IN_PROGRESS;\n        if(!asr.isInitialized) {\n            console.warn('Running listen without ASR service');\n            return true;\n        }\n        this.emitter = new EventEmitter();\n        // read the string from the rule file.\n        this.options.getRule((data) => {\n            this.listener = asr.createListener(options, data);\n            this.listener.start();\n\n            this.listener.on('cloud', (result, speaker) => {\n                /**\n                 * This event is fired when there is a cloud result.\n                 * @event module:jibo/bt.ListenEmitter#cloud\n                 * @param {Object} result\n                 * @param {String} result.Input The text recognized so far.\n                 * @param {Object} result.NLParse Key value pairs from parsing of a `.rule` file.\n                 * @param {Array} speakers Text independent speaker ID results.\n                 */\n                this.emitter.emit('cloud', result, speaker);\n            });\n            this.listener.on('incremental', (result) => {\n                /**\n                 * ASR incremental results.\n                 * @event module:jibo/bt.ListenEmitter#incremental\n                 * @param {Object} result\n                 * @param {Object} result.Input The text recognized so far.\n                 * @param {Object} result.NLParse Key value pairs from parsing of a `.rule` file.\n                 * @param {Function} stop Call this function to succeed the behavior on an incremental result. For example, if an incremental\n                 *                        result returns a valid parse against a rule, then there is no need to continue listening.\n                 */\n                this.emitter.emit('incremental', result, () => {\n                    this.listener.stop();\n                });\n            });\n            this.listener.on('embedded', (result, speaker) => {\n                /**\n                 * An embedded recognition event occurred such as someone saying 'Hey Jibo'.\n                 * @event module:jibo/bt.ListenEmitter#hey-jibo\n                 * @param {Object} result\n                 * @param {String} result.Input The result of an embedded recognition.\n                 * @param {Array} speakers Text dependent speaker ID results.\n                 */\n                this.emitter.emit('hey-jibo', result, speaker);\n            });\n            this.listener.on('end', () => {\n                /**\n                 * Fired when end of speech is detected.\n                 * @event module:jibo/bt.ListenEmitter#end\n                 */\n                this.emitter.emit('end');\n            });\n            this.listener.on('error', (error) => {\n                /**\n                 * Fired when there is an error.\n                 * @event module:jibo/bt.ListenEmitter#error\n                 * @param {String} error\n                 */\n                this.emitter.emit('error', error);\n            });\n            this.listener.on('finished', () => {\n                this.listener.removeAllListeners();\n                this.emitter.removeAllListeners();\n                this.status = Status.SUCCEEDED;\n            });\n            this.options.onResult(this.emitter);\n            this.status = Status.IN_PROGRESS;\n            this.starting = false;\n        });\n\n        return true;\n    }\n\n    stop() {\n        if(!this.starting) {\n            if(this.emitter) {\n                this.emitter.removeAllListeners();\n                this.emitter = undefined;\n            }\n            if(this.listener) {\n                this.listener.removeAllListeners();\n                this.listener.action.stop();\n                this.listener.action.clear();\n                this.listener = undefined;\n            }\n        }\n    }\n\n    update(result) {\n        if(this.status === Status.IN_PROGRESS){\n            return result;\n        }\n        else {\n            return this.status;\n        }\n    }\n}"],"sourceRoot":"/source/"}