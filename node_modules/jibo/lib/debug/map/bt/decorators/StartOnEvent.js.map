{"version":3,"sources":["bt/decorators/StartOnEvent.js"],"names":[],"mappings":";;;;;;AAAA,0BAAsB,cAAc,CAAC,CAAA;AACrC,uBAAmB,WAAW,CAAC,CAAA;AAE/B;;;;;;;;;;GAUG;AACH;IAA0C,gCAAS;IAC/C,sBAAY,OAAO;QACf,kBAAM,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IACD,4BAAK,GAAL;QACI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,MAAM,CAAC,gBAAM,CAAC,IAAI,CAAC;IACvB,CAAC;IACD,+BAAQ,GAAR;QACI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IACD,2BAAI,GAAJ;QACI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvE,CAAC;IACD,6BAAM,GAAN,UAAO,MAAM;QACT,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,gBAAM,CAAC,IAAI,CAAC;QACvB,CAAC;IACL,CAAC;IACL,mBAAC;AAAD,CAzBA,AAyBC,CAzByC,mBAAS,GAyBlD;AAzBD;8BAyBC,CAAA","file":"bt/decorators/StartOnEvent.js","sourcesContent":["import Decorator from '../Decorator';\nimport Status from '../Status';\n\n/**\n * @class StartOnEvent\n * @extends module:jibo/bt.Decorator\n * @memberof module:jibo/bt/decorators\n * @description\n * Prevents the behavior it's decorating from starting until an event is emitter from a behavior tree's\n * global `emitter`.\n * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.\n * @param {String} options.eventName - The name of the event to listen for.\n * @param {Function} options.onEvent - called when the event is fired. Any payload with the event is passed in.\n */\nexport default class StartOnEvent extends Decorator {\n    constructor(options) {\n        super(options);\n        this._onEvent = this._onEvent.bind(this);\n    }\n    start() {\n        this.emitter.once(this.options.eventName, this._onEvent);\n        this.didStart = false;\n        return Status.WAIT;\n    }\n    _onEvent() {\n        this.options.onEvent.apply(null, arguments);\n        this.didStart = true;\n    }\n    stop() {\n        this.emitter.removeListener(this.options.eventName, this._onEvent);\n    }\n    update(result) {\n        if(this.didStart) {\n            return result;\n        }\n        else {\n            return Status.WAIT;\n        }\n    }\n}"],"sourceRoot":"/source/"}