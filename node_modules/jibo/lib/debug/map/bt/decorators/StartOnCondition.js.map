{"version":3,"sources":["bt/decorators/StartOnCondition.js"],"names":[],"mappings":";;;;;;AAAA,0BAAsB,cAAc,CAAC,CAAA;AACrC,uBAAmB,WAAW,CAAC,CAAA;AAE/B;;;GAGG;AAEH;;;;;;;;;;;GAWG;AACH;IAA8C,oCAAS;IACtD,0BAAY,OAAO;QACZ,kBAAM,OAAO,EAAE;YACX,IAAI,EAAE,cAAW,CAAC;SACrB,CAAC,CAAA;QACF,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;IACJ,gCAAK,GAAL;QACC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,gBAAM,CAAC,IAAI,CAAC;QACvB,CAAC;IACR,CAAC;IACD,iCAAM,GAAN,UAAO,MAAM;QACN,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QACD,IAAI,CAAC,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,CAAC;YACF,MAAM,CAAC,gBAAM,CAAC,IAAI,CAAC;QACvB,CAAC;IACR,CAAC;IACF,uBAAC;AAAD,CA9BA,AA8BC,CA9B6C,mBAAS,GA8BtD;AA9BD;kCA8BC,CAAA","file":"bt/decorators/StartOnCondition.js","sourcesContent":["import Decorator from '../Decorator';\nimport Status from '../Status';\n\n/**\n * @callback module:jibo/bt/decorators.StartOnCondition~StartOnConditionConditional\n * @returns {Boolean} `true` when you want component to start.\n */\n\n/**\n * @class StartOnCondition\n * @extends module:jibo/bt.Decorator\n * @memberof module:jibo/bt/decorators\n * @description\n * Prevents the behavior it's decorating from starting until its conditional evaluates to\n * true.\n * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.\n * @param {Function} [options.init] Function called at the start of this behavior. Used to initialize any\n * variables or data.\n * @argument {module:jibo/bt/decorators.StartOnCondition~StartOnConditionConditional} options.conditional - The conditional to evaluate.\n */\nexport default class StartOnCondition extends Decorator {\n\tconstructor(options) {\n        super(options, {\n            init: function(){}\n        })\n        this.didStart = false;\n    }\n\tstart() {\n\t\tthis.options.init();\n        this.didStart = false;\n        if(this.options.conditional()) {\n            this.didStart = true;\n            return true;\n        }\n        else {\n            return Status.WAIT;\n        }\n\t}\n\tupdate(result) {\n        if(this.didStart) {\n            return result;\n        }\n        else if(this.options.conditional()) {\n            this.didStart = true;\n            return true;\n        }\n        else {\n            return Status.WAIT;\n        }\n\t}\n}"],"sourceRoot":"/source/"}