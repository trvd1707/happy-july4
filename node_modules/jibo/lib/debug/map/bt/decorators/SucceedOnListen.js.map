{"version":3,"sources":["bt/decorators/SucceedOnListen.js"],"names":[],"mappings":";;;;;;AAAA,0BAAsB,cAAc,CAAC,CAAA;AACrC,uBAAmB,WAAW,CAAC,CAAA;AAC/B,kCAA8B,qBAAqB,CAAC,CAAA;AACpD,0BAAsB,uBAAuB,CAAC,CAAA;AAC9C,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AAEzB;;;;;;GAMG;AAEH;;;;GAIG;AAGH;;;;GAIG;AAEH;;;;;;;;;;GAUG;AACH;IAA6C,mCAAS;IAClD,yBAAY,OAAO;QACf,kBAAM,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,mBAAS,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;IACxE,CAAC;IACD,+BAAK,GAAL;QAAA,iBAoBC;QAnBG,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,WAAW,CAAC;QACjC,IAAI,OAAO,GAAG,UAAC,QAAQ;YACnB,IAAI,GAAG,GAAG,mBAAS,CAAC,WAAW,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAI,CAAC,SAAS,CAAC,CAAC;YACnE,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,UAAC,GAAG,EAAE,IAAI;gBAC/B,EAAE,CAAA,CAAC,GAAG,CAAC,CAAC,CAAC;oBACL,OAAO,CAAC,KAAK,CAAC,4BAA4B,GAAG,GAAG,CAAC,CAAC;gBACtD,CAAC;gBACD,QAAQ,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,IAAI,2BAAiB,CAAC;YACnC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;YACnC,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC/B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;SAC5B,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IACnC,CAAC;IAED,8BAAI,GAAJ;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED,gCAAM,GAAN,UAAO,MAAM;QACT,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAChB,IAAI,QAAM,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC5C,EAAE,CAAA,CAAC,QAAM,KAAK,gBAAM,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC/B,CAAC;YACD,MAAM,CAAC,QAAM,CAAC;QAClB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IACL,sBAAC;AAAD,CA7CA,AA6CC,CA7C4C,mBAAS,GA6CrD;AA7CD;iCA6CC,CAAA","file":"bt/decorators/SucceedOnListen.js","sourcesContent":["import Decorator from '../Decorator';\nimport Status from '../Status';\nimport SucceedOnListenJs from './SucceedOnListenJs';\nimport PathUtils from '../../utils/PathUtils';\nimport * as fs from 'fs';\n\n/**\n * @typedef {Object} module:jibo/bt/decorators.SucceedOnListen~Options\n * @property {boolean} heyJibo Listen for \"Hey, Jibo\" first.\n * @property {boolean} detectEnd Listen for end of speech.\n * @property {boolean} incremental Return incremental ASR results as they are streamed from the cloud.\n * @property {String} authenticateSpeaker Authenticates against that person.\n */\n\n/**\n * Function that returns the options object.\n * @callback module:jibo/bt/decorators.SucceedOnListen~GetOptions\n * @returns {module:jibo/bt/decorators.SucceedOnListen~Options}\n */\n\n\n/**\n * Called when the {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} is constructed.\n * @callback module:jibo/bt/decorators.SucceedOnListen~OnResult\n * @param {module:jibo/bt.ListenEmitter} listener Use this instance to listen for listen events.\n */\n\n/**\n * @class SucceedOnListen\n * @extends module:jibo/bt.Decorator\n * @memberof module:jibo/bt/decorators\n * @description Performs audio speech recognition and applies and parses the results according to a rules file.\n * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.\n * @param {module:jibo/bt/decorators.SucceedOnListen~GetOptions} getOptions Returns the options object.\n * @param {String} options.rule Path the to `.rule` file. This assumes the path starts at `${project}/rules`.\n * @param {module:jibo/bt/decorators.SucceedOnListen~OnResult} options.onResult Called and passed a {@link module:jibo/bt/behaviors.ListenEmitter|ListenEmitter} object. Events are fired from the Listener\n *                                   at certain points in this behavior's lifecycle.\n */\nexport default class SucceedOnListen extends Decorator {\n    constructor(options) {\n        super(options);\n        this.status = Status.INVALID;\n        this.options.rule = PathUtils.setDefaultPath('rules', options.rule);\n    }\n    start() {\n        this.status = Status.IN_PROGRESS;\n        let getRule = (callback) => {\n            let uri = PathUtils.getAssetUri(this.options.rule, this.assetPack);\n            fs.readFile(uri, 'utf8', (err, data) => {\n                if(err) {\n                    console.error('Rule file does not exist: ' + uri);\n                }\n                callback(data);\n            });\n        };\n        this.decorator = new SucceedOnListenJs({\n            getOptions: this.options.getOptions,\n            getRule: getRule,\n            onResult: this.options.onResult,\n            emitter: this.emitter,\n            blackboard: this.blackboard,\n            assetPack: this.assetPack\n        });\n        return this.decorator._start();\n    }\n\n    stop() {\n        if(this.decorator) {\n            this.decorator._stop();\n        }\n        this.decorator = undefined;\n    }\n\n    update(result) {\n        if(this.decorator) {\n            let status = this.decorator._update(result);\n            if(status === Status.SUCCEEDED) {\n                this.decorator = undefined;\n            }\n            return status;\n        }\n        return this.status;\n    }\n}"],"sourceRoot":"/source/"}