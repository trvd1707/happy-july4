{"version":3,"sources":["bt/decorators/WhileCondition.js"],"names":[],"mappings":";;;;;;AAAA,0BAAsB,cAAc,CAAC,CAAA;AACrC,uBAAmB,WAAW,CAAC,CAAA;AAE/B;;;GAGG;AAEH;;;;;;;;;;;GAWG;AACH;IAA4C,kCAAS;IACpD,wBAAY,OAAO;QACZ,kBAAM,OAAO,EAAE;YACX,IAAI,EAAE,cAAW,CAAC;SACrB,CAAC,CAAC;QACT,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACpB,CAAC;IACD,8BAAK,GAAL;QACC,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IACD,+BAAM,GAAN,UAAO,MAAM;QACZ,EAAE,CAAA,CAAC,MAAM,KAAK,gBAAM,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,gBAAM,CAAC,WAAW,GAAG,gBAAM,CAAC,MAAM,CAAC;QACpE,CAAC;QACD,IAAI,CAAC,MAAM,GAAG,MAAM,KAAK,gBAAM,CAAC,WAAW,CAAC;QAC5C,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IACF,qBAAC;AAAD,CArBA,AAqBC,CArB2C,mBAAS,GAqBpD;AArBD;gCAqBC,CAAA","file":"bt/decorators/WhileCondition.js","sourcesContent":["import Decorator from '../Decorator';\nimport Status from '../Status';\n\n/**\n * @callback module:jibo/bt/decorators.WhileCondition~Conditional\n * @returns {boolean} `true` when you want component to restart.\n */\n\n/**\n * @class WhileCondition\n * @extends module:jibo/bt.Decorator\n * @memberof module:jibo/bt/decorators\n * @description When `WhileCondition`'s component succeeds, `WhileCondition`\n * will evaluate its conditional. If it evaluates to `true`, `WhileCondition` will\n * start its component again. If the conditional evaluates to `false`, `WhileCondition`\n * returns the status of its component.\n * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.\n * @param {Function} [options.init] - Initialization function.\n * @param {module:jibo/bt/decorators.WhileCondition~Conditional} options.conditional - The conditional to evaluate.\n */\nexport default class WhileCondition extends Decorator {\n\tconstructor(options) {\n        super(options, {\n            init: function(){}\n        });\n\t\tthis.doInit = true;\n\t}\n\tstart() {\n\t\tif(this.doInit) {\n\t\t\tthis.options.init();\n\t\t\tthis.doInit = false;\n\t\t}\n\t\treturn true;\n\t}\n\tupdate(result) {\n\t\tif(result === Status.SUCCEEDED && this.options.conditional()) {\n\t\t\treturn this.behavior._start() ? Status.IN_PROGRESS : Status.FAILED;\n\t\t}\n\t\tthis.doInit = result !== Status.IN_PROGRESS;\n\t\treturn result;\n\t}\n}"],"sourceRoot":"/source/"}