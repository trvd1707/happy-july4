{"version":3,"sources":["bt/decorators/SucceedOnEvent.js"],"names":[],"mappings":";;;;;;AAAA,0BAAsB,cAAc,CAAC,CAAA;AACrC,uBAAmB,WAAW,CAAC,CAAA;AAE/B;;;;;;;;;;GAUG;AACH;IAA4C,kCAAS;IACpD,wBAAY,OAAO;QACZ,kBAAM,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,OAAO,CAAC;IACjC,CAAC;IACJ,8BAAK,GAAL;QACC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,WAAW,CAAC;QACjC,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IACD,6BAAI,GAAJ;QACC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpE,CAAC;IACD,iCAAQ,GAAR;QACC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,gBAAM,CAAC,SAAS,CAAC;IACtC,CAAC;IACD,+BAAM,GAAN,UAAO,MAAM;QACZ,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,KAAK,gBAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,gBAAM,CAAC,SAAS,CAAC;QACzB,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IACF,qBAAC;AAAD,CAxBA,AAwBC,CAxB2C,mBAAS,GAwBpD;AAxBD;gCAwBC,CAAA","file":"bt/decorators/SucceedOnEvent.js","sourcesContent":["import Decorator from '../Decorator';\nimport Status from '../Status';\n\n/**\n * @class SucceedOnEvent\n * @extends module:jibo/bt.Decorator\n * @memberof module:jibo/bt/decorators\n * @description\n * Succeeds the behavior it's decorating when an event is emitter from a behavior tree's\n * global `emitter`.\n * @param {Object} options See {@link module:jibo/bt.Decorator|Decorator} for all options.\n * @param {String} options.eventName - The name of the event to listen for.\n * @param {Function} options.onEvent - called when the event is fired. Any payload with the event is passed in.\n */\nexport default class SucceedOnEvent extends Decorator {\n\tconstructor(options) {\n        super(options);\n\t\tthis._onEvent = this._onEvent.bind(this);\n        this.status = Status.INVALID;\n    }\n\tstart() {\n\t\tthis.emitter.once(this.options.eventName, this._onEvent);\n\t\tthis.status = Status.IN_PROGRESS;\n\t\treturn true;\n\t}\n\tstop() {\n\t\tthis.emitter.removeListener(this.options.eventName, this._onEvent);\n\t}\n\t_onEvent() {\n\t\tthis.options.onEvent.apply(null, arguments);\n        this.status = Status.SUCCEEDED;\n\t}\n\tupdate(result) {\n\t\tif(this.status === Status.SUCCEEDED) {\n\t\t\treturn Status.SUCCEEDED;\n\t\t}\n\t\treturn result;\n\t}\n}"],"sourceRoot":"/source/"}