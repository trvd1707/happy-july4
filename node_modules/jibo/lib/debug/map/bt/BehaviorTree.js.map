{"version":3,"sources":["bt/BehaviorTree.ts"],"names":[],"mappings":";AAKA;;;;;;;;;GASG;AACH;IAQI,sBAAY,IAAa,EAAE,UAAqB,EACpC,OAAW,EAAE,MAAU,EAAE,OAAuB;QACxD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAQD,sBAAI,gCAAM;QANV;;;;;WAKG;aACH;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,CAAC;;;OAAA;IAED;;;;OAIG;IACH,4BAAK,GAAL;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACH,2BAAI,GAAJ;QACI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACH,4BAAK,GAAL;QACI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,8BAAO,GAAP;QACI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,6BAAM,GAAN;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IACL,mBAAC;AAAD,CAtEA,AAsEC,IAAA;AAtED;8BAsEC,CAAA","file":"bt/BehaviorTree.js","sourcesContent":["import BehaviorEmitter from './BehaviorEmitter';\nimport Status from './Status';\nimport Behavior from \"./Behavior\";\nimport Blackboard from \"./Blackboard\";\n\n/**\n * @class BehaviorTree\n * @memberof module:jibo/bt\n * @description Object for controlling the playback of the behavior tree. \n * \n * @param {module:jibo/bt.Blackboard} blackboard Reference to the global {@link module:jibo/bt/behaviors.Blackboard|Blackboard} instance\n * @param {Object} notepad Reference to a temporary object to use\n * @param {Object} result\n * @param {module:jibo/bt.BehaviorEmitter} emitter \n */\nexport default class BehaviorTree {\n\n    public root:Behavior;\n    public blackboard:Blackboard;\n    public notepad:any;\n    public result:any;\n    public emitter:BehaviorEmitter;\n\n    constructor(root:Behavior, blackboard:Blackboard,\n                notepad:any, result:any, emitter:BehaviorEmitter) {\n        this.root = root;\n        this.blackboard = blackboard;\n        this.notepad = notepad;\n        this.result = result;\n        this.emitter = emitter;\n    }\n\n    /**\n     * Get the current status of the behavior tree\n     * @name module:jibo/bt.BehaviorTree~status\n     * @type {module:jibo/bt.Status} \n     * @readOnly\n     */\n    get status():Status {\n        return this.root._status;\n    }\n\n    /**\n     * Start the behavior tree.\n     * @method module:jibo/bt.BehaviorTree~start\n     * @return {Boolean} Status result\n     */\n    start():boolean {\n        return this.root._start();\n    }\n\n    /**\n     * Stop the behavior tree.\n     * @method module:jibo/bt.BehaviorTree~stop\n     */\n    stop():void {\n        this.root._stop();\n    }\n\n    /**\n     * Pause the behavior tree.\n     * @private\n     * @method module:jibo/bt.BehaviorTree~pause\n     */\n    pause():void {\n        this.root._pause();\n    }\n\n    /**\n     * Resume the behavior tree.\n     * @private\n     * @method module:jibo/bt.BehaviorTree~pause\n     */\n    unpause():void {\n        this.root._unpause();\n    }\n\n    /**\n     * Called every frame.\n     * @method module:jibo/bt.BehaviorTree~update\n     * @returns {module:jibo/bt.Status} The current status of this behavior.\n     */\n    update():Status {\n        return this.root._update();\n    }\n}"],"sourceRoot":"/source/"}