{"version":3,"sources":["rendering/animation/Spritesheet.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;AACH;IASI,qBAAY,WAA4B,EAAE,MAAyB;QAE/D,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,GAAG,CAAA,CAAC,IAAI,MAAI,IAAI,MAAM,CAAC,CACvB,CAAC;YACG,IAAI,KAAK,GAAG,MAAM,CAAC,MAAI,CAAC,CAAC;YACzB,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC;YACvB,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YAE9D,0BAA0B;YAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAClB,CAAC;gBACG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;YACzB,CAAC;YAED,yCAAyC;YACzC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAClB,CAAC;gBACG,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CACrB,KAAK,CAAC,gBAAgB,CAAC,CAAC,EAAE,gBAAgB;gBAC1C,KAAK,CAAC,gBAAgB,CAAC,CAAC,EAAE,gBAAgB;gBAC1C,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE,gBAAgB;gBACpC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe;iBACrC,CAAC;YACN,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,MAAI,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAChC,WAAW,EACX,IAAI,EACJ,IAAI,CAAC,KAAK,EAAE,EACZ,IAAI,EACJ,KAAK,CAAC,MAAM,CACf,CAAC;QACN,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,6BAAO,GAAP;QAEI,GAAG,CAAC,CAAC,IAAI,MAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAC7B,CAAC;YACG,IAAI,CAAC,MAAM,CAAC,MAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IACL,kBAAC;AAAD,CA1DA,AA0DC,IAAA;AAED;kBAAe,WAAW,CAAC","file":"rendering/animation/Spritesheet.js","sourcesContent":["/**\n * The object returned by the SpritesheetTask.\n * @class Spritesheet\n * @memberof module:jibo/rendering/animation\n * @param {PIXI.BaseTexture} baseTexture\n * @param {Object} frames The frames map\n */\nclass Spritesheet\n{\n    /**\n     * The collection of textures by name.\n     * @name module:jibo/rendering/animation.Spritesheet#frames\n     * @type {Object}\n     */\n    public frames:{[id:string]: PIXI.Texture};\n\n    constructor(baseTexture:PIXI.BaseTexture, frames:{[id:string]: any})\n    {\n        this.frames = {};\n        for(let name in frames)\n        {\n            let frame = frames[name];\n            let rect = frame.frame;\n            let trim = null;\n            let size = new PIXI.Rectangle(rect.x, rect.y, rect.w, rect.h);\n\n            // If the frame is rotated\n            if (frame.rotated)\n            {\n                size.width = rect.h;\n                size.height = rect.w;\n            }\n\n            //  Check to see if the sprite is trimmed\n            if (frame.trimmed)\n            {\n                trim = new PIXI.Rectangle(\n                    frame.spriteSourceSize.x, // / resolution,\n                    frame.spriteSourceSize.y, // / resolution,\n                    frame.sourceSize.w, // / resolution,\n                    frame.sourceSize.h // / resolution\n                );\n            }\n            this.frames[name] = new PIXI.Texture(\n                baseTexture,\n                size,\n                size.clone(), \n                trim,\n                frame.rotate\n            );\n        }\n    }\n\n    /**\n     * Destroys all the textures/frames of spritesheet.\n     * @method module:jibo/rendering/animation.Spritesheet#destroy\n     */\n    destroy()\n    {\n        for (let name in this.frames)\n        {\n            this.frames[name].destroy(true);\n        }\n        this.frames = null;\n    }\n}\n\nexport default Spritesheet;\n"],"sourceRoot":"/source/"}