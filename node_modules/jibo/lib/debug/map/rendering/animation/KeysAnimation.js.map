{"version":3,"sources":["rendering/animation/KeysAnimation.ts"],"names":[],"mappings":"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","file":"rendering/animation/KeysAnimation.js","sourcesContent":["import Sound from '../../sound/Sound';\nimport FaceRenderer from '../FaceRenderer';\nimport Timeline from './Timeline';\nimport {EventEmitter} from 'events';\n\n/**\n * A layer of the KeysAnimation class.\n * @class Layer\n * @private\n */\nclass Layer {\n    static EYE:string = 'Eye';\n    constructor(public layerNum:number, public name:string, public instance:PIXI.DisplayObject = null) {\n    }\n    get isEye(): boolean {\n        return this.name === Layer.EYE;\n    }\n    destroy(): void {\n        this.instance = null;\n    }\n}\n\n/**\n * Class used by Animation Utilities to provide playback\n * of keys files.\n * @class KeysAnimation\n * @memberof module:jibo/rendering/animation\n * @extends EventEmitter\n * @param {module:jibo/rendering/animation.FaceRenderer} renderer The face renderer.\n */\nclass KeysAnimation extends EventEmitter {\n\n    /**\n     * Event name when animation starts.\n     * @name module:jibo/rendering/animation.KeysAnimation.STARTED\n     * @type {String}\n     */\n    static STARTED:string = 'STARTED';\n\n    /**\n     * Event name when animation stops.\n     * @name module:jibo/rendering/animation.KeysAnimation.STOPPED\n     * @type {String}\n     */\n    static STOPPED:string = 'STOPPED';\n\n    /**\n     * Event name when builder event is fired.\n     * @name module:jibo/rendering/animation.KeysAnimation.EVENT\n     * @type {String}\n     */\n    static EVENT:string = 'EVENT';\n\n    /**\n     * Event name when animation is cancelled.\n     * @name module:jibo/rendering/animation.KeysAnimation.CANCELLED\n     * @type {String}\n     */\n    static CANCELLED:string = 'CANCELLED';\n\n    /**\n     * Event name when audio is played.\n     * @name module:jibo/rendering/animation.KeysAnimation.PLAY_AUDIO\n     * @type {String}\n     */\n    static PLAY_AUDIO:string = 'play-audio';\n\n    /**\n     * Event name when timeline is played.\n     * @name module:jibo/rendering/animation.KeysAnimation.PLAY_TIMELINE\n     * @type {String}\n     */\n    static PLAY_TIMELINE:string = 'play-pixi';\n\n    /**\n     * Asset Pack name.\n     * @name module:jibo/rendering/animation.KeysAnimation#assetPack\n     * @type {String}\n     */\n    public assetPack:string;\n\n    /**\n     * Map of Timeline objects.\n     * @name module:jibo/rendering/animation.KeysAnimation#timelines\n     * @type {Object}\n     */\n    public timelines:{[file:string]: Timeline};\n    \n    /**\n     * Map of Sound objects.\n     * @name module:jibo/rendering/animation.KeysAnimation#sounds\n     * @type {Object}\n     */\n    public sounds:{[file:string]: Sound};\n\n    private renderer:FaceRenderer;\n    private _builder:any;\n    private _data:any;\n    private layers:Array<Layer>;\n    private animationNum:number;\n\n    constructor(renderer:FaceRenderer) {\n\n        super();\n\n        this.renderer = renderer;\n        this.layers = [];\n        this.animationNum = 0;\n        this.timelines = {};\n        this.sounds = {};\n\n        // Bind event callbacks\n        this.onPlayTimeline = this.onPlayTimeline.bind(this);\n        this.onBuilderStopped = this.onBuilderStopped.bind(this);\n        this.onPlayAudio = this.onPlayAudio.bind(this);\n        this.onEvent = this.onEvent.bind(this);\n    }\n\n    /**\n     * The animation builder.\n     * @name module:jibo/rendering/animation.KeysAnimation#builder\n     * @type {Builder}\n     * @private\n     */\n    set builder(builder:any) {\n\n        if (this._builder) {\n            this._builder.off(KeysAnimation.PLAY_AUDIO, this.onPlayAudio);\n            this._builder.off(KeysAnimation.PLAY_TIMELINE, this.onPlayTimeline);\n            this._builder.off(KeysAnimation.STOPPED, this.onBuilderStopped);\n            this._builder.off(KeysAnimation.EVENT, this.onEvent);\n            this._builder.off(KeysAnimation.CANCELLED, this.onEvent);\n            this._builder.off(KeysAnimation.STARTED, this.onEvent);\n        }\n\n        this._builder = builder;\n\n        if (builder) {\n            builder.on(KeysAnimation.PLAY_AUDIO, this.onPlayAudio);\n            builder.on(KeysAnimation.STOPPED, this.onBuilderStopped);\n            builder.on(KeysAnimation.PLAY_TIMELINE, this.onPlayTimeline);\n            builder.on(KeysAnimation.EVENT, this.onEvent);\n            builder.on(KeysAnimation.CANCELLED, this.onEvent);\n            builder.on(KeysAnimation.STARTED, this.onEvent);\n        }\n    }\n\n    get builder(): any {\n        return this._builder;\n    }\n\n    /**\n     * Set the keys animation data.\n     * @name module:jibo/rendering/animation.KeysAnimation#data\n     * @type {Object}\n     * @private\n     */\n    set data(data:any) {\n        for(let i:number = 0; i < data.layers.length; i++) {\n            if (data.layers[i].type === Layer.EYE) {\n                this.layers.push(new Layer(i, Layer.EYE));\n                break;\n            }\n        }\n        this._data = data;\n    }\n\n    get data(): any {\n        return this._data;\n    }\n\n    /**\n     * Reset the animation and reorder.\n     * @method module:jibo/rendering/animation.KeysAnimation#reset\n     */\n    reset(): void {\n        this.data = this._data;\n        this.reorder();\n    }\n\n    /**\n     * Adds a sound to the animation for playing.\n     * @method module:jibo/rendering/animation.KeysAnimation#addSound\n     * @param {String} id The ID of the sound\n     * @param {module:jibo/sound.Sound} sound Instance of sound.\n     */\n    addSound(id:string, sound:Sound): void {\n        this.sounds[id] = sound;\n    }\n\n    /**\n     * Adds a timeline to the animation for playing.\n     * @method module:jibo/rendering/animation.KeysAnimation#addTimeline\n     * @param {String} id The ID of the timeline\n     * @param {module:jibo/rendering/animation.Timeline} timeline Instance of timeline.\n     */\n    addTimeline(id:string, timeline:Timeline): void {\n        this.animationNum++;\n        this.timelines[id] = timeline;\n    }\n\n    /**\n     * Destroys the keys animation completely.\n     * @method module:jibo/rendering/animation.KeysAnimation#destroy\n     */\n    destroy(): void {\n        this.layers.forEach((layer) => {\n            layer.destroy();\n        });\n        for(let id in this.timelines) {\n            this.timelines[id].destroy();\n        }\n        for(let id in this.sounds) {\n            this.sounds[id].destroy();\n        }\n        this.builder = null;\n        this.renderer.reset();\n        this.renderer = null;\n        this.layers = null;\n        this.timelines = null;\n        this.sounds = null;\n    }\n\n    /**\n     * Handles animation custom events.\n     * @method module:jibo/rendering/animation.KeysAnimation#onEvent\n     * @private\n     * @param {String} event\n     * @param {AnimationInst} animInstance\n     * @param {Object} playload\n     */\n    private onEvent(event, animInstance, payload): void {\n        this.emit(event, event, animInstance, payload);\n        const eventName = payload.eventName;\n        this.emit(eventName, eventName, animInstance, payload.payload);\n    }\n\n    /**\n     * Handles playing audio within the animation.\n     * @method module:jibo/rendering/animation.KeysAnimation#onPlayAudio\n     * @private\n     * @param {String} event\n     * @param {AnimationInst} animInstance\n     * @param {Object} playload\n     */\n    private onPlayAudio(event, animInstance, payload:any):void {\n        this.sounds[payload.file].play();\n        this.emit(event, event, animInstance, payload);\n    }\n\n    /**\n     * Handles animation stopped playing.\n     * @method module:jibo/rendering/animation.KeysAnimation#onBuilderStopped\n     * @private\n     * @param {String} event\n     * @param {AnimationInst} animInstance\n     * @param {Object} playload\n     */\n    private onBuilderStopped(event, animInstance, payload:any): void {\n        this.renderer.renderOnlyWhenDirty = true;\n        this.renderer.reset();\n        this.emit(event, event, animInstance, payload);\n    }\n\n    /**\n     * Reorder the layers of the animation.\n     * @method module:jibo/rendering/animation.KeysAnimation#reorder\n     * @private\n     */\n    private reorder(): void {\n        // Turn the render back to what it was before we added to it\n        this.renderer.reset();\n\n        // Sort the layers by depth\n        this.layers = this.layers.sort((a:Layer, b:Layer) => {\n            return a.layerNum - b.layerNum;\n        });\n\n        // Keep track if we should place object above or below the eye\n        let aboveEye = false;\n        this.layers.forEach((layer:Layer) => {\n            if(layer.isEye) {\n                aboveEye = true;\n            }\n            else {\n                if (aboveEye) {\n                    this.renderer.addChildAboveEye(layer.instance);\n                } else {\n                    this.renderer.addChildBelowEye(layer.instance);\n                }\n            }\n        });\n    }\n\n    /**\n     * Handles the playing of a timeline event.\n     * @method module:jibo/rendering/animation.KeysAnimation#onPlayTimeline\n     * @private\n     * @param {String} event\n     * @param {AnimationInst} animInstance\n     * @param {Object} playload\n     */\n    private onPlayTimeline(event, animInstance, payload:any): void {\n        this.renderer.renderOnlyWhenDirty = false;\n        const timeline = this.timelines[payload.file];\n        if (!timeline)\n        {\n            throw new Error(`No timeline matching ${payload.file}`);\n        }\n        const layer = new Layer(payload.layerNum, payload.file, timeline.instance);\n        timeline.instance.play();\n        this.layers.push(layer);\n        this.reorder();\n        this.emit(event, event, animInstance, payload);\n    }\n}\n\nexport default KeysAnimation;\n"],"sourceRoot":"/source/"}