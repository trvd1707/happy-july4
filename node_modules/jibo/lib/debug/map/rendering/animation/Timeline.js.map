{"version":3,"sources":["rendering/animation/Timeline.ts"],"names":[],"mappings":";AAGA,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAY7B;;;;;GAKG;AACH;IAAA;IAiGA,CAAC;IA1FG;;;;;;OAMG;IACH,6BAAU,GAAV,UAAW,OAAoB,EAAE,EAAS;QAEtC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CACnB,CAAC;YACG,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACvB,CAAC;QACD,OAAO,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACH,4BAAS,GAAT,UAAU,MAAa;QAEnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACH,iCAAc,GAAd,UAAe,WAAuB;QAElC,GAAG,CAAA,CAAC,IAAI,EAAE,IAAI,WAAW,CAAC,MAAM,CAAC,CACjC,CAAC;YACG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAChD,CAAC;QAED,+BAA+B;QAC/B,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACH,8BAAW,GAAX;QAEI,IAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAC1C,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED;;;;;OAKG;IACH,yBAAM,GAAN,UAAO,QAA2B,EAAE,QAAY;QAE5C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,0BAAO,GAAP;QAEI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,EAAE;YAErB,OAAO,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAChB,CAAC;YACG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IACL,eAAC;AAAD,CAjGA,AAiGC,IAAA;AAED;kBAAe,QAAQ,CAAC","file":"rendering/animation/Timeline.js","sourcesContent":["import Shapes from './Shapes';\nimport Spritesheet from './Spritesheet';\n\nconst Texture = PIXI.Texture;\n\ninterface Library {\n    stage:any;\n    background:number;\n    width:number;\n    height:number;\n    framerate:number;\n    totalFrames:number;\n    library:any;\n}\n\n/**\n * The object returned by the TimelineTask. Represents a PIXI animation.\n * @class Timeline\n * @private\n * @memberof module:jibo/rendering/animation\n */\nclass Timeline\n{\n    public instance:any;\n    public shapes:Shapes;\n    public library:Library;\n    private textures:Array<string>;\n\n    /**\n     * Adds a texture for the Timeline.\n     * @method module:jibo/rendering/animation.Timeline#addTexture\n     * @private\n     * @param {PIXI.Texture} texture Texture reference.\n     * @param {String} id The id name of texture in cache.\n     */\n    addTexture(texture:PIXI.Texture, id:string):void\n    {\n        if (!this.textures)\n        {\n            this.textures = [];\n        }\n        Texture.addTextureToCache(texture, id);\n        this.textures.push(id);\n    }\n\n    /**\n     * Adds shapes to the Timeline.\n     * @method module:jibo/rendering/animation.Timeline#addShapes\n     * @private\n     * @param {module:jibo/rendering/animation.Shapes} shapes Texture reference.\n     */\n    addShapes(shapes:Shapes): void\n    {\n        this.shapes = shapes;\n    }\n\n    /**\n     * Adds spritesheet to the Timeline.\n     * @method module:jibo/rendering/animation.Timeline#addSpritesheet\n     * @private\n     * @param {module:jibo/rendering/animation.Spritesheet} spritesheet Spritesheet reference.\n     */\n    addSpritesheet(spritesheet:Spritesheet): void\n    {\n        for(let id in spritesheet.frames)\n        {\n            this.addTexture(spritesheet.frames[id], id);\n        }\n\n        // Clear the spritesheet object\n        spritesheet.frames = null;\n    }\n\n    /**\n     * Creates the instance of the stage.\n     * @method module:jibo/rendering/animation.Timeline#addInstance\n     * @private\n     */\n    addInstance(): void\n    {\n        const instance = new this.library.stage();\n        instance.framerate = this.library.framerate;\n        this.instance = instance;\n    }\n\n    /**\n     * Uploads all the textures and graphics to the GPU.\n     * @method module:jibo/rendering/animation.Timeline#upload\n     * @param {PIXI.WebGLRenderer} renderer Reference to face renderer.\n     * @param {Function} callback Callback when complete.\n     */\n    upload(renderer:PIXI.WebGLRenderer, callback:any): void\n    {\n        PIXI.animate.utils.upload(renderer, this.instance, callback);\n    }\n\n    /**\n     * Destroys Timeline object.\n     * @method module:jibo/rendering/animation.Timeline#destroy\n     */\n    destroy()\n    {\n        this.textures.forEach((id) =>\n        {\n            Texture.removeTextureFromCache(id);\n        });\n        this.textures = null;\n\n        if (this.shapes)\n        {\n            this.shapes.destroy();\n            this.shapes = null;\n        }\n\n        this.instance.destroy(true);\n        this.instance = null;\n        this.library = null;\n    }\n}\n\nexport default Timeline;\n"],"sourceRoot":"/source/"}