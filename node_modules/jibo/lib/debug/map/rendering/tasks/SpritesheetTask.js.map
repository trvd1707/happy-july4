{"version":3,"sources":["rendering/tasks/SpritesheetTask.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiB,yBAAyB,CAAC,CAAA;AAG3C,wBAAoB,eAAe,CAAC,CAAA;AACpC,4BAAwB,0BAA0B,CAAC,CAAA;AACnD,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAE9B;;;;;;;;;;;;;GAaG;AAEH;IAA8B,mCAAI;IAkB9B,yBAAY,OAAoB,EAAE,KAAS;QAEvC,kBAAM,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjC;;;;WAIG;QACH,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QAErB;;;;WAIG;QACH,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;IACjC,CAAC;IA7BD;;;;;;OAMG;IACI,oBAAI,GAAX,UAAY,KAAS;QAEjB,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,aAAa,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACvF,CAAC;IAqBD;;;;OAIG;IACH,+BAAK,GAAL,UAAM,QAAiB;QAAvB,iBAoCC;QAlCG,cAAc;QACd,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,IAAQ;YAEpC,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;gBACG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAC3D,CAAC;gBACG,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;YACpE,CAAC;YAED,IAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAElE,KAAI,CAAC,UAAU,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,KAAK;gBAE/B,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;oBACG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACzB,CAAC;gBAED,wBAAwB;gBACxB,IAAM,WAAW,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAChD,WAAW,CAAC,QAAQ,GAAG,MAAM,CAAC;gBAE9B,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,CAChB,CAAC;oBACG,iBAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;gBAC7E,CAAC;gBAED,QAAQ,CAAC,IAAI,EAAE,IAAI,qBAAW,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IACL,sBAAC;AAAD,CA/EA,AA+EC,CA/E6B,cAAI,GA+EjC;AAED;kBAAe,eAAe,CAAC","file":"rendering/tasks/SpritesheetTask.js","sourcesContent":["import Task from '../../loader/tasks/Task';\nimport AssetManager from '../../loader/AssetManager';\nimport {Callback} from '../../loader/Loader';\nimport Runtime from '../../Runtime';\nimport Spritesheet from '../animation/Spritesheet';\nimport path = require('path');\n\n/**\n * Loads an JSON atlas and sets it up for Pixi to use as a collectino of PIXI.Texture objects.\n * @class SpritesheetTask\n * @memberof module:jibo/loader\n * @constructor\n * @private\n * @param {String} asset.type Must be \"spritesheet\" to signify that this asset should be parsed\n *                            specifically for Pixi.js.\n * @param {String} [asset.src] The JSON atlas path.\n * @param {Boolean} [asset.upload=false] `true` to upload the GPU immediate after loading.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {String} [asset.id] The ID of the task.\n * @param {Function} [asset.complete] The callback to call when the load is completed.\n */\n\nclass SpritesheetTask extends Task\n{\n    static priority:number;\n    public src:string;\n    public upload:boolean;\n\n    /**\n     * Tests if an asset should be loaded.\n     * @method module:jibo/loader.SpritesheetTask.test\n     * @static\n     * @param {Object} asset The asset to test.\n     * @return {Boolean} `true` if the asset qualifies for this task.\n     */\n    static test(asset:any): boolean\n    {\n        return asset.type === \"spritesheet\" && !!asset.src && /\\.(json)$/i.test(asset.src);\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset, asset.src);\n\n        /**\n         * The atlas source path.\n         * @name module:jibo/loader.SpritesheetTask#src\n         * @type {String}\n         */\n        this.src = asset.src;\n\n        /**\n         * `true` if the texture should be uploaded to the GPU immediately.\n         * @name module:jibo/loader.SpritesheetTask#upload\n         * @type {Boolean}\n         */\n        this.upload = !!asset.upload;\n    }\n\n    /**\n     * Starts the load.\n     * @method module:jibo/loader.SpritesheetTask#start\n     * @param {module:jibo/loader.Task~completeCallback} callback Callback to call when the load is done\n     */\n    start(callback:Callback):void\n    {\n        // Do the load\n        this.simpleLoad(this.src, (err, data:any) =>\n        {\n            if (err)\n            {\n                return callback(err);\n            }\n            \n            if (typeof data !== \"object\" || !data.meta || !data.frames)\n            {\n                return callback(new Error('Spritesheet is not a valid format'));\n            }\n\n            const imgSrc = path.join(path.dirname(this.src), data.meta.image);\n\n            this.simpleLoad(imgSrc, (err, image) => \n            {\n                if (err)\n                {\n                    return callback(err);\n                }\n\n                //create the BaseTexture\n                const baseTexture = new PIXI.BaseTexture(image);\n                baseTexture.imageUrl = imgSrc;\n\n                if (this.upload)\n                {\n                    Runtime.instance.face.renderer.textureManager.updateTexture(baseTexture);\n                }\n                \n                callback(null, new Spritesheet(baseTexture, data.frames));\n            });\n        });\n    }\n}\n\nexport default SpritesheetTask;\n"],"sourceRoot":"/source/"}