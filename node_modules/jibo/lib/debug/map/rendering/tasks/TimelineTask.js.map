{"version":3,"sources":["rendering/tasks/TimelineTask.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiB,yBAAyB,CAAC,CAAA;AAG3C,yBAAqB,uBAAuB,CAAC,CAAA;AAC7C,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,qBAAiB,YAAY,CAAC,CAAA;AAE9B;;;;;;;;;;;;;;GAcG;AAEH;IAA2B,gCAAI;IAkB3B,sBAAY,OAAoB,EAAE,KAAS;QAEvC,kBAAM,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjC;;;;WAIG;QACH,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QAErB;;;;WAIG;QACH,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;IACjC,CAAC;IA7BD;;;;;;OAMG;IACI,iBAAI,GAAX,UAAY,KAAS;QAEjB,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChF,CAAC;IAqBD;;;;OAIG;IACH,4BAAK,GAAL,UAAM,QAAiB;QAAvB,iBAuCC;QArCG,IAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAE,CAAC;QAEhC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,OAAO;YAEnC,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;gBACG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;YACD,4BAA4B;YAC5B,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;YAE3B,KAAI,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,UAAC,GAAG,EAAE,OAAO;gBAE7C,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;oBACG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACzB,CAAC;gBAED,wCAAwC;gBACxC,aAAa;gBACb,QAAQ,CAAC,WAAW,EAAE,CAAC;gBAEvB,qCAAqC;gBACrC,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,IAAI,cAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CACtC,CAAC;oBACG,QAAQ,CAAC,MAAM,CAAC,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;wBAEhC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;oBAC7B,CAAC,CAAC,CAAC;gBACP,CAAC;gBACD,IAAI,CACJ,CAAC;oBACG,WAAW;oBACX,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBAC7B,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gCAAS,GAAT,UAAU,QAAiB;QAEvB,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxC,IAAM,OAAO,GAAG,EAAE,CAAC;QACnB,IAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;QAE7C;YACI,IAAI,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;YACrB,iBAAiB;YACjB,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,OAAO,CAAC,IAAI,CAAC;oBACT,EAAE,EAAE,EAAE;oBACN,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;oBAC7B,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE,UAAC,GAAG,EAAE,MAAM;wBAClB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACN,MAAM,CAAC;wBACX,CAAC;wBACD,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAC/B,CAAC;iBACJ,CAAC,CAAC;YACP,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,OAAO,CAAC,IAAI,CAAC;oBACT,EAAE,EAAE,EAAE;oBACN,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;oBAC7B,IAAI,EAAE,SAAS;oBACf,QAAQ,EAAE,UAAC,GAAG,EAAE,MAAM;wBAClB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACN,MAAM,CAAC;wBACX,CAAC;wBACD,QAAQ,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;oBACpC,CAAC;iBACJ,CAAC,CAAC;YACP,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnC,OAAO,CAAC,IAAI,CAAC;oBACT,EAAE,EAAE,EAAE;oBACN,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;oBAC7B,IAAI,EAAE,aAAa;oBACnB,QAAQ,EAAE,UAAC,GAAG,EAAE,MAAM;wBAClB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;4BACN,MAAM,CAAC;wBACX,CAAC;wBACD,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;oBACpC,CAAC;iBACJ,CAAC,CAAC;YACP,CAAC;;QAzCL,GAAG,CAAA,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC;;SA0CpB;QACD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IACL,mBAAC;AAAD,CAtIA,AAsIC,CAtI0B,cAAI,GAsI9B;AAED;kBAAe,YAAY,CAAC","file":"rendering/tasks/TimelineTask.js","sourcesContent":["import Task from '../../loader/tasks/Task';\nimport AssetManager from '../../loader/AssetManager';\nimport {Callback} from '../../loader/Loader';\nimport Timeline from '../animation/Timeline';\nimport path = require('path');\nimport jibo from '../../jibo';\n\n/**\n * Loads an animation timeline with PixiAnimate.\n * @class TimelineTask\n * @memberof module:jibo/loader\n * @constructor\n * @private\n * @param {String} asset.type Must be \"texture\" to signify that this asset should be parsed\n *                            specifically for Pixi.js.\n * @param {String} [asset.src] The texture image path.\n * @param {Boolean} [asset.upload=false] Upload the GPU immediate after loading.\n * @param {String} [asset.alpha] The alpha image path, if not using image property.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {String} [asset.id] The ID of the task.\n * @param {Function} [asset.complete] The callback to call when the load is completed.\n */\n\nclass TimelineTask extends Task\n{\n    static priority:number;\n    public src:string;\n    public upload:boolean;\n\n    /**\n     * Tests if an asset should be loaded.\n     * @method module:jibo/loader.TimelineTask.test\n     * @static\n     * @param {Object} asset The asset to test.\n     * @return {Boolean} `true` if the asset qualifies for this task.\n     */\n    static test(asset:any): boolean\n    {\n        return asset.type === \"timeline\" && !!asset.src && /\\.js$/i.test(asset.src);\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset, asset.src);\n\n        /**\n         * The timeline source path.\n         * @name module:jibo/loader.TimelineTask#src\n         * @type {String}\n         */\n        this.src = asset.src;\n\n        /**\n         * Texture are uploaded to the GPU immediately.\n         * @name module:jibo/loader.TimelineTask#upload\n         * @type {Boolean}\n         */\n        this.upload = !!asset.upload;\n    }\n\n    /**\n     * Starts the load.\n     * @method module:jibo/loader.TimelineTask#start\n     * @param {module:jibo/loader.Task~completeCallback} callback Callback to call when the load is done\n     */\n    start(callback:Callback):void\n    {\n        const timeline = new Timeline();\n\n        this.simpleLoad(this.src, (err, results) =>\n        {\n            if (err)\n            {\n                return callback(err);\n            }\n            // Save the library for late\n            timeline.library = results;\n\n            this.load(this.getAssets(timeline), (err, results) =>\n            {\n                if (err)\n                {\n                    return callback(err);\n                }\n\n                // Create a new instance now that assets\n                // are loaded\n                timeline.addInstance();\n\n                // Upload to the renderer immediately\n                if (this.upload && jibo.face.renderer)\n                {\n                    timeline.upload(jibo.face.renderer, () => \n                    {\n                        callback(null, timeline);\n                    });\n                } \n                else \n                {\n                    // Callback\n                    callback(null, timeline);\n                }\n            });\n        });\n    }\n\n    getAssets(timeline:Timeline): Array<any>\n    {\n        const basePath = path.dirname(this.src);\n        const results = [];\n        const assets = timeline.library.stage.assets;\n\n        for(let id in assets) {\n            let src = assets[id];\n            // Load a texture\n            if (src.search(/\\.shapes\\.(txt|json)$/i) > -1) {\n                results.push({\n                    id: id,\n                    src: path.join(basePath, src),\n                    type: 'shapes',\n                    complete: (err, result) => {\n                        if (err) {\n                            return;\n                        }\n                        timeline.addShapes(result);\n                    }\n                });\n            }\n            else if (src.search(/\\.(png|jpg|gif)$/i) > -1) {\n                results.push({\n                    id: id,\n                    src: path.join(basePath, src),\n                    type: 'texture',\n                    complete: (err, result) => {\n                        if (err) {\n                            return;\n                        }\n                        timeline.addTexture(result, id);\n                    }\n                });\n            }\n            else if (src.search(/\\.json$/i) > -1) {\n                results.push({\n                    id: id,\n                    src: path.join(basePath, src),\n                    type: 'spritesheet',\n                    complete: (err, result) => {\n                        if (err) {\n                            return;\n                        }\n                        timeline.addSpritesheet(result);\n                    }\n                });\n            }\n        }\n        return results;\n    }\n}\n\nexport default TimelineTask;\n"],"sourceRoot":"/source/"}