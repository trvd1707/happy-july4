{"version":3,"sources":["rendering/tasks/ShapesTask.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiB,yBAAyB,CAAC,CAAA;AAG3C,uBAAmB,qBAAqB,CAAC,CAAA;AAEzC;;;;;;;;;;;;GAYG;AAEH;IAAyB,8BAAI;IAiBzB,oBAAY,OAAoB,EAAE,KAAS;QAEvC,kBAAM,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjC;;;;WAIG;QACH,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;IACzB,CAAC;IAtBD;;;;;;OAMG;IACI,eAAI,GAAX,UAAY,KAAS;QAEjB,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC9F,CAAC;IAcD;;;;OAIG;IACH,0BAAK,GAAL,UAAM,QAAiB;QAAvB,iBAUC;QARG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,OAAO;YAEnC,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;gBACG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;YACD,QAAQ,CAAC,IAAI,EAAE,IAAI,gBAAM,CAAC,KAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACP,CAAC;IACL,iBAAC;AAAD,CA7CA,AA6CC,CA7CwB,cAAI,GA6C5B;AAED;kBAAe,UAAU,CAAC","file":"rendering/tasks/ShapesTask.js","sourcesContent":["import Task from '../../loader/tasks/Task';\nimport AssetManager from '../../loader/AssetManager';\nimport {Callback} from '../../loader/Loader';\nimport Shapes from '../animation/Shapes';\n\n/**\n * Loads a shapes manifest file and sets it up for PixiAnimate.\n * @class ShapesTask\n * @memberof module:jibo/loader\n * @constructor\n * @private\n * @param {String} asset.type Must be \"shapes\" to signify that this asset should be parsed\n *                            specifically for PixiAnimate.\n * @param {String} [asset.src] The texture image path.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {String} [asset.id] The ID of the task.\n * @param {Function} [asset.complete] The callback to call when the load is completed.\n */\n\nclass ShapesTask extends Task\n{\n    static priority:number;\n    public src:string;\n\n    /**\n     * Tests if an asset should be loaded.\n     * @method module:jibo/loader.ShapesTask.test\n     * @static\n     * @param {Object} asset The asset to test.\n     * @return {Boolean} `true` if the asset qualifies for this task.\n     */\n    static test(asset:any): boolean\n    {\n        return asset.type === \"shapes\" && !!asset.src && /\\.shapes\\.(json|txt)$/i.test(asset.src);\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset, asset.src);\n\n        /**\n         * The atlas source path.\n         * @name module:jibo/loader.ShapesTask#src\n         * @type {String}\n         */\n        this.src = asset.src;\n    }\n\n    /**\n     * Starts the load.\n     * @method module:jibo/loader.ShapesTask#start\n     * @param {module:jibo/loader.Task~completeCallback} callback Callback to call when the load is done.\n     */\n    start(callback:Callback):void\n    {\n        this.simpleLoad(this.src, (err, results) =>\n        {\n            if (err)\n            {\n                return callback(err);\n            }\n            callback(null, new Shapes(this.id, results));\n        });\n    }\n}\n\nexport default ShapesTask;\n"],"sourceRoot":"/source/"}