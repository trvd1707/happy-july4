{"version":3,"sources":["rendering/tasks/KeysTask.ts"],"names":[],"mappings":"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","file":"rendering/tasks/KeysTask.js","sourcesContent":["import Task from '../../loader/tasks/Task';\nimport AssetManager from '../../loader/AssetManager';\nimport {Callback} from '../../loader/Loader';\nimport PathUtils from '../../utils/PathUtils';\nimport Sound from '../../sound/Sound';\nimport Timeline from '../animation/Timeline';\nimport Runtime from '../../Runtime';\nimport path = require('path');\nimport keyframes = require('jibo-keyframes');\nimport KeysAnimation from '../animation/KeysAnimation';\nimport async = require('async');\n\n\n/**\n * Loads an animation timeline with PixiAnimate.\n * @class KeysTask\n * @memberof module:jibo/loader\n * @constructor\n * @private\n * @param {String} asset.type Must be set to \"keys\".\n * @param {String} [asset.src] The keys file path.\n * @param {String} [assets.root] The root directory of stored keys file.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {String} [asset.id] The ID of the task.\n * @param {Function} [asset.complete] The callback to call when the load is completed.\n */\nclass KeysTask extends Task\n{\n    static priority:number;\n    public src:string;\n    public root:string;\n    public upload:boolean;\n\n    /**\n     * Tests if an asset should be loaded.\n     * @method module:jibo/loader.KeysTask.test\n     * @static\n     * @param {Object} asset The asset to test.\n     * @return {Boolean} `true` if the asset qualifies for this task.\n     */\n    static test(asset:any): boolean\n    {\n        return asset.type === \"keys\" && !!asset.root && !!asset.src && /\\.keys$/i.test(asset.src);\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset, asset.src);\n\n        /**\n         * The timeline source path.\n         * @name module:jibo/loader.KeysTask#src\n         * @type {String}\n         */\n        this.src = asset.src;\n\n        /**\n         * The root for the project.\n         * @name module:jibo/loader.KeysTask#root\n         * @type {String}\n         */\n        this.root = asset.root;\n\n        /**\n         * Load texture immediate to the GPU.\n         * @name module:jibo/loader.KeysTask#upload\n         * @type {Boolean}\n         */\n        this.upload = asset.upload === undefined ? true : asset.upload;\n    }\n\n    /**\n     * Starts the load.\n     * @method module:jibo/loader.KeysTask#start\n     * @param {module:jibo/loader.Task~completeCallback} callback Callback to call when the load is done\n     */\n    start(callback:Callback):void\n    {\n        // Create the new player\n        const player = new KeysAnimation(Runtime.instance.face);\n\n        async.waterfall([\n            (done) =>\n            {\n                // Get the current project root and name\n                let root = PathUtils.findRoot();\n                let projectName = PathUtils.getProjectName(root);\n\n                // Get the assetPack from base directory of the source file\n                const parent:string = PathUtils.findRoot(path.resolve(this.src));\n                const assetPack:string = PathUtils.getProjectName(parent);\n\n                // Get the assetpack\n                player.assetPack = assetPack === projectName ? '': assetPack;\n\n                // Load the JSON keys file\n                this.simpleLoad(this.src, done);\n            },\n            (data, done) =>\n            {\n                // Get the assets definitions from keys\n                player.data = data;\n                const assets = this.getAssetsFromKeys(player);\n                if (!assets.length)\n                {\n                    return done(null, {});\n                }\n                // Load the timeline and sound objects\n                this.load(assets, done);\n            },\n            (results, done) =>\n            {\n                // Register the timeline and sounds\n                // with the player object\n                for (let id in results)\n                {\n                    if (results[id] instanceof Timeline)\n                    {\n                        player.addTimeline(id, results[id]);\n                    }\n                    else if (results[id] instanceof Sound)\n                    {\n                        player.addSound(id, results[id]);\n                    }\n                }\n\n                // Create the builder\n                this.createBuilder(done);\n            },\n            (builder, done) =>\n            {\n                player.builder = builder;\n                done(null);\n            }\n        ],\n        (err, results) =>\n        {\n            if (err)\n            {\n                player.destroy();\n                callback(err);\n                return;\n            }\n            callback(null, player);\n        });\n    }\n\n    private getAssetsFromKeys(player:KeysAnimation): Array<any>\n    {\n        const assets:Array<any> = [];\n        player.data.layers.forEach((layer:any) =>\n        {\n            layer.keyframes.forEach((keyframe:any) =>\n            {\n                const AudioEvent = keyframe.value.AudioEvent;\n                const Pixi = keyframe.value.Pixi;\n                if (AudioEvent)\n                {\n                    assets.push({\n                        id: AudioEvent.file,\n                        type: 'sound',\n                        src: PathUtils.getAudioUri(AudioEvent.file, player.assetPack)\n                    });\n                }\n                else if (Pixi)\n                {\n                    assets.push({\n                        id: Pixi,\n                        type: 'timeline',\n                        upload: this.upload,\n                        src: PathUtils.getTimelineUri(Pixi, player.assetPack)\n                    });\n                }\n            });\n        });\n        return assets;\n    }\n\n    /**\n     * Creates the builder from the keys animation object.\n     * @method module:jibo/loader.KeysTask#createBuilder\n     * @private\n     */\n    private createBuilder(callback:any):void\n    {\n        (<any>keyframes).keysToAnimObjectAsync(this.src, (data) => {\n            const animUtils = Runtime.instance.animate;\n            callback(null, animUtils.createAnimationBuilderFromData(data, this.root));\n        });\n    }\n}\n\nexport default KeysTask;\n"],"sourceRoot":"/source/"}