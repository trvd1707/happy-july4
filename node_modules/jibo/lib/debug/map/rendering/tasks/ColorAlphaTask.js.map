{"version":3,"sources":["rendering/tasks/ColorAlphaTask.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiB,yBAAyB,CAAC,CAAA;AAK3C;;;;;;;;;;;;;;;GAeG;AACH;IAA6B,kCAAI;IAmD7B,wBAAY,OAAoB,EAAE,KAAS;QAEvC,kBAAM,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;QAEnC;;;;WAIG;QACH,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QAErB;;;;WAIG;QACH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IAC7B,CAAC;IA9DD;;;;;;OAMG;IACI,mBAAI,GAAX,UAAY,KAAS;QAEjB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACzH,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACI,yBAAU,GAAjB,UAAkB,QAAyB,EAAE,UAA2B,EAAE,MAAyB;QAE/F,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CACZ,CAAC;YACG,MAAM,GAAsB,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACjE,CAAC;QACD,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC1D,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC7D,IAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACpC,GAAG,CAAC,IAAI,EAAE,CAAC;QACX,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,GAAG,CAAC,wBAAwB,GAAG,gBAAgB,CAAC;QAChD,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAChC,GAAG,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAqBD;;;;OAIG;IACH,8BAAK,GAAL,UAAM,QAAiB;QAEnB,IAAI,CAAC,IAAI,CACL;YACI,MAAM,EAAE,IAAI,CAAC,KAAK;YAClB,IAAI,EAAE,IAAI,CAAC,GAAG;SACjB,EACD,UAAS,GAAe,EAAE,OAAO;YAE7B,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;gBACG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;YACD,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CACpC,OAAO,CAAC,IAAI,EACZ,OAAO,CAAC,MAAM,CACjB,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC;QAC/C,CAAC,CACJ,CAAC;IACN,CAAC;IACL,qBAAC;AAAD,CAhGA,AAgGC,CAhG4B,cAAI,GAgGhC;AAED;kBAAe,cAAc,CAAC","file":"rendering/tasks/ColorAlphaTask.js","sourcesContent":["import Task from '../../loader/tasks/Task';\nimport AssetManager from '../../loader/AssetManager';\nimport LoaderError from '../../loader/LoaderError';\nimport {Callback} from '../../loader/Loader';\n\n/**\n * Internal class for loading an image that has been split into an alpha channel image and a\n * RGB only color image.\n * @class ColorAlphaTask\n * @extends module:jibo/loader.Task\n * @memberof module:jibo/loader\n * @constructor\n * @private\n * @param {Object} asset The data properties.\n * @param {String} asset.src The source path to the color image.\n * @param {String} asset.alpha The source path to the alpha image.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {String} [asset.id] ID of asset.\n * @param {Function} [asset.complete] The event to call when done.\n * @param {Object} [asset.sizes=null] Define if certain sizes are not supported.\n */\nclass ColorAlphaTask extends Task\n{\n    static priority:number;\n    public src:string;\n    public alpha:string;\n\n    /**\n     * Tests if task should be run.\n     * @method module:jibo/loader.ColorAlphaTask.test\n     * @static\n     * @param {Object} asset The asset to check.\n     * @return {Boolean} `true` if the asset is compatible with this task.\n     */\n    static test(asset:any):boolean\n    {\n        return !!asset.src && !!asset.alpha && /\\.(jpg|png|jpeg|gif)$/i.test(asset.src) && /\\.(png|gif)$/i.test(asset.alpha);\n    }\n\n    /**\n     * Pulled from EaselJS's SpriteSheetUtils.\n     * Merges the rgb channels of one image with the alpha channel of another. This can be used to\n     * combine a compressed JPEG image containing color data with a PNG32 monochromatic image\n     * containing alpha data. With certain types of images (those with detail that lend itself to\n     * JPEG compression) this can provide significant file size savings versus a single RGBA PNG32.\n     * This method is very fast (generally on the order of 1-2 ms to run).\n     * @method module:jibo/loader.ColorAlphaTask.mergeAlpha\n     * @static\n     * @param {Image} rbgImage The image (or canvas) containing the RGB channels to use.\n     * @param {Image} alphaImage The image (or canvas) containing the alpha channel to use.\n     * @param {Canvas} [canvas] If specified, this canvas will be used and returned. If not, a new\n     *                      canvas will be created.\n     * @return {Canvas} A canvas with the combined image data. This can be used as a source for a\n     *              texture.\n     */\n    static mergeAlpha(rgbImage:HTMLImageElement, alphaImage:HTMLImageElement, canvas?:HTMLCanvasElement):HTMLCanvasElement\n    {\n        if (!canvas)\n        {\n            canvas = <HTMLCanvasElement>document.createElement(\"canvas\");\n        }\n        canvas.width = Math.max(alphaImage.width, rgbImage.width);\n        canvas.height = Math.max(alphaImage.height, rgbImage.height);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.save();\n        ctx.drawImage(rgbImage, 0, 0);\n        ctx.globalCompositeOperation = \"destination-in\";\n        ctx.drawImage(alphaImage, 0, 0);\n        ctx.restore();\n        return canvas;\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset, asset.color);\n\n        /**\n         * The atlas color source path.\n         * @type {String}\n         * @name module:jibo/loader.ColorAlphaTask#src\n         */\n        this.src = asset.src;\n\n        /**\n         * The atlas alpha source path.\n         * @type {String}\n         * @name module:jibo/loader.ColorAlphaTask#alpha\n         */\n        this.alpha = asset.alpha;\n    }\n\n    /**\n     * Starts the task.\n     * @method  module:jibo/loader.ColorAlphaTask#start\n     * @param  {module:jibo/loader.Task~completeCallback} callback Callback when finished.\n     */\n    start(callback:Callback):void\n    {\n        this.load(\n            {\n                _alpha: this.alpha,\n                _src: this.src\n            },\n            function(err:LoaderError, results)\n            {\n                if (err)\n                {\n                    return callback(err);\n                }\n                callback(null, ColorAlphaTask.mergeAlpha(\n                    results._src,\n                    results._alpha\n                ));\n                results._src.src = results._alpha.src = \"\";\n            }\n        );\n    }\n}\n\nexport default ColorAlphaTask;\n"],"sourceRoot":"/source/"}