{"version":3,"sources":["rendering/tasks/TextureTask.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAiB,yBAAyB,CAAC,CAAA;AAE3C,+BAA2B,kBAAkB,CAAC,CAAA;AAE9C,wBAAoB,eAAe,CAAC,CAAA;AAEpC;;;;;;;;;;;;;;GAcG;AAEH;IAA0B,+BAAI;IAmB1B,qBAAY,OAAoB,EAAE,KAAS;QAEvC,kBAAM,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjC;;;;WAIG;QACH,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QAErB;;;;WAIG;QACH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAEzB;;;;WAIG;QACH,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;IACjC,CAAC;IApCD;;;;;;OAMG;IACI,gBAAI,GAAX,UAAY,KAAS;QAEjB,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/F,CAAC;IA4BD;;;;OAIG;IACH,2BAAK,GAAL,UAAM,QAAiB;QAAvB,iBA0CC;QAxCG,IAAM,MAAM,GAAO,EAAE,CAAC;QACtB,MAAM,CAAC,MAAM,GAAG,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC;QAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CACf,CAAC;YACG,MAAM,CAAC,MAAM,GAAG,EAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;QACtC,CAAC;QAED,cAAc;QACd,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,OAAO;YAE3B,EAAE,CAAC,CAAC,GAAG,CAAC,CACR,CAAC;gBACG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;YACD,IAAI,KAAK,CAAC;YACV,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CACpB,CAAC;gBACG,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC;YAC3B,CAAC;YACD,IAAI,CACJ,CAAC;gBACG,KAAK,GAAG,wBAAc,CAAC,UAAU,CAC7B,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,MAAM,CACjB,CAAC;YACN,CAAC;YAED,oCAAoC;YACpC,IAAM,WAAW,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAChD,WAAW,CAAC,QAAQ,GAAG,KAAI,CAAC,GAAG,CAAC;YAEhC,IAAM,OAAO,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAE9C,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,CAChB,CAAC;gBACG,iBAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACzE,CAAC;YACD,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IACL,kBAAC;AAAD,CA7FA,AA6FC,CA7FyB,cAAI,GA6F7B;AAED;kBAAe,WAAW,CAAC","file":"rendering/tasks/TextureTask.js","sourcesContent":["import Task from '../../loader/tasks/Task';\nimport AssetManager from '../../loader/AssetManager';\nimport ColorAlphaTask from './ColorAlphaTask';\nimport {Callback} from '../../loader/Loader';\nimport Runtime from '../../Runtime';\n\n/**\n * Loads an image and sets it up for Pixi to use as a PIXI.Texture.\n * @class TextureTask\n * @memberof module:jibo/loader\n * @constructor\n * @private\n * @param {String} asset.type Must be \"texture\" to signify that this asset should be parsed\n *                            specifically for Pixi.js.\n * @param {String} [asset.src] The texture image path.\n * @param {Boolean} [asset.upload=false] `true` to upload the GPU immediate after loading.\n * @param {String} [asset.alpha] The alpha image path, if not using image property.\n * @param {Boolean} [asset.cache=false] `true` to cache the result.\n * @param {String} [asset.id] The ID of the task.\n * @param {Function} [asset.complete] The callback to call when the load is completed.\n */\n\nclass TextureTask extends Task\n{\n    static priority:number;\n    public src:string;\n    public alpha:string;\n    public upload:boolean;\n\n    /**\n     * Tests if an asset should be loaded.\n     * @method module:jibo/loader.TextureTask.test\n     * @static\n     * @param {Object} asset The asset to test.\n     * @return {Boolean} `true` if the asset qualifies for this task.\n     */\n    static test(asset:any): boolean\n    {\n        return asset.type === \"texture\" && !!asset.src && /\\.(jpg|jpeg|png|gif)$/i.test(asset.src);\n    }\n\n    constructor(manager:AssetManager, asset:any)\n    {\n        super(manager, asset, asset.src);\n\n        /**\n         * The atlas source path.\n         * @name module:jibo/loader.TextureTask#src\n         * @type {String}\n         */\n        this.src = asset.src;\n\n        /**\n         * The atlas alpha source path.\n         * @name module:jibo/loader.TextureTask#alpha\n         * @type {String}\n         */\n        this.alpha = asset.alpha;\n\n        /**\n         * `true` if the texture should be uploaded to the GPU immediately.\n         * @name module:jibo/loader.TextureTask#upload\n         * @type {Boolean}\n         */\n        this.upload = !!asset.upload;\n    }\n\n    /**\n     * Starts the load.\n     * @method module:jibo/loader.TextureTask#start\n     * @param {module:jibo/loader.Task~completeCallback} callback Callback to call when the load is done\n     */\n    start(callback:Callback):void\n    {\n        const assets:any = {};\n        assets._color = {src: this.src};\n\n        if (this.alpha)\n        {\n            assets._alpha = {src: this.alpha};\n        }\n\n        // Do the load\n        this.load(assets, (err, results) =>\n        {\n            if (err)\n            {\n                return callback(err);\n            }\n            let image;\n            if (!results._alpha)\n            {\n                image = results._color;\n            }\n            else\n            {\n                image = ColorAlphaTask.mergeAlpha(\n                    results._color,\n                    results._alpha\n                );\n            }\n\n            //create the Texture and BaseTexture\n            const baseTexture = new PIXI.BaseTexture(image);\n            baseTexture.imageUrl = this.src;\n\n            const texture = new PIXI.Texture(baseTexture);\n\n            if (this.upload)\n            {\n                Runtime.instance.face.renderer.textureManager.updateTexture(texture);\n            }\n            callback(null, texture);\n        });\n    }\n}\n\nexport default TextureTask;\n"],"sourceRoot":"/source/"}