{"version":3,"sources":["rendering/AbstractEye.ts"],"names":[],"mappings":"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","file":"rendering/AbstractEye.js","sourcesContent":["import EyeMesh from './EyeMesh';\nimport DOFValues from \"./DOFValues\";\nimport path = require('path');\nimport jibo from '../jibo';\n\nabstract class AbstractEye {\n\n    public stage:PIXI.Container;\n    public eyeMesh:EyeMesh;\n    public filter:PIXI.filters.ColorMatrixFilter;\n    public colorMatrix:number[];\n    public texturePrev:string;\n    public connected:boolean;\n    private _emptyTexture:PIXI.Texture;\n    private _texture:PIXI.Texture;\n    private _textureId:string;\n\n    constructor(public renderer:PIXI.WebGLRenderer, public cache:boolean) {\n        \n        // Create an empty canvas texture because \n        // Texture.EMPTY renders as a black square\n        let canvas:HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = 1;\n        canvas.height = 1;\n        this._emptyTexture = PIXI.Texture.fromCanvas(canvas);\n\n        this.stage = new PIXI.Container();\n        this.filter = new PIXI.filters.ColorMatrixFilter();\n        this.filter.reset();\n        this.cache = cache;\n\n        this.stage.filters = [this.filter];\n        this.x = 0;\n        this.y = 0;\n\n        this.eyeMesh = new EyeMesh(this._emptyTexture);\n        this.stage.addChild(this.eyeMesh);\n\n        this.visible = true;\n        this.connected = true;\n    }\n\n    set visible(visible:boolean) {\n        this.eyeMesh.visible = visible;\n    }\n\n    get visible(): boolean {\n        return this.eyeMesh.visible;\n    }\n\n    set texture(value:string) {\n        if (this._textureId && !this.cache) {\n            jibo.loader.unload(this._textureId);\n        }\n        if(path.extname(value).length === 0) {\n            this.visible = false;\n            return;\n        }\n        \n        // Trying to reload the texture that's already set\n        // or it's being loaded currently, chill for a sec\n        if (this._textureId === value) {\n            return;\n        }\n\n        // Update the texture id and check for cached texture\n        this._textureId = value;\n        const cachedTexture = jibo.loader.cached(value);\n\n        // If the texture is already cached, let's use that!\n        if (cachedTexture) {\n            this._texture = \n            this.eyeMesh.texture = cachedTexture;\n        }\n        else {\n            // Load the eye texture to render\n            jibo.loader.load({\n                id: value,\n                src: value,\n                type: 'texture',\n                cache: this.cache,\n                complete: (err, texture) => {\n                    this._texture = this.eyeMesh.texture = texture;\n                    this.visible = true;\n                }\n            });\n        }\n    }\n\n    set rotation(value:number) {\n        this.eyeMesh.rotation = value;\n    }\n\n    set x(value:number) {\n        this.stage.x = value + (this.renderer.width) / 2;\n    }\n\n    set y(value:number) {\n        this.stage.y = value + (this.renderer.height) / 2;\n    }\n\n    set red(value:number) {\n        this.filter.matrix[0] = value;\n    }\n\n    set green(value:number) {\n        this.filter.matrix[6] = value;\n    }\n\n    set blue(value:number) {\n        this.filter.matrix[12] = value;\n    }\n\n    destroy(): void {\n        this.renderer = null;\n        this.stage = null;\n        this.filter = null;\n        this.eyeMesh = null;\n        this._texture = null;\n        this._emptyTexture.destroy(true);\n        this._emptyTexture = null;\n        if (this._textureId) {\n            jibo.loader.unload(this._textureId);\n        }\n    }\n\n    abstract update(timestamp:Array<number>, dofValues:DOFValues);\n}\nexport default AbstractEye;"],"sourceRoot":"/source/"}