"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var uuid = require('uuid');
var ASRVariables_1 = require('./ASRVariables');
var events_1 = require('events');
/**
 * All speech actions are coodinated by this class. Create a new instance through the
 * asr module.
 * ```
 * var asr = require('jibo').asr;
 * var action = asr.createAudioAction();
 * ```
 * @class AudioAction
 * @extends EventEmitter
 * @memberof module:jibo.services.asr
 * @private
 */
var AudioAction = (function (_super) {
    __extends(AudioAction, _super);
    /**
     * @private
     * @param url
     */
    function AudioAction(url) {
        _super.call(this);
        this.httpInterface = url;
        this.id = 'action-' + uuid.v4();
        ASRVariables_1.default.idToAction[this.id] = this;
        this.isCleared = false;
    }
    AudioAction.prototype.setAudioSourceId = function (id) {
        this.audioSourceId = id;
    };
    /**
     * Starts this audio action.
     * ```
     * var asr = require('jibo').asr;
     * var action = asr.createAudioAction();
     * var cloud = new asr.CloudRecognizer();
     * var endOfSpeech = new asr.EndOfSpeechRecognizer();
     * var task = cloud + " | " + endOfSpeech;
     * action.start(task);
     * ```
     * @function AudioAction#start
     * @param {String} task The string representation of the task. This is built by concatonating Recognizers.
     */
    AudioAction.prototype.start = function (task) {
        if (this.isCleared) {
            return;
        }
        var body = {
            action: 'init_and_start',
            task: task,
            task_id: this.id,
            audio_source_id: this.audioSourceId
        };
        body = JSON.stringify(body);
        var request = new XMLHttpRequest();
        request.open("POST", this.httpInterface, true);
        request.send(body);
    };
    AudioAction.prototype.restart = function (task) {
        if (this.isCleared) {
            return;
        }
        var body = {
            action: 'start',
            task: task,
            task_id: this.id,
            audio_source_id: this.audioSourceId
        };
        body = JSON.stringify(body);
        var request = new XMLHttpRequest();
        request.open("POST", this.httpInterface, true);
        request.send(body);
    };
    /**
     * Stops the current action and shuts down all recognizers.
     * @function AudioAction#stop
     */
    AudioAction.prototype.stop = function (cb) {
        if (this.isCleared) {
            return;
        }
        var request = new XMLHttpRequest();
        var body = {
            action: 'stop',
            task: '',
            task_id: this.id,
            audio_source_id: this.audioSourceId
        };
        body = JSON.stringify(body);
        request.open("POST", this.httpInterface, true);
        request.send(body);
        if (cb) {
            cb();
        }
    };
    /**
     * Clears all current recognizers in action from memory.
     * @function AudioAction#clear
     */
    AudioAction.prototype.clear = function () {
        if (this.isCleared) {
            return;
        }
        delete ASRVariables_1.default.idToAction[this.id];
        this.isCleared = true;
        var request = new XMLHttpRequest();
        var body = {
            action: 'clear',
            task: '',
            task_id: this.id,
            audio_source_id: this.audioSourceId
        };
        body = JSON.stringify(body);
        request.open("POST", this.httpInterface, true);
        request.send(body);
    };
    AudioAction.prototype.getId = function () {
        return this.id;
    };
    return AudioAction;
}(events_1.EventEmitter));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AudioAction;

//# sourceMappingURL=../../map/services/asr/AudioAction.js.map
