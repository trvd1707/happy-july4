"use strict";
var uuid = require('uuid');
var ASRVariables_1 = require('./ASRVariables');
var AudioSource = (function () {
    function AudioSource(url, wavFiles) {
        var source = 'alsa';
        if (Array.isArray(wavFiles) && wavFiles.length > 0) {
            source = 'wav';
        }
        else if (typeof (wavFiles) === 'string') {
            source = 'wav';
            wavFiles = [wavFiles];
        }
        this.id = 'source-' + uuid.v4();
        ASRVariables_1.default.idToAudioSource[this.id] = this;
        // source is 'alsa' | 'wav'
        this.source = source;
        this.wavFiles = wavFiles || [];
        this.audioUrl = url;
    }
    AudioSource.prototype.init = function (cb) {
        var body = {
            action: 'start',
            audio_source_id: this.id,
            audio_source: this.source,
            wav_files: this.wavFiles
        };
        body = JSON.stringify(body);
        var request = new XMLHttpRequest();
        request.open("POST", this.audioUrl, true);
        request.onreadystatechange = function () {
            if (request.readyState == 4 && (request.status == 204 || request.status == 200)) {
                cb();
            }
            else if (request.readyState == 4 && request.status === 0) {
                cb('Could not create audio channel');
            }
        };
        request.send(body);
    };
    AudioSource.prototype.destroy = function (cb) {
        var body = {
            action: 'stop',
            audio_source_id: this.id,
            audio_source: this.source,
            wav_files: []
        };
        body = JSON.stringify(body);
        var request = new XMLHttpRequest();
        request.open("POST", this.audioUrl, true);
        request.onreadystatechange = function () {
            if (request.readyState == 4 && (request.status == 204 || request.status == 200)) {
                cb();
            }
            else if (request.readyState == 4 && request.status === 0) {
                cb('Could not destroy audio channel');
            }
        };
        request.send(body);
    };
    AudioSource.prototype.link = function (action) {
        action.setAudioSourceId(this.id);
    };
    return AudioSource;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AudioSource;

//# sourceMappingURL=../../map/services/asr/AudioSource.js.map
