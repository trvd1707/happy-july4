"use strict";
var ASRVariables_1 = require('./ASRVariables');
var AudioAction_1 = require('./AudioAction');
var SpeakerAction_1 = require('./SpeakerAction');
var AudioSource_1 = require('./AudioSource');
var Recognizer_1 = require('./Recognizer');
var SpeakerRecognizer_1 = require('./SpeakerRecognizer');
var EndOfSpeechRecognizer_1 = require('./EndOfSpeechRecognizer');
var CloudRecognizer_1 = require('./CloudRecognizer');
var Listener_1 = require('./Listener');
var Enroller_1 = require('./Enroller');
/**
 * @description
 * Audio Speech Recognition module.
 *
 * ```
 * var asr = require('jibo').asr;
 * ```
 * @class ASRService
 * @module jibo/asr
 */
var ASRService = (function () {
    function ASRService() {
        this.isInitialized = false;
        this.msgs = [];
        this.listSpeakerCallbacks = [];
        this.deleteSpeakerCallbacks = [];
    }
    Object.defineProperty(ASRService.prototype, "Recognizer", {
        get: function () {
            return Recognizer_1.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ASRService.prototype, "EndOfSpeechRecognizer", {
        get: function () {
            return EndOfSpeechRecognizer_1.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ASRService.prototype, "CloudRecognizer", {
        get: function () {
            return CloudRecognizer_1.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ASRService.prototype, "SpeakerRecognizer", {
        get: function () {
            return SpeakerRecognizer_1.default;
        },
        enumerable: true,
        configurable: true
    });
    ASRService.prototype.init = function (service, cb) {
        var _this = this;
        try {
            this.socketUrl = "ws:" + service.host + ":" + service.port + "/port";
            this.audioUrl = "http://" + service.host + ":" + service.port + "/audio_source";
            this.asrInterfaceUrl = "http://" + service.host + ":" + service.port + "/asr_interface";
            this.speakerInterfaceUrl = "http://" + service.host + ":" + service.port + "/spkr_id_interface";
            this.socket = new WebSocket(this.socketUrl);
            this.loggingEnabled = false;
            this.socket.onerror = function () {
                console.warn("error connecting to server");
            };
            this.socket.onmessage = function (msg) {
                var data = JSON.parse(msg.data);
                _this.msgs.push(data);
                while (!_this.paused && _this.msgs.length) {
                    _this.processNextMessage();
                }
            };
            this.alsaSource = new AudioSource_1.default(this.audioUrl);
            this.alsaSource.init(function (err) {
                if (err) {
                    console.warn(err);
                }
                _this.isInitialized = true;
                cb();
            });
        }
        catch (err) {
            console.warn(err);
        }
    };
    /*
     * Pauses ASR messages to preserve message order for other asynchronous events.
     * @method module:jibo/asr~pause
     */
    ASRService.prototype.pause = function () {
        this.paused = true;
    };
    /*
     * Finishes processing queued ASR messages then continues processing as they arrive.
     * @method module:jibo/asr~resume
     */
    ASRService.prototype.resume = function () {
        this.paused = false;
        while (this.msgs.length) {
            this.processNextMessage();
        }
    };
    /*
     * Sends next msg in queue to processMessage.
     * @method module:jibo/asr~processNextMessage
     * @private
     */
    ASRService.prototype.processNextMessage = function () {
        this.processMessage(this.msgs.shift());
    };
    /*
     * Processes data messages by sending and emitting to appropriate recipients
     * @method module:jibo/asr~processMessage
     * @param {Object} data
     * @private
     */
    ASRService.prototype.processMessage = function (data) {
        if (this.loggingEnabled) {
            console.log('----------------------');
            console.log(data);
        }
        var action = ASRVariables_1.default.idToAction[data.task_id];
        var recognizer = ASRVariables_1.default.idToRecognizer[data.simple_recog_name];
        if (data.status === 'error') {
            console.warn('ASR Service returned error response. Check ASR debug');
            if (action) {
                action.emit('error', data.message);
            }
        }
        if (data.speaker_idstatus === 'LISTING-SPEAKERS') {
            this.listSpeakerCallback(data);
        }
        if (data.speaker_idstatus === 'DELETING-SPEAKER') {
            this.deleteSpeakerCallback(data);
        }
        if (data.speaker_idstatus === 'ENROLLMENT-STARTED') {
            recognizer.onResult(data);
        }
        if (data.simple_recog_name === 'Speaker ID TD') {
            if (!action) {
                console.warn("No action found");
                console.log("task_id: ", data.task_id);
                console.log("recognizer:", recognizer);
            }
            action.emit('speakerid', data);
            return;
        }
        // TODO: take this out once it is fixed in ASR Service. 
        if (data.simple_recog_name === 'pcmwriter') {
            return;
        }
        if (data.final_simple) {
            if (!recognizer) {
                console.warn("Could not find recognizer with name " + data.simple_recog_name);
                return;
            }
            recognizer.onResult(data);
            return;
        }
        else if (data.final_composite) {
            if (!action) {
                console.warn("Could not find action with name " + data.task_id);
                return;
            }
            action.emit('finished', action);
            action.clear();
            return;
        }
        if (data.utterances && data.utterances.length > 0 && recognizer) {
            if (recognizer.onIncremental) {
                recognizer.onIncremental(data);
            }
        }
    };
    /**
      * Creates a single AudioSource.
      * @method module:jibo/asr~createWavSource
      * @returns {AudioAction}
      * @private
      */
    ASRService.prototype.createWavSource = function (wavs) {
        this.wavSource = new AudioSource_1.default(this.audioUrl, wavs);
        return this.wavSource;
    };
    /**
     * Creates a single AudioAction that will use initialized wav source as audio.
     * @method module:jibo/asr~createAudioAction
     * @returns {AudioAction}
     * @private
     */
    ASRService.prototype.createWavAction = function () {
        var action = new AudioAction_1.default(this.asrInterfaceUrl);
        this.wavSource.link(action);
        return action;
    };
    /**
     * Creates a single AudioAction.
     * @method module:jibo/asr~createAudioAction
     * @returns {AudioAction}
     * @private
     */
    ASRService.prototype.createAudioAction = function () {
        var action = new AudioAction_1.default(this.asrInterfaceUrl);
        this.alsaSource.link(action);
        return action;
    };
    /**
     * Creates a single AudioAction.
     * @method module:jibo/asr~createAudioAction
     * @returns {AudioAction}
     * @private
     */
    ASRService.prototype.createSpeakerAction = function () {
        var action = new SpeakerAction_1.default(this.speakerInterfaceUrl);
        this.alsaSource.link(action);
        return action;
    };
    /**
     * Creates a single AudioAction and returns in callback.
     * @method module:jibo/asr~createAudioAction
     * @returns {AudioAction}
     * @private
     */
    ASRService.prototype.createSpeakerActionAsync = function (cb) {
        var action = new SpeakerAction_1.default(this.speakerInterfaceUrl);
        this.alsaSource.link(action);
        return cb(action);
    };
    /**
     * Lists all speakers enrolled on connected Robot.
     * @method module:jibo/asr~listEnrolledSpeakers
     * @param cb {Function} the callback through which the speaker ID status
     * (list/delete) will be returned.
     */
    ASRService.prototype.listEnrolledSpeakers = function (cb) {
        this.listSpeakerCallbacks.push(cb);
        this.createSpeakerActionAsync(function (action) {
            action.listSpeakers();
        });
    };
    /*
     * Sends every subscribed callback listening for a listing-speakers
     * ASR message the most recently received speaker list through ASR socket.
     *                      then removes all callbacks in the subscribed list.
     * @method module:jibo/asr~listSpeakerCallback
     * @param data {Object} ASR socket data for speakers.
     * @param data.speaker_idstatus {String} "LISTING-SPEAKERS"
     * @param data.speaker_ids for Text-Dependent {Array} Array of speakers enrolled with 'hey jibo'
     * @param data.speaker_ids for Text-Independent {Array} Array of speakers enrolled with free speech
     * @private
     */
    ASRService.prototype.listSpeakerCallback = function (data) {
        this.listSpeakerCallbacks.forEach(function (cb) {
            cb(data);
        });
        this.listSpeakerCallbacks = [];
    };
    /**
     * Deletes speaker from enrolled speakers.
     * @method module:jibo/asr~deleteSpeaker
     * @param speaker {String} the name of the speaker to be deleted
     * @param textIdType {String} type of enrollment to be deleted. "Text-Dependent",
     * "Text-Independent", "TD+TI" are only options
     * @param cb {Function} the callback through which the speaker ID status
     * (list/delete) will be returned.
     */
    ASRService.prototype.deleteSpeaker = function (speaker, textIdType, cb) {
        if (textIdType === void 0) { textIdType = "TD+TI"; }
        this.deleteSpeakerCallbacks.push(cb);
        this.createSpeakerActionAsync(function (action) {
            action.deleteSpeaker(speaker, textIdType);
        });
    };
    /*
     * Sends every subscribed callback listening for a delete-speakers
     * ASR message the most recently received deleted speaker through ASR socket.
     * then removes all callbacks in the subscribed list.
     * @method module:jibo/asr~deleteSpeakerCallback
     * @param data {Object} ASR socket data for speakers.
     * @param data.speaker_idstatus {String} "DELETING-SPEAKER" or "NO-SPEAKERS-TO-DELETE"
     * @private
     */
    ASRService.prototype.deleteSpeakerCallback = function (data) {
        this.deleteSpeakerCallbacks.forEach(function (cb) {
            cb(data);
        });
        this.deleteSpeakerCallbacks = [];
    };
    /*
     * Logs every message recieved by ASR service
     * @method module:jibo/asr~setLogging
     * @param loggingEnabled {boolean} send true to log all ASR messages
     * @public
     */
    ASRService.prototype.setLogging = function (loggingEnabled) {
        this.loggingEnabled = loggingEnabled;
    };
    /**
     * Returns listener which emits listen events.
     * @param options {Object} Listen options.
     * @param options.bargein {boolean} `true` to use echo cancellation.
     * @param options.heyJibo {boolean} `true` to listen for "hey jibo".
     * @param options.detectEnd {boolean} `true` to listen for end of speech.
     * @param options.incremental {boolean} `true` to listen for incremental results.
     * @param options.authenticateSpeaker {String} Name of speaker, if applicable.
     * @param rule {String}  The rule to use to parse audio input.
     * @returns {module:jibo.services.asr.Listener} Listener with given recognition options.
     * @method module:jibo/asr~createListener
     */
    ASRService.prototype.createListener = function (options, rule) {
        return new Listener_1.default(options, rule);
    };
    /**
     * Returns enroller which emits enrollment events.
     * @param options {Object} Enroller options.
     * @param options.speakerName {String} name of speaker to enroll.
     * @param options.enrollmentType {enum} 'text-dependent' or 'text-independent'.
     * @returns {module:jibo.services.asr.Enroller} Enroller with given enrollment options.
     * @method module:jibo/asr~createEnroller
     */
    ASRService.prototype.createEnroller = function (options, cb) {
        return new Enroller_1.default(options, cb);
    };
    return ASRService;
}());
ASRService.BASE = "/usr/local/share/asrservice/sharedresources/";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ASRService;

//# sourceMappingURL=../../map/services/asr/ASRService.js.map
