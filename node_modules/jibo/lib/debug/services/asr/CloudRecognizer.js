"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Recognizer_1 = require('./Recognizer');
var Runtime_1 = require('../../Runtime');
var CompileStatus = {
    INVALID: 0,
    COMPILING: 1,
    COMPILE_FAILED: 2,
    COMPILE_SUCCEEDED: 3
};
/**
 * This constructs a cloud speech recognizer. It can be used in parallel with an
 * {EndOfSpeechRecognizer}
 * ```
 * let action = asr.createAudioAction();
 * let cloud = new asr.CloudRecognizer();
 * let endOfSpeech = new asr.EndOfSpeechRecognizer();
 * let task = cloud + " | " + endOfSpeech;
 * action.start(task);
 * ```
 * @class CloudRecognizer
 * @private
 * @extends {Recognizer}
 * @memberof module:jibo.services.asr
 * @param {Object} options
 */
var CloudRecognizer = (function (_super) {
    __extends(CloudRecognizer, _super);
    function CloudRecognizer(rule, options) {
        options = options ? options : {};
        options.path = "nuance_curlmulti";
        _super.call(this, options);
        this.rule = rule;
        this.handle = null;
        this.status = CompileStatus.INVALID;
        this.callbacks = [];
        this.type = 'cloud';
        if (this.rule) {
            this.compile(function () { });
        }
    }
    CloudRecognizer.prototype.setRuleHandle = function (handle) {
        this.handle = handle;
        this.status = CompileStatus.COMPILE_SUCCEEDED;
    };
    CloudRecognizer.prototype.callCallbacks = function (error) {
        this.callbacks.forEach(function (callback) {
            callback(error);
        });
        this.callbacks.length = 0;
    };
    CloudRecognizer.prototype.compile = function (callback) {
        var _this = this;
        this.callbacks.push(callback);
        if (this.status === CompileStatus.INVALID) {
            this.status = CompileStatus.COMPILING;
            Runtime_1.default.instance.nlu.compile(this.rule, function (err, result) {
                if (err) {
                    _this.status = CompileStatus.COMPILE_FAILED;
                    console.warn(err);
                    _this.callCallbacks('error');
                }
                else {
                    _this.status = CompileStatus.COMPILE_SUCCEEDED;
                    _this.handle = result;
                    _this.callCallbacks();
                }
            });
        }
        else if (this.status === CompileStatus.COMPILE_FAILED) {
            this.callCallbacks('error');
        }
        else if (this.status === CompileStatus.COMPILE_SUCCEEDED) {
            this.callCallbacks();
        }
    };
    CloudRecognizer.prototype.onResult = function (data) {
        var _this = this;
        var asr = Runtime_1.default.instance.asr;
        var nlu = Runtime_1.default.instance.nlu;
        asr.pause();
        var utterance = data.utterances[0].utterance;
        var messageId = data.message_id;
        if (this.rule) {
            this.compile(function (error) {
                var parseFunction = error ? nlu.parseFromRule.bind(nlu) : nlu.parseFromURI.bind(nlu);
                var ruleReference = error ? _this.rule : _this.handle;
                parseFunction(ruleReference, utterance, function (error, result) {
                    if (error) {
                        _this.emit('error', error);
                    }
                    else {
                        _this.emit('result', result);
                    }
                    asr.resume();
                }, messageId);
            });
        }
        else {
            this.emit('result', { Input: utterance });
            asr.resume();
        }
    };
    CloudRecognizer.prototype.onIncremental = function (data) {
        var _this = this;
        var nlu = Runtime_1.default.instance.nlu;
        var utterance = data.utterances[0].utterance;
        var messageId = data.message_id;
        if (this.rule) {
            this.compile(function (error) {
                var parseFunction = error ? nlu.parseFromRule.bind(nlu) : nlu.parseFromURI.bind(nlu);
                var ruleReference = error ? _this.rule : _this.handle;
                parseFunction(ruleReference, utterance, function (error, result) {
                    if (error) {
                        _this.emit('error', error);
                    }
                    else {
                        _this.emit('incremental', result);
                    }
                }, messageId);
            });
        }
        else {
            this.emit('inremental', { Input: utterance });
        }
    };
    return CloudRecognizer;
}(Recognizer_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CloudRecognizer;

//# sourceMappingURL=../../map/services/asr/CloudRecognizer.js.map
