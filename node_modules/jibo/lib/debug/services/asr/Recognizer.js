"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var uuid = require('uuid');
var ASRVariables_1 = require('./ASRVariables');
var ASRService_1 = require('./ASRService');
var events_1 = require('events');
/**
 * Needs description.
 * @class Recognizer
 * @memberof module:jibo.services.asr
 * @private
 * @param {Object} options
 * @param {String} options.path The name of the compiled grammar.
 * @param {boolean} options.incremental `true` to return incremental results from the recognizer.
 */
var Recognizer = (function (_super) {
    __extends(Recognizer, _super);
    function Recognizer(options) {
        _super.call(this);
        this.name = options.name || uuid.v4();
        options = options || {};
        this.bargein = (typeof options.bargein === 'boolean') ? options.bargein : true;
        this.incremental = (typeof options.incremental === 'boolean') ? options.incremental : false;
        this.timeout = options.timeout ? options.timeout : 0;
        this.speakerName = options.speakerName ? options.speakerName : "";
        this.speakerId = (typeof options.speakerId === 'boolean') ? options.speakerId : true;
        this.nbest = options.nbest || 1;
        if (options.path) {
            this.path = ASRService_1.default.BASE + options.path;
        }
        else {
            this.path = ASRService_1.default.BASE + 'nuance_curlmulti';
        }
        var split = this.path.split('/');
        this.name = split[split.length - 1] + '-' + this.name;
        ASRVariables_1.default.idToRecognizer[this.name] = this;
    }
    Recognizer.prototype.setPath = function (path) {
        this.path = ASRService_1.default.BASE + path;
    };
    Recognizer.prototype.toString = function () {
        return this.pack();
    };
    /**
     * Packs the contents of this recognizer into a string representation for transfer over the wire.
     * @function Recognizer#pack
     * @returns {String} A string represenation of this recognizer.
     */
    Recognizer.prototype.pack = function () {
        return JSON.stringify({
            name: this.name,
            path: this.path,
            bargein: this.bargein,
            nbest: this.nbest,
            speaker_name: this.speakerName,
            speaker_id: this.speakerId,
            incremental: this.incremental,
            timeout: this.timeout
        });
    };
    Recognizer.prototype.onResult = function (data) {
        if (data.utterances && data.utterances.length > 0) {
            //TODO: check that these are the exact fields.
            var speaker_ids = {
                speaker_ids: data.speaker_ids,
                speaker_idstatus: data.speaker_idstatus
            };
            this.emit('result', data.utterances[0], speaker_ids);
        }
        else {
            var speaker_ids = {
                speaker_ids: data.speaker_ids,
                speaker_idstatus: data.speaker_idstatus
            };
            this.emit('result', '', speaker_ids);
        }
    };
    return Recognizer;
}(events_1.EventEmitter));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Recognizer;

//# sourceMappingURL=../../map/services/asr/Recognizer.js.map
