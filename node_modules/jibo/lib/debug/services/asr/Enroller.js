"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require('events');
var Runtime_1 = require('../../Runtime');
/**
 * This constructs an enroller.
 *
 * An enroller will continue to listen until it emits 'enrollment-succeeded'.
 * At this point it will unsubscribe all listeners and destroy itself.
 * Enrollment requires at least four "Hey Jibo"s, after which it will emit either
 * "result" or it will emit "need-more-data" with the number of utterances
 * still required.
 *
 * @param options {Object} Listen options
 * @param options.enrollmentType {enum} "text-dependent" or "text-independent"
 * @param options.speakerName {String} name of speaker to enroll
 * @returns {module:jibo.services.asr.Enroller} Enroller with given recognition options
 *
 * ```
 * this.enroller = asr.createEnroller(options, rule);
 * this.enroller.start();
 * ```
 * Listener will start emitting events. Possible events are:
 * ```
 * this.enroller.on('result', (speakerResults) => {
 *      // Use the recognition result
 *      asr.listEnrolledSpeakers(function(data){
 *          //the speaker will be listed in the data.
 *      });
 * });
 * this.enroller.on('need-more-data', (numberRequired) => {
 *      // numberRequired is the number of utterances of
 *      // "Hey, Jibo" still required for enrollment
 * })
 *
 * this.enroller.on('enrollment-started', () => {
 *      // enrollment has begun after 4 "hey jibo"s
 * })
 * ```
 * @class Enroller
 * @extends {EventEmitter}
 * @memberof module:jibo.services.asr
 */
var Enroller = (function (_super) {
    __extends(Enroller, _super);
    function Enroller(options, cb) {
        _super.call(this, options);
        this.callback = cb;
        this.asr = Runtime_1.default.instance.asr;
        this.speakerName = options.speakerName;
        this.enrollmentType = options.enrollmentType;
        this.actions = [];
        this.nSavingAudios = 0;
    }
    Enroller.prototype.onFinished = function () {
        this.enroller.removeAllListeners('result');
        this.enroller.removeAllListeners('need-more-data');
        this.action.stop();
        this.action.clear();
    };
    Enroller.prototype._consolidateResponse = function () {
        if (!this.speakerResult) {
            // no speaker result, heyJibo has returned but no speaker result, need to restart.
            this.restart();
            return;
        }
        if (this.speakerResult.speakerIdStatus === "SAVING_AUDIO") {
            this.emit('saving-audio', ++this.nSavingAudios);
            this.restart();
        }
        if (this.speakerResult.speakerIdStatus === "NEED-4-MORE-UTTS" ||
            this.speakerResult.speakerIdStatus === "NEED-3-MORE-UTTS" ||
            this.speakerResult.speakerIdStatus === "NEED-2-MORE-UTTS" ||
            this.speakerResult.speakerIdStatus === "NEED-1-MORE-UTTS") {
            // need more data, need to resend with new action.
            // can't clear old action, because it'll clear itself with the
            // composite reco
            this.emit('need-more-data', this.speakerResult.speakerIdStatus[5]);
            this.action = undefined;
            this.restart();
            return;
        }
        else if (this.speakerResult.speakerIdStatus === "ENROLLMENT-STARTED") {
            this.emit('enrollment-started');
            return;
        }
        if (this.speakerResult && this.speakerResult.speakerIdStatus === "ENROLLMENT-DONE") {
            this.emit('result', this.speakerResult, this.heyJiboResult);
            this.onFinished();
            return;
        }
    };
    Enroller.prototype._addSpeakerEnroller = function () {
        var _this = this;
        var sendTD = (this.enrollmentType === "text-dependent");
        this.enroller = new this.asr.SpeakerRecognizer({
            enrollTD: sendTD,
            enrollTI: !sendTD,
            speakerName: this.speakerName,
            timeout: 5000,
            bargein: false,
            nbest: 1,
            inremental: false
        });
        this.enroller.on('result', function (speakerIds) {
            _this.speakerResult = speakerIds;
        });
        return "" + this.enroller.pack();
    };
    Enroller.prototype._addHeyJibo = function () {
        var _this = this;
        var heyJibo = new this.asr.Recognizer({
            path: 'hey_jibo',
            timeout: 0,
            bargein: true,
            nbest: 1,
            speakerName: "",
            incremental: false,
            speakerId: false
        });
        heyJibo.on('result', function (result) {
            _this.heyJiboResult = result;
        });
        return "" + heyJibo.pack();
    };
    Enroller.prototype.start = function () {
        var _this = this;
        if (!this.asr.isInitialized) {
            console.warn('Running enroller without ASR service');
            return true;
        }
        this.task = this._addSpeakerEnroller();
        this.task = this._addHeyJibo() + " * " + this.task;
        this.action = this.asr.createAudioAction();
        this.action.on('finished', function (self) {
            _this._consolidateResponse();
            self.stop(function () {
                self.clear();
            });
        });
        this.action.start(this.task);
    };
    Enroller.prototype.restart = function () {
        var _this = this;
        this.action = this.asr.createAudioAction();
        // timeout so that there's time to stop and clear first
        // don't want to wait for stop timeout in case fragile service.
        setTimeout(function () {
            _this.action.start(_this.task);
        }, 300);
        this.action.on('finished', function (self) {
            _this._consolidateResponse();
            self.stop(function () {
                self.clear();
            });
        });
    };
    Enroller.prototype.stop = function () {
        this.onFinished();
    };
    Enroller.prototype.update = function () {
        return this.status;
    };
    return Enroller;
}(events_1.EventEmitter));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Enroller;

//# sourceMappingURL=../../map/services/asr/Enroller.js.map
