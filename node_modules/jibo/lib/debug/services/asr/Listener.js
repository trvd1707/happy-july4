"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require('events');
var Runtime_1 = require('../../Runtime');
/**
 * This constructs a listener.
 *
 * @param options {Object} Listen options
 * @param options.heyJibo {Boolean} true if listen for "Hey, Jibo"
 * @param options.detectEnd {Boolean} true if listen for end of speech
 * @param options.incremental {Boolean} true if listen for incremental results
 * @param options.authenticateSpeaker {String} name of speaker, if applicable
 * @param options.precompiledHandle {String} handle id of a precompiled rule file
 *                          through nlu service. Bypasses all rule compilation.
 * @param [rule] {String} The rule to parse results against. If no rule is
 *                          provided only embedded results will be heard.
 * @returns {module:jibo.services.asr.Listener} Listener with given recognition options
 *
 * ```
 * this.listener = asr.createListener(options, rule);
 * this.listener.start();
 * ```
 * Listener will start emitting events. Possible events are:
 * ```
 * this.listener.on('cloud', (result, speaker) => {
 *      // Use the final recognition jibo hears
 * });
 * ```
 * Where result is the {asrResult} with Input and NLParse fields if a rule
 * file was supplied to the listener.
 *
 * ```
 * this.listener.on('incremental', (result) => {
 *      // use incremental speech results
 * });
 * ```
 * Where result is the {asrResult} with Input.
 *
 * ```
 * this.listener.on('embedded', (result, speaker) => {
 *      // use embedded recognition event
 * });
 * this.listener.on('end', () => {
 *      // use the end of speech event
 * });
 * this.listener.on('error', (error) => {
 *      // do things
 * });
 * this.listener.on('finished', () => {
 *      // do things
 *      this.listener.removeAllListeners();
 *      this.listener.stop();
 * });
 * ```
 * @class Listener
 * @extends {EventEmitter}
 * @memberof module:jibo.services.asr
 */
var Listener = (function (_super) {
    __extends(Listener, _super);
    function Listener(options, rule) {
        _super.call(this);
        this.options = options;
        this.rule = rule;
        this.status = "INVALID";
    }
    /**
     * immediately stop the recognition task
     * @method module:jibo.services.asr.Listener#onFinished
     * @private
     */
    Listener.prototype.onFinished = function (status) {
        if (status === void 0) { status = "SUCCEEDED"; }
        /**
         * This is the last event to be fired.
         * @event module:jibo.services.asr.Listener#finished
         */
        this.emit('finished');
        this.status = status;
        this.removeAllListeners();
        this.action.stop();
        this.action.clear();
    };
    /**
     * once all rules have been recognized, if the
     * end function is satisfied the behavior will move on to cloud result task
     * @private
     */
    Listener.prototype.heyJiboResult = function () {
        if (this.heyJiboPhrase && this.tdSpeakerResult) {
            /**
             * An embedded recognition event occured such as someone saying 'Hey Jibo'.
             * @event module:jibo.services.asr.Listener#embedded
             * @param {Object} result
             * @param {String} result.Input The result of an embedded recognition.
             * @param {Array} speakers Text dependent speaker ID results.
             */
            this.emit('embedded', this.heyJiboPhrase, this.tdSpeakerResult);
        }
    };
    /**
     * once all rules have been recognized, if the
     * end function is satisfied the behavior will succeed,
     * @private
     */
    Listener.prototype.cloudResult = function () {
        if (this.asrResult && this.tiSpeakerResult) {
            /**
             * This event is fired when there is a cloud result.
             * @event module:jibo.services.asr.Listener#cloud
             * @param {Object} result
             * @param {String} result.Input The text recognized so far.
             * @param {Object} result.NLParse Key value pairs from parsing of a `.rule` file.
             * @param {Array} speakers Text independent speaker ID results.
             */
            if (!this.asrResult) {
                this.asrResult = {};
                this.asrResult.status = "NO-RESULTS";
            }
            this.asrResult.status = "GOT-RESULTS";
            if (!this.asrResult.NLParse) {
                this.asrResult.NLParse = {};
                this.asrResult.NLParse.status = "NO-PARSE";
            }
            else {
                this.asrResult.NLParse.status = "GOT-PARSE";
            }
            this.emit('cloud', this.asrResult, this.tiSpeakerResult);
        }
    };
    /**
     * creates task of cloud recognizer with given options.
     * @private
     */
    Listener.prototype.addCloudRecognizer = function (options) {
        var _this = this;
        // Set up the cloud recognizer
        var cloudOpts = options;
        cloudOpts.speakerId = false;
        var cloud = new this.asr.CloudRecognizer(this.rule, cloudOpts);
        if (this.options.precompiledHandle) {
            cloud.setRuleHandle(this.options.precompiledHandle);
        }
        cloud.on('result', function (result) {
            _this.asrResult = result;
            _this.cloudResult();
            cloud.removeAllListeners('result');
        });
        cloud.on('error', function (error) {
            _this.emit('error', error);
        });
        // TODO: take out this check, it will be handled
        // by upcoming status improvements in ASR
        if (options.incremental) {
            cloud.on('incremental', function (result) {
                /**
                 * ASR incremental results.
                 * @event module:jibo.services.asr.Listener#incremental
                 * @param {Object} result
                 * @param {Object} result.Input The text recognized so far.
                 * @param {Object} result.NLParse Key value pairs from parsing of a `.rule` file.
                 */
                _this.emit('incremental', result);
            });
        }
        return "" + cloud.pack();
    };
    /**
     * adds hey jibo embedded recognizer to beginning of argument task
     * @private
     */
    Listener.prototype.addHeyJibo = function () {
        var _this = this;
        var heytask = "";
        var heyJibo = new this.asr.Recognizer({ path: 'hey_jibo' });
        heyJibo.on('result', function (result) {
            _this.heyJiboPhrase = result;
            _this.heyJiboResult();
            heyJibo.removeAllListeners('result');
        });
        heytask = this.tdReco ? "(" + heyJibo.pack() + " * " + this.tdReco.pack() + ")" : "" + heyJibo.pack();
        return "(" + heytask + ")";
    };
    /**
     * adds speaker recognizer sequentially to beginning of argument task
     * @private
     */
    Listener.prototype.addSpeakerRecognizers = function () {
        var _this = this;
        this.tiReco = new this.asr.SpeakerRecognizer({ authTI: true });
        this.tiReco.on('result', function (speakerIds) {
            _this.tiSpeakerResult = speakerIds;
            _this.cloudResult();
            _this.tiReco.removeAllListeners('result');
        });
        return "(" + this.tiReco.pack() + ")";
    };
    /**
     * adds EOS task as parallel to beginning of argument task.
     * @private
     */
    Listener.prototype.addEOSRecognizer = function () {
        var _this = this;
        var endOfSpeech = new this.asr.EndOfSpeechRecognizer({});
        endOfSpeech.on('result', function () {
            /**
             * This event is fired when end of speech is detected.
             * @event module:jibo.services.asr.Listener#end
             */
            _this.emit('end');
            endOfSpeech.removeAllListeners('result');
        });
        return "" + endOfSpeech.pack();
    };
    /**
     * Begins recognition task of listener.
     * Once started, the listener will emit events such as:
     * cloud, incremental, end, error (depending on constructor options)
     * returns true if listen successfully started,
     * emits error and returns false if task is already in progress.
     * @method module:jibo.services.asr.Listener#start
     * @returns {Boolean} true if start was successful, false otherwise
     * @public
     */
    Listener.prototype.start = function () {
        var _this = this;
        this.asr = Runtime_1.default.instance.asr;
        if (this.status === "IN_PROGRESS") {
            this.emit('error', 'cannot restart; listener is currently in progress.');
            return false;
        }
        // if(this.options.heyJibo && !this.options.rule) {
        //     this.embeddedOnly = true;
        // }
        this.status = 'IN_PROGRESS';
        // TODO: Change this to false when TI speaker works
        this.tiSpeakerResult = {};
        this.tiSpeakerResult.speaker_ids = [];
        this.tiSpeakerResult.speaker_idstatus = 'ID-TI-NOT-AVAILABLE';
        this.tdSpeakerResult = false;
        this.action = this.asr.createAudioAction();
        this.action.on('finished', function () {
            _this.onFinished();
        });
        // TODO: because of way ASR system works, 
        // only emits for TD result. Otherwise emits
        // as normal but with sensory_spkr_id_ti reco.
        this.action.on('speakerid', function (data) {
            var speakerIds = data.speaker_ids;
            var speakerIdStatus = data.speaker_idstatus;
            _this.tdSpeakerResult = { speakerIds: speakerIds, speakerIdStatus: speakerIdStatus };
            _this.heyJiboResult();
        });
        this.action.on('error', function (message) {
            _this.emit('error', message);
        });
        var task;
        // if we want a cloud recognizer and associated recos.
        if (!this.options.embeddedOnly) {
            task = this.addCloudRecognizer(this.options);
            // Set up speaker Recognizers
            // let speakerTask = this.addSpeakerRecognizers(task);
            // task = `(${speakerTask} * ${task})`;        
            // Set up EOS reocgnizer
            if (this.options.detectEnd) {
                var eosTask = this.addEOSRecognizer();
                task = "(" + eosTask + " | " + task + ")";
            }
            // Set up embedded recognizer
            if (this.options.heyJibo) {
                var heyTask = this.addHeyJibo();
                task = "(" + heyTask + " * " + task + ")";
            }
        }
        else {
            task = this.addHeyJibo();
        }
        this.action.start(task);
        return true;
    };
    /**
     * explicit call to stop the listener and recognition task.
     * Listener can still be restarted, but regardless of where
     * listener was in task, no more events will be emitted.
     * Listeners are no longer subscribed.
     * @method module:jibo.services.asr.Listener#stop
     * @public
     */
    Listener.prototype.stop = function () {
        this.onFinished("STOPPED");
    };
    return Listener;
}(events_1.EventEmitter));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Listener;

//# sourceMappingURL=../../map/services/asr/Listener.js.map
