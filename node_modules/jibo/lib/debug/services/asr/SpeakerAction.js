"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var uuid = require('uuid');
var ASRVariables_1 = require('./ASRVariables');
var events_1 = require('events');
var SpeakerAction = (function (_super) {
    __extends(SpeakerAction, _super);
    function SpeakerAction(url) {
        _super.call(this);
        this.httpInterface = url;
        this.id = 'spkr-action-' + uuid.v4();
        ASRVariables_1.default.idToAction[this.id] = this;
    }
    SpeakerAction.prototype.setAudioSourceId = function (id) {
        this.audioSourceId = id;
    };
    /*
     * Deletes a speaker from the list of enrolled speakers.
     * @param {String} speaker - the name of the speaker to be deleted (empty deletes all speakers)
     * @param {String} textIdType - the type of enrollment to be deleted ("TD" or "TI" for "text dependent" or "text independent")
     */
    // TODO: add warning somewhere "you are about to delete all enrolled speakers"
    // necessary? because these are only for jibo apps 
    SpeakerAction.prototype.deleteSpeaker = function (speaker, textIdType) {
        if (speaker === void 0) { speaker = ""; }
        var request = new XMLHttpRequest();
        var body = {
            action: "delete",
            task_id: this.id,
            spkr_id_type: textIdType,
            speaker_name: speaker
        };
        body = JSON.stringify(body);
        request.open("POST", this.httpInterface, true);
        request.send(body);
    };
    /*
     * Lists speakers from the available enrolled speakers.
     * @param {String} speaker - the name of the speaker to be listed (will return types (td, ti) of enrollment available (empty lists all speakers)
     * @param {String} textIdType - the type of enrollment to be listed ("TD" or "TI" for "text dependent" or "text independent")
     */
    SpeakerAction.prototype.listSpeakers = function (speaker, textIdType) {
        if (speaker === void 0) { speaker = ""; }
        var request = new XMLHttpRequest();
        var body = {
            action: "list",
            task_id: this.id,
            spkr_id_type: textIdType || "TD+TI",
            speaker_name: speaker
        };
        body = JSON.stringify(body);
        request.open("POST", this.httpInterface, true);
        request.send(body);
    };
    return SpeakerAction;
}(events_1.EventEmitter));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SpeakerAction;

//# sourceMappingURL=../../map/services/asr/SpeakerAction.js.map
