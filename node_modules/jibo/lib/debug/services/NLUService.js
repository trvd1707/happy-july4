"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require('events');
/**
 * This callback is displayed as a global member.
 * @callback module:jibo/nlu~ParseCallback
 * @param {String} error `null` if no error.
 * @param {Object} result Data structure using the following format:
 * ```
 * {
     *    Input: "hello my name is Joe I work in a button factory"
     *    NLParse: {
     *       who: "Joe",
     *       what: "Button factory"
     *    }
     * }
 * ```
 * @param {String} result.Input The speech returned from cloud recognition. Note: there
 *                              will be no punctuation in speech returned from cloud recognition.
 * @param {String} result.NLParse The result of a parse from a `.rules` file.
 */
/**
 * @description
 * Natural Language Understanding
 *
 * ```
 * var nlu = require("jibo").nlu;
 * ```
 * @module jibo/nlu
 */
var NLUService = (function (_super) {
    __extends(NLUService, _super);
    function NLUService() {
        _super.call(this);
    }
    NLUService.prototype.init = function (service, cb) {
        this.httpInterface = "http://" + service.host + ":" + service.port;
        this.loggingEnabled = false;
        cb();
    };
    /**
     * Precompiles a rule from string.
     * @param rule {String} Rule to compile.
     * @param callback {module:jibo/nlu~ParseCallback} Callback for when the rule is compiled with generated handle.
     * @param handle {String} Optional handle to enable dynamically generated rules to be accessible
     * within parser for all rule files in skill. Ex. 'crew'.
     * @method module:jibo/nlu~compile
     */
    NLUService.prototype.compile = function (rule, callback, handle) {
        var _this = this;
        var body = {
            "REQ_TYPE": "COMPILE",
            "REQ_CONTENT": {
                "RULE_STRING": rule
            }
        };
        if (handle) {
            body.REQ_CONTENT.URI = "handle:" + handle;
        }
        var request = new XMLHttpRequest();
        body = JSON.stringify(body);
        request.open("POST", this.httpInterface + '/nlu_interface', true);
        request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
                var response = JSON.parse(request.response);
                if (_this.loggingEnabled) {
                    console.log('request.response');
                    console.log(request.response);
                }
                if (response.Status === 'OK') {
                    var result = response.URI;
                    callback(null, result);
                }
                else if (response.Status === 'ERROR') {
                    callback(response.Message);
                }
            }
            else if (request.readyState == 4 && request.status === 0) {
                callback("NLU Service is unavailable");
            }
        };
        if (this.loggingEnabled) {
            console.log("body");
            console.log(body);
        }
        request.send(body);
    };
    /**
     * Parses text using a rule.
     * @param rule {String} Rule to use when parsing text.
     * @param text {String} The text to parse.
     * @param callback {callback} Callback for when the parse is complete.
     * @param messageId {String} message Id to match ASR data to NLU parsing.
     * @method module:jibo/nlu~parseFromRule
     */
    NLUService.prototype.parseFromRule = function (rule, text, callback, messageId) {
        var _this = this;
        text = text.toLowerCase();
        var body = {
            "REQ_TYPE": "PARSE_FROM_TEXT",
            "REQ_CONTENT": {
                "RULE_STRING": rule,
                "TXT_STRING": text
            },
            "MESSAGE_ID": messageId
        };
        var request = new XMLHttpRequest();
        body = JSON.stringify(body);
        request.open("POST", this.httpInterface + '/nlu_interface', true);
        request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
                var response = JSON.parse(request.response);
                if (_this.loggingEnabled) {
                    console.log('request.response');
                    console.log(request.response);
                }
                if (response.Status === 'OK') {
                    var result = response.Result.length > 0 ? response.Result[0] : { Input: text };
                    callback(null, result);
                }
                else if (response.Status === 'ERROR') {
                    callback(response.Message);
                }
            }
            else if (request.readyState == 4 && request.status === 0) {
                callback("NLU Service is unavailable");
            }
        };
        if (this.loggingEnabled) {
            console.log("body");
            console.log(body);
        }
        request.send(body);
    };
    /**
     * Parse text using a rule file.
     * @param ruleHandle {String} URI handle for precompiled rule file.
     * @param text {String} The text to parse.
     * @param callback {callback} Callback for when the parse is complete.
     * @param messageId {String} message Id to match ASR data to NLU parsing.
     * @method module:jibo/nlu~parseFromURI
     */
    NLUService.prototype.parseFromURI = function (ruleHandle, text, callback, messageId) {
        var _this = this;
        text = text.toLowerCase();
        var body = {
            "REQ_TYPE": "PARSE_FROM_URI",
            "REQ_CONTENT": {
                "URI": ruleHandle,
                "TXT_STRING": text
            },
            "MESSAGE_ID": messageId
        };
        var request = new XMLHttpRequest();
        body = JSON.stringify(body);
        request.open("POST", this.httpInterface + '/nlu_interface', true);
        request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
                var response = JSON.parse(request.response);
                if (_this.loggingEnabled) {
                    console.log('request.response');
                    console.log(request.response);
                }
                if (response.Status === 'OK') {
                    var result = response.Result.length > 0 ? response.Result[0] : { Input: text };
                    callback(null, result);
                }
                else if (response.Status === 'ERROR') {
                    callback(response.Message);
                }
            }
            else if (request.readyState == 4 && request.status === 0) {
                callback("NLU Service is unavailable");
            }
        };
        if (this.loggingEnabled) {
            console.log("body");
            console.log(body);
        }
        request.send(body);
    };
    NLUService.prototype.setLogging = function (loggingEnabled) {
        this.loggingEnabled = loggingEnabled;
    };
    NLUService.prototype.parseFromFile = function () {
    };
    return NLUService;
}(events_1.EventEmitter));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = NLUService;

//# sourceMappingURL=../map/services/NLUService.js.map
