"use strict";
var async = require('async');
/**
 * @description
 * Non-motion-related robot body services (i.e. temperature, fan, battery, backlight, etc.).
 *
 * ```
 * var jibo = require("jibo");
 * jibo.body.getBatteryTemperature();
 * ```
 * @module jibo/body
 */
var BodyService = (function () {
    function BodyService() {
        this.bs = {};
        this.bs.miscState = {
            ts: [],
            main_board_temp: 0,
            cpu_temp: 0,
            intake_temp: 0,
            exhaust_temp: 0,
            neck_motor_temp: 0,
            torso_motor_temp: 0,
            pelvis_motor_temp: 0 // Pelvis motor temperature in degrees Celsius
        };
        this.bs.touchState = {
            "ts": [],
            "touched": false,
            "pad_state": [0, 0, 0, 0, 0, 0],
            "changed": [0, 0, 0, 0, 0, 0] // Array with the indices of the pads that changed in this update, empty if none.
        };
        this.bs.powerState = {
            ts: [],
            source: "",
            vsys: 0,
            battery: // Battery object, or undefined if no battery is present or detected.
            {
                id: 0,
                cycles: 0,
                capacity: 0,
                max_capacity: 0,
                charge_rate: 0,
                temp: 0 // Battery temperature in Celsius
            }
        };
    }
    BodyService.prototype.init = function (service, cb) {
        this.httpInterface = "http://" + service.host + ":" + service.port;
        this.socketUrl = "ws:" + service.host + ":" + service.port;
        async.parallel([
            this.createMiscSocket.bind(this),
            this.createTouchSocket.bind(this),
            this.createPowerSocket.bind(this)
        ], cb);
    };
    /**
     * Gets the robot's battery temperature.
     * @method  module:jibo/body~getBatteryTemperature
     * @return The temperature of the battery in degrees Celsius.
     */
    BodyService.prototype.getBatteryTemperature = function () {
        return this.bs.powerState.battery.temp;
    };
    /** Gets the robot's battery level.
     * @method module:jibo/body~getBatteryLevel
     * @return The current level of the battery as a percentage.
     */
    BodyService.prototype.getBatteryLevel = function () {
        return (this.bs.powerState.battery.capacity / this.bs.powerState.battery.max_capacity) * 100;
    };
    /**
     * Gets the robot's system voltage.
     * @method module:jibo/body~getSystemVoltage
     * @return The current system voltage estimate.
     */
    BodyService.prototype.getSystemVoltage = function () {
        return this.bs.powerState.vsys;
    };
    /**
     * Tells you whether or not the robot's battery is charging.
     * @method module:jibo/body~isBatteryCharging
     * @return `true` if the battery is currently charging; `false` otherwise.
     */
    BodyService.prototype.isBatteryCharging = function () {
        return (this.bs.powerState.source === 'EXTERNAL');
    };
    /**
     * Gets the robot's main board temperature.
     * @method module:jibo/body~getMainBoardTemperature
     * @return The temperature of the main board in degrees Celsius.
     */
    BodyService.prototype.getMainBoardTemperature = function () {
        return this.bs.miscState.main_board_temp;
    };
    /**
     * Gets the robot's CPU temperature.
     * @method module:jibo/body~getCPUTemperature
     * @return The temperature of the CPU in degrees Celsius.
     */
    BodyService.prototype.getCPUTemperature = function () {
        return this.bs.miscState.cpu_temp;
    };
    /**
     * Gets the touch state of pads in Jibo's head.
     * @method module:jibo/body~getTouchState
     * @returns touchState {Object} The state of jibo's head pads.
     * @returns touchState.changed {Array} The pads which have changed since last stream
     * @returns touchState.pad_state {Array} The array of the 6 pads
     *                      with `true` for on and `false` for off. Layout of
     *                      pads, from left to right, top to bottom, is:
     *                      [(0, 3), (1, 4), (2, 5)]. That is,
     *                      0   3
     *                      1   4
     *                      2   5
     * @returns touchState.touched {boolean} `true` if any touch pads are touched.
     */
    BodyService.prototype.getTouchState = function () {
        return this.bs.touchState;
    };
    /**
     * Gets the robot's fan speed.
     * @method module:jibo/body~getFanSpeed
     * @param {Callback} cb Callback that notifies the caller that the
     *                      system data was received or if an error was encountered.
     *                      If successful, returns cooling fan speed as percentage of
     *                      maximum (range [0.0, 1.0]).
     *
     */
    BodyService.prototype.getFanSpeed = function (cb) {
        this._getSystemSetting("fan_speed", cb);
    };
    /**
     * Gets LCD backlight information.
     * @method module:jibo/body~getBacklight
     * @param {Callback} cb Callback that notifies the caller that the
     *                      system data was received or if an error was encountered.
     *                      If successful, returns the LCD backlight brightness
     *                      in percentage of maximum (range [0.0, 1.0]).
     */
    BodyService.prototype.getBacklight = function (cb) {
        this._getSystemSetting("lcd_backlight", cb);
    };
    BodyService.prototype._getSystemSetting = function (setting, cb) {
        if (this.httpInterface === undefined) {
            cb('Body Service is not available', null);
            return;
        }
        var request = new XMLHttpRequest();
        request.open("GET", this.httpInterface + '/settings', true);
        request.onreadystatechange = function () {
            if (request.readyState == 4) {
                if (request.status == 200) {
                    if (request.response) {
                        // success!
                        var response = JSON.parse(request.response);
                        cb(null, response[setting]);
                    }
                    else {
                        cb('No data received from body service', null);
                    }
                }
                else {
                    // failure if anything else
                    var msg = 'Body service is unavailable';
                    if (request.statusText !== undefined && request.statusText !== "") {
                        msg = request.statusText;
                    }
                    cb(msg, null);
                }
            }
        };
        request.send();
    };
    /**
     * Sets the LCD backlight brightness.
     * @method module:jibo/body~setBacklight
     * @param {Value} value Desired brightness of LCD backlight (range [0.0 - 1.0]).
     * @param {Callback} cb Callback that notifies the caller that
     *                      system data was received or if an error was encountered.
     *                      If unsuccessful, returns the error; otherwise, returns `null`.
     */
    BodyService.prototype.setBacklight = function (value, cb) {
        var _this = this;
        // ensure that value is between 0.0 and 1.0
        if ((value < 0.0) || (value > 1.0)) {
            var error = 'Backlight brightness value of ' + value + ' is out of range [0.0 - 1.0].';
            cb(error);
            return;
        }
        // get fan speed so we can set current value in body (so we don't muck with it!)
        this.getFanSpeed(function (error, fan) {
            if (error) {
                cb(error);
            }
            else {
                var body = {
                    "lcd_backlight": value,
                    "fan_speed": fan
                };
                var request_1 = new XMLHttpRequest();
                var uri = _this.httpInterface + '/settings';
                request_1.open("POST", uri, true);
                request_1.onreadystatechange = function () {
                    if (request_1.readyState == 4) {
                        if (request_1.status == 204) {
                            cb(null);
                        }
                        else {
                            // failure if anything else
                            var msg = 'Body service is unavailable';
                            if (request_1.statusText !== undefined && request_1.statusText !== "") {
                                msg = request_1.statusText;
                            }
                            cb(msg, null);
                        }
                    }
                };
                request_1.send(JSON.stringify(body));
            }
        });
    };
    BodyService.prototype.createMiscSocket = function (cb) {
        var _this = this;
        this.MiscSocket = new WebSocket(this.socketUrl + "/misc");
        this.MiscSocket.onerror = function () {
            console.error("Error opening misc state socket at " + _this.socketUrl + "/misc");
        };
        this.MiscSocket.onmessage = function (event) {
            _this.bs.miscState = JSON.parse(event.data);
        };
        cb();
    };
    BodyService.prototype.createTouchSocket = function (cb) {
        var _this = this;
        this.TouchSocket = new WebSocket(this.socketUrl + "/touch");
        this.TouchSocket.onerror = function () {
            console.error("Error opening touch state socket at " + _this.socketUrl + "/touch");
        };
        this.TouchSocket.onmessage = function (event) {
            _this.bs.touchState = JSON.parse(event.data);
        };
        cb();
    };
    BodyService.prototype.createPowerSocket = function (cb) {
        var _this = this;
        this.PowerSocket = new WebSocket(this.socketUrl + "/power");
        this.PowerSocket.onerror = function () {
            console.error("Error opening power state socket at " + _this.socketUrl + "/power");
        };
        this.PowerSocket.onmessage = function (event) {
            _this.bs.powerState = JSON.parse(event.data);
        };
        cb();
    };
    return BodyService;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BodyService;

//# sourceMappingURL=../map/services/BodyService.js.map
