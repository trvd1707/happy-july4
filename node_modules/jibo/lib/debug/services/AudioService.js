"use strict";
/**
 * @description
 * Robot audio services
 *
 * ```
 * var jibo = require("jibo");
 * jibo.audio.getMasterVolume();
 * ```
 * @module jibo/audio
 */
var AudioService = (function () {
    function AudioService() {
        this.httpInterface = undefined;
    }
    AudioService.prototype.init = function (service, cb) {
        this.httpInterface = "http://" + service.host + ":" + service.port;
        cb();
    };
    /**
     * Gets current master volume.
     * @method module:jibo/audio~getMasterVolume
     * @param {Callback} cb Callback that notifies the caller that the
     *                      system data was received or if an error was encountered.
     *                      If successful, returns the master volume (range [0.0, 1.0]).
     */
    AudioService.prototype.getMasterVolume = function (cb) {
        this._getMixerSetting(function (error, settings) {
            if (error) {
                cb(error);
            }
            else {
                cb(null, settings.master.playbackVolume);
            }
        });
    };
    /**
     * Sets the master volume.
     * @method module:jibo/audio~setMasterVolume
     * @param {Value} value Desired master volume (range [0.0 - 1.0]).
     * @param {Callback} cb Callback that notifies the caller that
     *                      system data was received or if an error was encountered.
     *                      If unsuccessful, returns the error; otherwise, returns `null`.
     */
    AudioService.prototype.setMasterVolume = function (value, cb) {
        var _this = this;
        // ensure that value is between 0.0 and 1.0
        if (!value || (value < 0.0) || (value > 1.0)) {
            var error = 'Master volume of ' + value + ' is out of range [0.0 - 1.0].';
            cb(error);
            return;
        }
        // get mixer settings so we can only alter the one property
        this._getMixerSetting(function (error, settings) {
            if (error) {
                cb(error);
            }
            else {
                var request_1 = new XMLHttpRequest();
                var uri = _this.httpInterface + '/mixer';
                request_1.open("POST", uri, true);
                request_1.onreadystatechange = function () {
                    if (request_1.readyState == 4) {
                        if (request_1.status == 204) {
                            cb(null);
                        }
                        else {
                            // failure if anything else
                            var msg = 'Audio Service is unavailable';
                            if (request_1.statusText !== undefined && request_1.statusText !== "") {
                                msg = request_1.statusText; // use "reason" if they gave it
                            }
                            cb(msg);
                        }
                    }
                };
                settings.master.playbackVolume = value;
                request_1.send(JSON.stringify(settings));
            }
        });
    };
    AudioService.prototype._getMixerSetting = function (cb) {
        if (this.httpInterface === undefined) {
            cb('Audio Service is not available', null);
            return;
        }
        var request = new XMLHttpRequest();
        request.open("GET", this.httpInterface + '/mixer', true);
        request.onreadystatechange = function () {
            if (request.readyState == 4) {
                if (request.status == 200) {
                    if (request.response) {
                        // success!
                        var response = JSON.parse(request.response);
                        cb(null, response);
                    }
                    else {
                        cb('No data received from audio service', null);
                    }
                }
                else {
                    // failure if anything else
                    var msg = 'Audio service is unavailable';
                    if (request.statusText !== undefined && request.statusText !== "") {
                        msg = request.statusText;
                    }
                    cb(msg, null);
                }
            }
        };
        request.send();
    };
    return AudioService;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AudioService;

//# sourceMappingURL=../map/services/AudioService.js.map
