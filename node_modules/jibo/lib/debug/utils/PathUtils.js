"use strict";
var path = require('path');
var Module = require('module');
var findRoot = require('find-root');
/**
 * Class for resolve root and asset paths.
 * @class PathUtils
 * @memberof module:jibo/utils
 */
var PathUtils = (function () {
    function PathUtils() {
    }
    /**
     * Traverses up the directories until the first folder with a package.json file.
     * @method module:jibo/utils.PathUtils~findRoot
     * @param {String} [start] The starting directory, empty uses current working directory.
     * @return {String} The root directory which contains package.json.
     */
    PathUtils.findRoot = function (start) {
        return findRoot(start || process.cwd());
    };
    /**
     * Gets a project namee. Useful for figuring out the asset pack.
     * @method module:jibo/utils.PathUtils~getProjectName
     * @param {String} dir The directory. Should contain package.json.
     * @return {String} The name in the package.json.
     */
    PathUtils.getProjectName = function (dir) {
        return require(path.join(dir, 'package.json')).name;
    };
    /**
     * Sets the default path for behaviors, rules, animations, etc.
     * @method module:jibo/utils.PathUtils~setDefaultPath
     * @param {String} parentDir The parent directory.
     * @param {String} fileName The file name.
     * @return {String} asset URI to load.
     */
    PathUtils.setDefaultPath = function (parentDir, fileName) {
        var assetPack = PathUtils.getAssetPack(fileName);
        fileName = path.join(parentDir, fileName);
        if (assetPack) {
            fileName = assetPack + PathUtils.ASSET_TOKEN + fileName;
        }
        return fileName;
    };
    /**
     * Gets the asset pack from the asset file, if available.
     * @method module:jibo/utils.PathUtils~getAssetPack
     * @param {String} fileName The file name.
     * @return {String} The asset pack.
     */
    PathUtils.getAssetPack = function (fileName) {
        var split = fileName.split(PathUtils.ASSET_TOKEN);
        return (split.length === 1) ? "" : split[0];
    };
    /**
     * Gets an asset pack URI.
     * @method module:jibo/utils.PathUtils~getAssetUri
     * @param {String} fileName The file name to load, can be "asset-pack://etc".
     * @param {String} currentAssetPack The current asset pack to load within.
     * @return {String} The result URI.
     */
    PathUtils.getAssetUri = function (fileName, currentAssetPack, callback) {
        if (currentAssetPack === void 0) { currentAssetPack = ''; }
        // console.log("filename", fileName, "assetpack", currentAssetPack);
        var split = fileName.split(PathUtils.ASSET_TOKEN);
        if (split.length === 1 && currentAssetPack) {
            var assetPackRoot = findRoot(PathUtils.resolve(currentAssetPack + "/package.json"));
            var uri = path.join(assetPackRoot, fileName);
            if (callback) {
                callback(uri, assetPackRoot); // deprecated
            }
            return uri;
        }
        else if (split.length === 2) {
            var assetPackRoot = findRoot(PathUtils.resolve(split[0] + "/package.json"));
            var uri = path.join(assetPackRoot, split[1]);
            if (callback) {
                callback(uri, assetPackRoot); // deprecated
            }
            return uri;
        }
        else if (split.length === 1) {
            var pathFromRoot = fileName;
            var root = PathUtils.findRoot();
            var uri = path.join(root, pathFromRoot);
            if (callback) {
                callback(uri, root); // deprecated
            }
            return uri;
        }
        return null;
    };
    /**
     * Gets asset source from filename and asset pack.
     * @method module:jibo/utils.PathUtils~getAudioUri
     * @param {String} fileName The file name to load, can be "asset-pack://etc".
     * @param {String} currentAssetPack The current asset pack to load within.
     * @return {String} The result URI.
     */
    PathUtils.getAudioUri = function (fileName, currentAssetPack, callback) {
        if (currentAssetPack === void 0) { currentAssetPack = ''; }
        var audioPath = PathUtils.setDefaultPath('audio', fileName);
        return PathUtils.getAssetUri(audioPath, currentAssetPack, callback); // callback deprecated
    };
    /**
     * Gets asset source from filename and asset pack.
     * @method module:jibo/utils.PathUtils~getTimelineUri
     * @param {String} fileName The file name to load, can be "asset-pack://etc".
     * @param {String} currentAssetPack The current asset pack to load within.
     * @return {String} The result URI.
     */
    PathUtils.getTimelineUri = function (fileName, currentAssetPack, callback) {
        if (currentAssetPack === void 0) { currentAssetPack = ''; }
        var timelinePath = PathUtils.setDefaultPath('timelines', fileName);
        return PathUtils.getAssetUri(timelinePath, currentAssetPack, callback); // callback deprecated
    };
    /**
     * Modified from https://github.com/sindresorhus/resolve-from.
     * @method module:jibo/utils.PathUtils~resolve
     * @param {String} moduleId The module to resolve path to.
     * @private
     * @return {String} The resolved file path.
     */
    PathUtils.resolve = function (moduleId) {
        var fromDir = path.resolve(process.cwd());
        var fromFile = path.join(fromDir, 'noop.js');
        try {
            return Module._resolveFilename(moduleId, {
                id: fromFile,
                filename: fromFile,
                paths: Module._nodeModulePaths(fromDir)
            });
        }
        catch (err) {
            return null;
        }
    };
    /**
     * The token separating asset packs.
     * @name module:jibo/utils.PathUtils.ASSET_TOKEN
     * @type {String}
     * @private
     * @readOnly
     */
    PathUtils.ASSET_TOKEN = '://';
    return PathUtils;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PathUtils;

//# sourceMappingURL=../map/utils/PathUtils.js.map
