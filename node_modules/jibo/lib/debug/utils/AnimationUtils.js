"use strict";
var animation_utilities_1 = require('animation-utilities');
var jibo_1 = require('../jibo');
//keep these around
var robotInfo;
var timeline;
var renderer;
/**
 * we want to wrap the loading of animations into our own runtime file resolution
 * and format conversion
 * @private
 */
function wrapAnimationUtilities(animUtils) {
    /**
     * provided for backwards compatibility
     * @deprecated
     * @private
     */
    animation_utilities_1.animate.createAnimationUtilities = function () {
        console.warn("Warning: createAnimationUtilities() is deprecated. Access anim utils via jibo.animate.");
        return animUtils;
    };
    /**
     * Creates an animation builder from a .keys file.
     * @function module:jibo/animate#createAnimationBuilderFromKeysPath
     * @param {String} uri Path to the .keys file.
     * @param {String} root Base path from which texture files are located.
     * @param {module:jibo/animate~AnimationBuilderCreatedCallback} cb Callback function that takes an {@link AnimationBuilder} as an argument.
     * @deprecated since 3.1.0
     * @see module:jibo/loader.KeysTask
     */
    animUtils.createAnimationBuilderFromKeysPath = function (uri, root, cb) {
        console.warn("Warning: createAnimationBuilderFromKeysPath() is deprecated. Use the 'keys' load task instead.");
        jibo_1.default.loader.load({
            src: uri,
            root: root,
            type: 'keys',
            complete: function (err, animation) {
                cb(animation.builder);
            }
        });
    };
    /**
     * provided for backwards compatibility
     * @deprecated
     * @private
     */
    animUtils.createAnimationUtilities = function () {
        return animUtils;
    };
    // pass module types through to the singleton instance
    animUtils.MODALITY_NAME = animation_utilities_1.animate.MODALITY_NAME;
    animUtils.trajectory = animation_utilities_1.animate.trajectory;
    animUtils.AnimationEventType = animation_utilities_1.animate.AnimationEventType;
    animUtils.LookatEventType = animation_utilities_1.animate.LookatEventType;
    // plus the shared three.js module
    /**
     * Shared three.js module reference.
     * @member module:jibo/animate.THREE
     */
    animUtils.THREE = animation_utilities_1.THREE;
}
/**
 * Wrapping this call because we already have a reference to robot info
 * and the timeline.
 * @private
 */
function wrapVisualize() {
    animation_utilities_1.visualize.robotInfo = robotInfo;
    animation_utilities_1.visualize.timeline = timeline;
    /**
     * Creates a face renderer bound to the given DOM element.
     * @function module:jibo/visualize#createFaceRenderer
     * @param {HTMLElement} element The element to draw the eye to.
     * @returns {FaceRenderer}
     */
    animation_utilities_1.visualize.createFaceRenderer = function (element) {
        if (renderer) {
            return renderer;
        }
        renderer = jibo_1.default.face;
        renderer.init(element);
        timeline.addOutput(new animation_utilities_1.AuxOutput(robotInfo, renderer));
        return renderer;
    };
    var createRobotRenderer = animation_utilities_1.visualize.createRobotRenderer;
    animation_utilities_1.visualize.createRobotRenderer = function (element, type, callback) {
        createRobotRenderer(robotInfo, element, type, function (renderer) {
            if (renderer !== null) {
                animation_utilities_1.TimelineBuilder.connectRenderer(timeline, renderer);
                if (callback) {
                    callback(null, renderer);
                }
            }
            else {
                if (callback) {
                    callback("Renderer creation failed");
                }
            }
        });
    };
}
var AnimationUtils = (function () {
    function AnimationUtils() {
    }
    AnimationUtils.init = function (animUtils, done) {
        var config = new animation_utilities_1.JiboConfig();
        animation_utilities_1.RobotInfo.createInfo(config, function (ri) {
            animation_utilities_1.TimelineBuilder.createTimeline(ri, function (tl) {
                robotInfo = ri;
                timeline = tl;
                animUtils.init(timeline, robotInfo);
                wrapAnimationUtilities(animUtils);
                wrapVisualize();
                done();
            });
        });
    };
    return AnimationUtils;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AnimationUtils;

//# sourceMappingURL=../map/utils/AnimationUtils.js.map
