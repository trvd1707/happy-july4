"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * Error type when a load process fails.
 * @class LoaderError
 * @extends Error
 * @memberof module:jibo/loader
 */
var LoaderError = (function (_super) {
    __extends(LoaderError, _super);
    /**
     * The original loading error thrown, usually `fs`.
     * @name module:jibo/loader.LoaderError#originalError
     * @type {Error}
     */
    /**
     * The full path to the file request. Combines the `basePath` with `asset.src`.
     * @name module:jibo/loader.LoaderError#request
     * @type {String}
     */
    function LoaderError(originalError, request, message) {
        _super.call(this, message);
        this.originalError = originalError;
        this.request = request;
        /**
         * The name of the error type.
         * @name module:jibo/loader.LoaderError#name
         * @type {String}
         */
        this.name = 'LoaderError';
        /**
         * Error message.
         * @name module:jibo/loader.LoaderError#message
         * @type {String}
         */
        this.message = message || originalError.message || 'load error';
        /**
         * Stack trace for the error.
         * @name module:jibo/loader.LoaderError#stack
         * @type {String}
         */
        this.stack = (new Error()).stack;
    }
    /**
     * Converts the error to a string.
     * @method module:jibo/loader.LoaderError#toString
     * @return {String} String representation of error.
     */
    LoaderError.prototype.toString = function () {
        return this.name + ': ' + this.message;
    };
    return LoaderError;
}(Error));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LoaderError;

//# sourceMappingURL=../map/loader/LoaderError.js.map
