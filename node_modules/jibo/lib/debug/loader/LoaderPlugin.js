"use strict";
var AssetManager_1 = require('./AssetManager');
var Loader_1 = require('./Loader');
var AssetUtils_1 = require('./AssetUtils');
var Task_1 = require('./tasks/Task');
var LoadTask_1 = require('./tasks/LoadTask');
var ListTask_1 = require('./tasks/ListTask');
var FunctionTask_1 = require('./tasks/FunctionTask');
var LoaderError_1 = require('./LoaderError');
/**
 * Adds all assets to a skill,
 * including custom ones from your file system
 * that are not included in the template skill by default.
 * Assets can include images, sounds, code, data, and other files.
 * @module jibo/loader
 */
var LoaderPlugin = (function () {
    function LoaderPlugin() {
        // Check for singleton
        if (LoaderPlugin._instance) {
            throw new Error("Only one LoaderPlugin can be created at once");
        }
        // Set singleton
        LoaderPlugin._instance = this;
        /**
         * Instance of the asset manager.
         * @name module:jibo/loader#assetManager
         * @type {module:jibo/loader.AssetManager}
         */
        this.assetManager = new AssetManager_1.default();
        // Expose public classes
        this.AssetUtils = AssetUtils_1.default;
        this.Loader = Loader_1.default;
        this.Task = Task_1.default;
        this.LoadTask = LoadTask_1.default;
        this.ListTask = ListTask_1.default;
        this.FunctionTask = FunctionTask_1.default;
        this.LoaderError = LoaderError_1.default;
        // Register tasks
        this.register(LoadTask_1.default, 0)
            .register(ListTask_1.default, 5)
            .register(FunctionTask_1.default, 10);
    }
    Object.defineProperty(LoaderPlugin, "instance", {
        /**
         * Gets singleton instance of sound library.
         * @private
         * @static
         * @name module:jibo/sound.instance
         * @type {module:jibo/sound}
         */
        get: function () {
            return LoaderPlugin._instance;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Handles any errors coming from the manager.
     * @method module:jibo/loader#register
     * @param {Function} TaskDefinition The class definition for a loader task.
     * @param {int} [priority=0] The priority of the task. Higher priority tasks
     *        are run first and therefore should be more specific
     *        types of tasks. Lower priority tasks are more generalized.
     * @return {module:jibo/loader} The loader module for chaining.
     */
    LoaderPlugin.prototype.register = function (TaskDefinition, priority) {
        if (priority === void 0) { priority = 0; }
        this.assetManager.register(TaskDefinition, priority);
        return this;
    };
    /**
     * Performs simple load of a single file.
     * @method module:jibo/loader#load
     * @param {String} source The file to load.
     * @param {module:jibo/loader.AssetManager~completeCallback} complete The completed callback with a single
     *      parameters result object.
     * @param {Boolean} [cache=false] `true` to save to the asset cache after load.
     */
    /**
     * Loads a single file with options.
     * @method module:jibo/loader#load
     * @param {Object} asset The file resource to load.
     * @param {String} asset.src The file to load.
     * @param {Boolean} [asset.cache=false] `true` if the result should be cached for later.
     * @param {module:jibo/loader.AssetManager~completeCallback} [asset.complete=null] Callback when finished.
     * @param {module:jibo/loader.AssetManager~completeCallback} [complete] The completed callback with a single
     *      parameter which is a result object. Will
     *      only use if `asset.complete` is undefined.
     */
    /**
     * Loads a single custom asset with options.
     * @method module:jibo/loader#load
     * @param {Object} asset The single asset resource to load, properties
     *      will depend on the type of asset loading.
     * @param {module:jibo/loader.AssetManager~completeCallback} [asset.complete=null] Callback when finished.
     * @param {String} [asset.id=null] The ID to attach to this asset.
     * @param {Boolean} [asset.cache=false] `true` if the result should be cached for later.
     * @param {module:jibo/loader.AssetManager~completeCallback} [complete] The completed callback with a single
     *      parameters which is a result object. Will
     *      only use if `asset.complete` is undefined.
     */
    /**
     * Loads a map of multiple assets and return mapped result objects.
     * @method module:jibo/loader#load
     * @param {Object} assets Load a map of assets.
     * @param {module:jibo/loader.AssetManager~completeCallback|object} [options] Callback where the only parameter is the
     *      map of the results by ID, or the collection of load options.
     * @param {module:jibo/loader.AssetManager~completeCallback} [options.complete=null] The complete callback if using load options.
     * @param {module:jibo/loader.Task~completeCallback} [options.taskDone=null] The callback when a single item is finished.
     * @param {module:jibo/loader.AssetManager~progressCallback} [options.progress=null] Callback percentage updates.
     * @param {Boolean} [options.cacheAll=false] `true` if tasks should be cached.
     * @param {Boolean} [options.startAll=true] `true` if tasks should be run in parallel.
     */
    /**
     * Loads a list of multiple assets and return array of result objects.
     * @method module:jibo/loader#load
     * @param {Array} assets The list of assets.
     *      If each object has a `id` the result will be a mapped object.
     * @param {function|object} [options] Callback where the only parameter is the
     *      collection or map of the results, or the collection of load options.
     * @param {module:jibo/loader.AssetManager~completeCallback} [options.complete=null] The complete callback if using load options.
     * @param {module:jibo/loader.Task~completeCallback} [options.taskDone=null] The callback when a single item is finished.
     * @param {module:jibo/loader.AssetManager~progressCallback} [options.progress=null] Callback percentage updates.
     * @param {Boolean} [options.cacheAll=false] `true` if tasks should be cached.
     * @param {Boolean} [options.startAll=true] `true` if tasks should be run in parallel.
     */
    LoaderPlugin.prototype.load = function (source, complete, progress, cache, data) {
        var options;
        // If the load arguments are setup like the Loader.load call
        // then we'll convert to an object that we can use
        if (typeof source === "string") {
            source = {
                src: source,
                progress: progress || null,
                complete: complete || null,
                cache: !!cache,
                data: data || null
            };
        }
        else {
            // Presume complete is an options object
            options = complete;
            // Second argument is callback
            if (typeof complete === "function") {
                options = {
                    complete: complete
                };
            }
        }
        return this.assetManager.load(source, options);
    };
    Object.defineProperty(LoaderPlugin.prototype, "basePath", {
        get: function () {
            return this.assetManager.loader.basePath;
        },
        /**
         * Sets the base path to prepend to all loads.
         * @name module:jibo/loader#basePath
         * @type {String}
         */
        set: function (basePath) {
            this.assetManager.loader.basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Unloads an asset or list of assets.
     * @method module:jibo/loader#unload
     * @param {Array|String} assets The collection of asset ids or
     *      single asset id. As an array, it can be a manifest
     *      with objects that contain an ID, or an array of multiple strings.
     * @return {module:jibo/loader} The loader module for chaining.
     */
    LoaderPlugin.prototype.unload = function (assets) {
        if (typeof assets === "string") {
            assets = Array.prototype.slice.call(arguments);
        }
        for (var i = 0; i < assets.length; i++) {
            this.assetManager.cache.delete(assets[i]);
        }
        return this;
    };
    /**
     * Unloads all assets from the assets cache.
     * @method module:jibo/loader#unloadAll
     * @return {module:jibo/loader} The loader module for chaining.
     */
    LoaderPlugin.prototype.unloadAll = function () {
        this.assetManager.cache.empty();
        return this;
    };
    /**
     * Gets an asset from the cache by ID
     * @method module:jibo/loader#cached
     * @param {String} id The asset to fetch.
     * @return {*|null} The cached object or null if empty.
     */
    LoaderPlugin.prototype.cached = function (id) {
        return this.assetManager.cache.read(id);
    };
    return LoaderPlugin;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LoaderPlugin;

//# sourceMappingURL=../map/loader/LoaderPlugin.js.map
