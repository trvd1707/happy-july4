"use strict";
var LoaderError_1 = require('./LoaderError');
var path = require('path');
var fs = require('fs');
var FILETYPE;
(function (FILETYPE) {
    FILETYPE.IMAGE = 'image';
    FILETYPE.SOUND = 'sound';
    FILETYPE.VIDEO = 'video';
    FILETYPE.JSON = 'json';
    FILETYPE.XML = 'xml';
    FILETYPE.CSS = 'css';
    FILETYPE.JAVASCRIPT = 'js';
    FILETYPE.SVG = 'svg';
    FILETYPE.TEXT = 'text';
    FILETYPE.HTML = 'html';
})(FILETYPE || (FILETYPE = {}));
var MIMETYPE;
(function (MIMETYPE) {
    MIMETYPE.jpg = 'image/jpeg';
    MIMETYPE.jpeg = 'image/jpeg';
    MIMETYPE.gif = 'image/gif';
    MIMETYPE.png = 'image/png';
    MIMETYPE.bmp = 'image/bmp';
    MIMETYPE.webp = 'image/webp';
})(MIMETYPE || (MIMETYPE = {}));
/**
 * Loads all assets to a skill,
 * including images, data, code, and sounds. Loader supports cache-busting
 * in the browser using dynamic query string parameters.
 * @class Loader
 * @memberof module:jibo/loader
 */
var Loader = (function () {
    function Loader() {
        /**
         * Base to append to all file requests.
         * @type {String}
         * @name module:jibo/loader.Loader#basePath
         */
        this.basePath = '';
    }
    /**
     * Loads the asset file.
     * @method module:jibo/loader.Loader#load
     * @param {String} uri The file to load.
     * @param {Function} callback Callback when complete.
     */
    Loader.prototype.load = function (uri, callback) {
        var type = this.getFileType(uri);
        if (!path.isAbsolute(uri)) {
            uri = this.basePath + uri;
        }
        switch (type) {
            case FILETYPE.IMAGE:
                this.loadImage(uri, callback);
                break;
            case FILETYPE.SOUND:
                this.loadSound(uri, callback);
                break;
            case FILETYPE.JSON:
                this.loadJSON(uri, callback);
                break;
            case FILETYPE.JAVASCRIPT:
                this.loadJS(uri, callback);
                break;
            case FILETYPE.TEXT:
                this.baseLoad('text', uri, 'utf8', callback);
                break;
            case FILETYPE.CSS:
                this.loadStyle(uri, callback);
                break;
            case FILETYPE.XML:
                this.loadDOM(uri, 'application/xml', callback);
                break;
            case FILETYPE.SVG:
                this.loadDOM(uri, 'image/svg+xml', callback);
                break;
            case FILETYPE.HTML:
                this.loadDOM(uri, 'text/html', callback);
                break;
            case FILETYPE.VIDEO:
            default:
                this.baseLoad('binary', uri, null, callback);
                break;
        }
    };
    /**
     * Loads XML or SVG elements.
     * @method module:jibo/loader.Loader#loadDOM
     * @private
     * @param {String} uri The file to load.
     * @param {String} type The file type to parse DOM.
     * @param {Function} callback Callback when complete.
     */
    Loader.prototype.loadDOM = function (uri, type, callback) {
        var _this = this;
        this.baseLoad(type, uri, 'utf8', function (err, data) {
            try {
                var parser = new DOMParser();
                var object = parser.parseFromString(data, type);
                callback(null, object);
            }
            catch (e) {
                callback(_this.createError(e, uri));
            }
        });
    };
    /**
     * Loads CSS element and return HTMLStyleElement.
     * @method module:jibo/loader.Loader#loadStyle
     * @private
     * @param {String} uri The file to load.
     * @param {String} type The file type to parse DOM.
     * @param {Function} callback Callback when complete.
     */
    Loader.prototype.loadStyle = function (uri, callback) {
        this.baseLoad('CSS', uri, 'utf8', function (err, data) {
            var style = document.createElement('style');
            style.type = 'text/css';
            style.innerHTML = data;
            callback(null, style);
        });
    };
    /**
     * Loads an image file as an Image object.
     * @method module:jibo/loader.Loader#loadImage
     * @private
     * @param {String} uri The file to load.
     * @param {Function} callback Callback when complete.
     */
    Loader.prototype.loadImage = function (uri, callback) {
        var _this = this;
        this.baseLoad('image', uri, 'base64', function (err, data) {
            var mimeType = _this.getMimeType(uri);
            var result = new Image();
            result.src = "data:" + mimeType + ";base64," + data;
            callback(null, result);
        });
    };
    /**
     * Loads a sound file as Array buffer.
     * @method loadSound
     * @private
     * @param {String} uri The file to load.
     * @param {Function} callback Callback when complete.
     */
    Loader.prototype.loadSound = function (uri, callback) {
        this.baseLoad('sound', uri, null, function (err, data) {
            var result = new ArrayBuffer(data.length);
            var view = new Uint8Array(result);
            for (var i = 0; i < data.length; ++i) {
                view[i] = data[i];
            }
            callback(null, result);
        });
    };
    /**
     * Loads a JSON file.
     * @method module:jibo/loader.Loader#loadJSON
     * @private
     * @param {String} uri The file to load.
     * @param {Function} callback Callback when complete.
     */
    Loader.prototype.loadJSON = function (uri, callback) {
        var _this = this;
        this.baseLoad('JSON', uri, 'utf8', function (err, data) {
            try {
                data = JSON.parse(data);
            }
            catch (e) {
                return callback(_this.createError(e, uri, 'Failed to parse JSON'));
            }
            callback(null, data);
        });
    };
    /**
     * Loads a JavaScript file.
     * @method loadJS
     * @private
     * @param {String} uri The file to load.
     * @param {Function} callback Callback when complete.
     */
    Loader.prototype.loadJS = function (uri, callback) {
        try {
            var result = require(uri);
            callback(null, result);
        }
        catch (e) {
            callback(this.createError(e, uri, 'Unable to read JavaScript file'));
        }
    };
    /**
     * Gets a file type by uri.
     * @method module:jibo/loader.Loader#getFileType
     * @private
     * @param {String} uri The file uri.
     * @return {String} The filetype.
     */
    Loader.prototype.getFileType = function (uri) {
        var extension = path.extname(uri).toLowerCase();
        switch (extension) {
            case '.jpeg':
            case '.jpg':
            case '.gif':
            case '.png':
            case '.webp':
            case '.bmp':
                return FILETYPE.IMAGE;
            case '.ogg':
            case '.oga':
            case '.mp3':
            case '.m4a':
            case '.wav':
                return FILETYPE.SOUND;
            case '.mp4':
            case '.m4v':
            case '.ogv':
            case '.ogm':
            case '.webm':
                return FILETYPE.VIDEO;
            case '.json':
            case '.keys':
            case '.bt':
                return FILETYPE.JSON;
            case '.xml':
                return FILETYPE.XML;
            case '.css':
                return FILETYPE.CSS;
            case '.js':
                return FILETYPE.JAVASCRIPT;
            case '.svg':
                return FILETYPE.SVG;
            case '.html':
            case '.htm':
                return FILETYPE.HTML;
            default:
                return FILETYPE.TEXT;
        }
    };
    /**
     * Gets a mime type by uri.
     * @method module:jibo/loader.Loader#getMimeType
     * @private
     * @param {String} uri The file uri.
     * @return {String} The mime type.
     */
    Loader.prototype.getMimeType = function (uri) {
        var extension = path.extname(uri).toLowerCase();
        if (extension) {
            extension = extension.substr(1);
        }
        return MIMETYPE[extension] || null;
    };
    /**
     * Gets a mime type by uri.
     * @method module:jibo/loader.Loader#baseLoad
     * @private
     * @param {String} type The named type of file
     * @param {String} uri The file uri.
     * @param {String} encoding The readFile encoding type.
     * @param {Function} callback
     */
    Loader.prototype.baseLoad = function (type, uri, encoding, callback) {
        var _this = this;
        fs.readFile(uri, encoding, function (err, data) {
            if (err) {
                return callback(_this.createError(err, uri, "Unable to read " + type + " file"));
            }
            callback(null, data);
        });
    };
    /**
     * Creates new LoaderError.
     * @method module:jibo/loader.Loader#createError
     * @private
     * @param {Error} err The original error.
     * @param {String} uri The file URL to load.
     * @param {String} [message] The optional message.
     * @return {module:jibo/loader.LoaderError} The new error.
     */
    Loader.prototype.createError = function (err, uri, message) {
        return new LoaderError_1.default(typeof err === 'string' ? new Error(err) : err, uri, message);
    };
    return Loader;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Loader;

//# sourceMappingURL=../map/loader/Loader.js.map
