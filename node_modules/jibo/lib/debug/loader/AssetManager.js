"use strict";
var AssetCache_1 = require('./AssetCache');
var Task_1 = require('./tasks/Task');
var AssetLoad_1 = require('./AssetLoad');
var Loader_1 = require('./Loader');
/**
 * Gets the progress of the load.
 * @callback module:jibo/loader.AssetManager~progressCallback
 * @param {Number} progress The amount of tasks loaded from 0 to 1.
 */
/**
 * Executes when a load is complete.
 * @callback module:jibo/loader.AssetManager~completeCallback
 * @param {Error} error The error, if any, thrown by loading.
 * @param {*} result The result of load.
 */
/**
 * Handles the asynchronous loading of multiple assets.
 * @class AssetManager
 * @memberof module:jibo/loader
 */
var AssetManager = (function () {
    function AssetManager() {
        /**
         * The loader instance to load a file.
         * @type {module:jibo/loader.Loader}
         * @name module:jibo/loader.AssetManager#loader
         * @readOnly
         */
        this.loader = new Loader_1.default();
        /**
         * The collection of current multiloads.
         * @type {array<module:jibo/loader.AssetLoad>}
         * @name module:jibo/loader.AssetManager#loads
         * @private
         * @readOnly
         */
        this.loads = [];
        /**
         * The expired loads to reuse.
         * @type {array<module:jibo/loader.AssetLoad>}
         * @name module:jibo/loader.AssetManager#loadPool
         * @private
         * @readOnly
         */
        this.loadPool = [];
        /**
         * The collection of task definitions.
         * @type {array}
         * @name module:jibo/loader.AssetManager#taskDefs
         * @readOnly
         */
        this.taskDefs = [];
        /**
         * The cache of assets.
         * @type {module:jibo/loader.AssetCache}
         * @name module:jibo/loader.AssetManager#cache
         * @readOnly
         */
        this.cache = new AssetCache_1.default();
    }
    /**
     * Registers new tasks types. These tasks must extend Task.
     * @method module:jibo/loader.AssetManager#register
     * @private
     * @param {Function|String} TaskClass The class task reference.
     * @param {int} [priority=0] The priority. Higher priority tasks
     *      are tested first. More general tasks should be lower
     *      and more specific tasks should be higher.
     */
    AssetManager.prototype.register = function (TaskClass, priority) {
        if (priority === void 0) { priority = 0; }
        TaskClass.priority = priority;
        if (!(TaskClass.prototype instanceof Task_1.default)) {
            console.error("Registering task much extend Task", TaskClass);
        }
        else if (!TaskClass.test) {
            console.error("Registering task much have test method");
        }
        this.taskDefs.push(TaskClass);
        // Sort definitions by priority
        // where the higher priorities are first
        this.taskDefs.sort(function (a, b) {
            return b.priority - a.priority;
        });
    };
    /**
     * Loads a bunch of assets. Can only call one load at a time.
     * @method module:jibo/loader.AssetManager#load
     * @param {Object|Array} asset The assets to load.
     * @param {Object} [options] The loading options.
     * @param {module:jibo/loader.AssetManager~completeCallback} [options.complete] The callback when finished.
     * @param {module:jibo/loader.AssetManager~progressCallback} [options.progress] The callback when loading percentage is updated.
     * @param {module:jibo/loader.Task~completeCallback} [options.taskDone] The callback when finished with each individual task.
     * @param {Boolean} [options.autoStart=true] `true` to start running right away.
     * @param {Boolean} [options.startAll=true] `true` to run all the tasks at once, in parallel.
     * @param {Boolean} [options.cacheAll=false] `true` to cache all files.
     * @return {module:jibo/loader.AssetLoad} The reference to the current load.
     */
    AssetManager.prototype.load = function (assets, options) {
        // Apply defaults to options
        options = Object.assign({
            complete: null,
            progress: null,
            taskDone: null,
            cacheAll: false,
            startAll: true,
            autoStart: true,
        }, options);
        var load = this.getLoad();
        // Add to the stack of current loads
        this.loads.push(load);
        // Override the complete callback with a bind of the
        // original callback with the task
        options.complete = this._onLoaded.bind(this, options.complete, load);
        // Handle the finish
        load.once('complete', options.complete);
        // Called when a task is complete
        if (options.taskDone) {
            load.on('taskDone', options.taskDone);
        }
        // Start the load
        load.setup(assets, options);
        return load;
    };
    /**
     * Stashes the load for use later.
     * @method module:jibo/loader.AssetManager#poolLoad
     * @private
     * @param {module:jibo/loader.AssetLoad} load The load to recycle.
     */
    AssetManager.prototype.poolLoad = function (load) {
        load.reset();
        this.loadPool.push(load);
    };
    /**
     * Gets either a new AssetLoad or a recycled one.
     * @method module:jibo/loader.AssetManager#getLoad
     * @private
     * @return {AssetLoad} The load to use.
     */
    AssetManager.prototype.getLoad = function () {
        if (this.loadPool.length > 0) {
            return this.loadPool.pop();
        }
        return new AssetLoad_1.default(this);
    };
    /**
     * Handler when a load is finished.
     * @method module:jibo/loader.AssetManager#_onLoaded
     * @private
     * @param {module:jibo/loader.AssetManager~completeCallback} complete The function to call when done.
     * @param {AssetLoad} load The current load.
     * @param {*} The returned results.
     */
    AssetManager.prototype._onLoaded = function (complete, load, err, results) {
        var index = this.loads.indexOf(load);
        if (index > -1) {
            this.loads.splice(index, 1);
        }
        if (complete) {
            complete(err, results);
        }
        this.poolLoad(load);
    };
    /**
     * Destroys the AssetManager.
     * @method module:jibo/loader.AssetManager#destroy
     */
    AssetManager.prototype.destroy = function () {
        this.loader = null;
        this.cache.destroy();
        this.cache = null;
        this.loadPool = null;
        this.loads = null;
        this.taskDefs = null;
    };
    return AssetManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AssetManager;

//# sourceMappingURL=../map/loader/AssetManager.js.map
