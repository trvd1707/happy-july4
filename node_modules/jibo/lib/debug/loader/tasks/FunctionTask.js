"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Task_1 = require('./Task');
/**
 * Internal class for dealing with async function calls with AssetManager.
 * ```
 * jibo.loader.load({
 *    async: (done) => {
 *        done();
 *    },
 * }, (err) => {});
 * ```
 * @class FunctionTask
 * @extends module:jibo/loader.Task
 * @memberof module:jibo/loader
 * @constructor
 * @param {module:jibo/loader.AssetManager} manager Instance of AssetManager.
 * @param {Object} asset The data properties.
 * @param {Boolean} [asset.cache=false] `true` to cache the result.
 * @param {Function} asset.async The required function to call.
 * @param {Function} [asset.complete] The function to call when done.
 * @param {String} [asset.id] The task id for mapping the result, if any.
 */
var FunctionTask = (function (_super) {
    __extends(FunctionTask, _super);
    function FunctionTask(manager, asset) {
        _super.call(this, manager, asset);
        /**
         * The asynchronous call.
         * @type {Function}
         * @name module:jibo/loader.FunctionTask#async
         */
        this.async = asset.async;
    }
    /**
     * Tests if the task should be run.
     * @method module:jibo/loader.FunctionTask.test
     * @static
     * @param {Object} asset The asset to check.
     * @return {Boolean} `true` if the asset is compatible with this task.
     */
    FunctionTask.test = function (asset) {
        return !!asset.async;
    };
    /**
     * Starts the task.
     * @method module:jibo/loader.FunctionTask#start
     * @param {module:jibo/loader.Task~completeCallback} callback Callback when done.
     */
    FunctionTask.prototype.start = function (callback) {
        this.async(callback);
    };
    /**
     * Destroys this and discards.
     * @method module:jibo/loader.FunctionTask#destroy
     */
    FunctionTask.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.async = null;
    };
    return FunctionTask;
}(Task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = FunctionTask;

//# sourceMappingURL=../../map/loader/tasks/FunctionTask.js.map
