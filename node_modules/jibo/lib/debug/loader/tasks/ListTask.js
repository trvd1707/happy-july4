"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Task_1 = require('./Task');
var AssetUtils_1 = require('../AssetUtils');
/**
 * Internal class for grouping a list of tasks into one task.
 * ```
 * jibo.loader.load({
 *    assets: [
 *        { src: "data.json" },
 *        "image.png"
 *    ]
 * }, (err, results) => {});
 * ```
 * @class ListTask
 * @extends module:jibo/loader.Task
 * @constructor
 * @memberof module:jibo/loader
 * @param {module:jibo/loader.AssetManager} manager Instance of AssetManager.
 * @param {Object} asset The data properties.
 * @param {Array|Object} asset.assets The collection of assets to load.
 * @param {Boolean} [asset.cacheAll=false] `true` to cache each item in assets.
 * @param {Boolean} [asset.cache=false] `true` to cache the result.
 * @param {String} [asset.id] ID of asset.
 * @param {Function} [asset.complete=null] The event to call when done.
 * @param {Function} [asset.progress=null] The event to call when progress is updated.
 */
var ListTask = (function (_super) {
    __extends(ListTask, _super);
    function ListTask(manager, asset) {
        _super.call(this, manager, asset);
        /**
         * The collection of assets to load.
         * @type {Array|Object}
         * @name module:jibo/loader.ListTask#assets
         */
        this.assets = asset.assets;
        /**
         * `true` if each asset in the collection should be cached.
         * @type {Boolean}
         * @name module:jibo/loader.ListTask#cacheAll
         */
        this.cacheAll = asset.cacheAll;
        /**
         * Callback when progress is updated.
         * @type {Function}
         * @name module:jibo/loader.ListTask#progress
         */
        this.progress = asset.progress;
    }
    /**
     * Tests if this task should be run.
     * @method module:jibo/loader.ListTask.test
     * @static
     * @param {Object} asset The asset to check.
     * @return {Boolean} `true` if the asset is compatible with this asset.
     */
    ListTask.test = function (asset) {
        return !!asset.assets && (Array.isArray(asset.assets) || AssetUtils_1.default.isPlain(asset.assets));
    };
    /**
     * Starts the task.
     * @method  module:jibo/loader.ListTask#start
     * @param  {module:jibo/loader.Task~completeCallback} callback Callback when finished.
     */
    ListTask.prototype.start = function (callback) {
        this.load(this.assets, {
            complete: callback,
            progress: this.progress,
            cacheAll: this.cacheAll
        });
    };
    /**
     * Destroys this and discards.
     * @method module:jibo/loader.ListTask#destroy
     */
    ListTask.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.assets = null;
    };
    return ListTask;
}(Task_1.default));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ListTask;

//# sourceMappingURL=../../map/loader/tasks/ListTask.js.map
