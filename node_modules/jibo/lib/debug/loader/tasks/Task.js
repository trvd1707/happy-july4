"use strict";
/**
 * Executes when the task starts.
 * @callback module:jibo/loader.Task~startCallback
 * @param {Error} error The error thrown by task.
 * @param {*} result The final result of task loading.
 */
/**
 * Executes when the task is complete.
 * @callback module:jibo/loader.Task~completeCallback
 * @param {Error} error The error, if any, thrown by loading.
 * @param {*} result The result of load.
 * @param {Object} originalAsset The original asset object.
 * @param {Array} additionalAsset An Array to add additional assets.
 */
/**
 * Single asynchronous task.
 * @class Task
 * @memberof module:jibo/loader
 * @constructor
 * @param {module:jibo/loader.AssetManager} manager Reference to the AssetManager instance.
 * @param {Object} asset The asset data.
 * @param {String} [asset.id=null] The task ID.
 * @param {Boolean} [asset.cache=false] `true` to cache the result.
 * @param {module:jibo/loader.Task~completeCallback} [asset.complete=null] Call when complete.
 * @param {String} [fallbackId] The ID to set if no ID is explicitly set.
 *      This can be used for caching something that has no id.
 */
var Task = (function () {
    /**
     * Internal class for dealing with async load assets.
     */
    function Task(manager, asset, fallbackId) {
        this.manager = manager;
        /**
         * The current status of the task.
         * @property {int} status 0 = waiting, 1 = running, 2 = finished.
         * @name module:jibo/loader.Task#status
         * @default 0
         */
        this.status = Task.WAITING;
        /**
         * The user call to fire when completed. Returns the arguments
         * result, originalAsset, and additionalAsset.
         * @type {module:jibo/loader.Task~completeCallback}
         * @name module:jibo/loader.Task#complete
         * @default null
         * @readOnly
         */
        this.complete = asset.complete || null;
        /**
         * `true` to cache the load and use later.
         * @type {Boolean}
         * @name module:jibo/loader.Task#cache
         * @default false
         * @readOnly
         */
        this.cache = !!asset.cache;
        /**
         * The task id.
         * @type {String}
         * @name module:jibo/loader.Task#id
         */
        this.id = asset.id || null;
        /**
         * Reference to the original asset data.
         * @type {Object}
         * @name module:jibo/loader.Task#original
         * @readOnly
         */
        this.original = asset;
        // We're trying to cache but we don't have an ID
        if (this.cache && !this.id) {
            if (fallbackId && typeof fallbackId === "string") {
                // Remove the file extension
                var extIndex = fallbackId.lastIndexOf('.');
                if (extIndex > -1) {
                    fallbackId = fallbackId.substr(0, extIndex);
                }
                // Check for the last folder slash then remove it
                var slashIndex = fallbackId.lastIndexOf('/');
                if (slashIndex > -1) {
                    fallbackId = fallbackId.substr(slashIndex + 1);
                }
                // Update the id
                asset.id = this.id = fallbackId;
            }
            // Check for ID if we're caching
            if (!this.id) {
                console.error("Caching an asset requires an id, none set", asset);
                this.cache = false;
            }
        }
    }
    /**
     * Starts the task.
     * @method  module:jibo/loader.Task#start
     * @param  {module:jibo/loader.Task~startCallback} callback Callback when finished.
     */
    Task.prototype.start = function (callback) {
        // callback must be: callback(err, result);
    };
    /**
     * Pass-through to the application load method.
     * @method module:jibo/loader.Task#load
     * @protected
     * @param {String|Array|Object} source The source to load.
     * @param {Object|Function} [options] The load options or callback function.
     */
    Task.prototype.load = function (source, options) {
        if (typeof options === "function") {
            options = { complete: options };
        }
        return this.manager.load(source, options);
    };
    /**
     * Pass-through to the application Loader.load.
     * @method module:jibo/loader.Task#simpleLoad
     * @protected
     * @param {String} url Path to file to load.
     * @param {Function} complete The callback.
     * @param {Function} [progress] The load progress.
     * @param {Object} [data] Additional data.
     */
    Task.prototype.simpleLoad = function (url, complete) {
        return this.manager.loader.load(url, complete);
    };
    /**
     * Destroys this and discards.
     * @method module:jibo/loader.Task#destroy
     */
    Task.prototype.destroy = function () {
        this.manager = null;
        this.status = Task.FINISHED;
        this.id = null;
        this.complete = null;
        this.original = null;
    };
    /**
     * Status for when task is waiting to be run.
     * @name module:jibo/loader.Task.WAITING
     * @type {int}
     * @static
     * @readOnly
     * @final
     * @default 0
     */
    Task.WAITING = 0;
    /**
     * Status for when task is currently being run.
     * @name module:jibo/loader.Task.RUNNING
     * @type {int}
     * @static
     * @readOnly
     * @final
     * @default 1
     */
    Task.RUNNING = 1;
    /**
     * Status for when task is finished.
     * @name module:jibo/loader.Task.FINISHED
     * @type {int}
     * @static
     * @readOnly
     * @final
     * @default 2
     */
    Task.FINISHED = 2;
    return Task;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Task;

//# sourceMappingURL=../../map/loader/tasks/Task.js.map
