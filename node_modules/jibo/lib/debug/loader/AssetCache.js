"use strict";
var AssetUtils_1 = require('./AssetUtils');
/**
 * Manages a cache for assets.
 * @class AssetCache
 * @memberof module:jibo/loader
 */
var AssetCache = (function () {
    function AssetCache() {
        /**
         * The cache containing assets.
         * @type {Object}
         * @name module:jibo/loader.AssetCache#_cache
         * @private
         */
        this._cache = {};
    }
    /**
     * Retrieves a single asset from the cache.
     * @method module:jibo/loader.AssetCache#read
     * @param {String} id The asset to get.
     */
    AssetCache.prototype.read = function (id) {
        return this._cache[id] || null;
    };
    /**
     * Adds a single asset to the cache.
     * @method module:jibo/loader.AssetCache#write
     * @param {String} id The id to save the asset as.
     * @param {*} content The asset content to save.
     */
    AssetCache.prototype.write = function (id, content) {
        if (this._cache[id]) {
            console.warn("AssetCache: overwriting existing asset: '" + id + "'");
            // Remove it first
            this.delete(id);
        }
        this._cache[id] = content;
    };
    /**
     * Removes a single asset from the cache.
     * @method module:jibo/loader.AssetCache#delete
     * @param {Object|String} asset The asset to remove.
     */
    AssetCache.prototype.delete = function (asset) {
        var id = typeof asset === "string" ? asset : asset.id;
        // If we don't have an ID, stop
        if (!id) {
            return;
        }
        var result = this._cache[id];
        if (result) {
            // Destroy mapped result
            if (AssetUtils_1.default.isPlain(result)) {
                for (var key in result) {
                    this.destroyResult(result[key]);
                }
            }
            else if (Array.isArray(result)) {
                result.forEach(this.destroyResult);
            }
            else {
                this.destroyResult(result);
            }
            delete this._cache[id];
        }
    };
    /**
     * Destroys a result object.
     * @method module:jibo/loader.AssetCache#destroyResult
     * @private
     * @param  {*} result The object to destroy.
     */
    AssetCache.prototype.destroyResult = function (result) {
        // Ignore null results or empty objects
        if (!result) {
            return;
        }
        // Destroy any objects with a destroy function
        if (result.destroy) {
            result.destroy();
        }
        // Clear images if we have an HTML node
        if (result.tagName === "IMG") {
            result.src = "";
        }
    };
    /**
     * Removes all assets from the cache.
     * @method module:jibo/loader.AssetCache#empty
     */
    AssetCache.prototype.empty = function () {
        for (var id in this._cache) {
            this.delete(id);
        }
    };
    /**
     * Destroys the cache. Don't use after this.
     * @method module:jibo/loader.AssetCache#destroy
     */
    AssetCache.prototype.destroy = function () {
        this.empty();
        this._cache = null;
    };
    return AssetCache;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AssetCache;

//# sourceMappingURL=../map/loader/AssetCache.js.map
