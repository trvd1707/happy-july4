{"version":3,"sources":["ifr-visualizer/MouseCoordinateWrangler.js"],"names":[],"mappings":"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","file":"ifr-visualizer/MouseCoordinateWrangler.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\nvar THREE = require(\"three\");\nvar slog = require(\"../ifr-core/SLog\");\n\nvar channel = \"MOUSE_COORD_WRANGLER\";\n\nvar MouseCoordinateWrangler = {};\n\n/**\n * Get the offset rect of an element on the page. Rect will be relative to page top left, scroll-invariant\n * @param {Element} elem\n * @returns {{top: number, left: number, width: number, height: number}} rect of elem on entire page in pixels, from top-left, scroll-invariant\n */\nMouseCoordinateWrangler.getOffsetRect = function (elem) {\n\tvar box = elem.getBoundingClientRect();\n\tvar body = document.body;\n\tvar docElem = document.documentElement;\n\n\tvar scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\n\tvar scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\n\n\tvar clientTop = docElem.clientTop || body.clientTop || 0;\n\tvar clientLeft = docElem.clientLeft || body.clientLeft || 0;\n\n\tvar top  = box.top +  scrollTop - clientTop;\n\tvar left = box.left + scrollLeft - clientLeft;\n\treturn { top: Math.round(top), left: Math.round(left), width: Math.round(box.width), height:Math.round(box.height)};\n};\n\n/**\n *\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @param {THREE.Camera} camera\n * @returns {{x:number, y:number}} ndc 2D (-1 to 1) location for this 3d location\n */\nMouseCoordinateWrangler.projectToScreenNDC = function(x,y,z,camera){\n\tvar projected = new THREE.Vector3(x,y,z).project(camera);\n\treturn {x:projected.x, y:projected.y};\n};\n\n/**\n *\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @param {THREE.Camera} camera\n * @param {Element} container\n * @param {boolean} [dropOutOfBounds] = false\n * @returns {?{x:number, y:number}} pixel location for this 3d location\n */\nMouseCoordinateWrangler.projectToScreenPixels = function(x,y,z,camera,container,dropOutOfBounds){\n\tvar projected = new THREE.Vector3(x,y,z).project(camera);\n\tif(projected.z < 0 || projected.z > 1){ //behind camera or past far plane\n\t\t//console.log(\"Clipping:\"+projected.z);\n\t\treturn null;\n\t}\n\tif(dropOutOfBounds===true && (Math.abs(projected.x) > 1 || Math.abs(projected.y) > 1)){\n\t\treturn null;\n\t}\n\tvar rect = container.getBoundingClientRect();\n\tvar width = rect.width;\n\tvar height = rect.height;\n\treturn {x:projected.x * width/2 + width/2, y:-projected.y * height/2 + height/2};\n};\n\n/**\n *\n * @param {UIEvent} event\n * @param {Element} element\n * @returns {{x: number, y: number}} pixel location of the event relative to the top left of the element\n */\nMouseCoordinateWrangler.getLocalCoordinates = function(event, element){\n\tvar bounds = MouseCoordinateWrangler.getOffsetRect(element);\n\treturn { x: event.pageX - bounds.left, y: event.pageY - bounds.top};\n};\n\n/**\n *\n * @param {UIEvent} event\n * @param {Element} element\n * @returns {{x: number, y: number}} NDC location of the event relative to the bottom left of the element (0-1 from bottom left)\n */\nMouseCoordinateWrangler.getLocalCoordinatesNDC = function(event, element){\n\tvar bounds = MouseCoordinateWrangler.getOffsetRect(element);\n\treturn { x: (event.pageX - bounds.left)/bounds.width, y: 1 - (event.pageY - bounds.top)/bounds.height};\n};\n\n/**\n *\n * @param {UIEvent} event\n * @param {Element} element\n * @returns {{x: number, y: number}} NDC location of the event relative to the center of the element (-1 to 1, cartesian)\n */\nMouseCoordinateWrangler.getLocalCoordinatesNDCCentered = function(event, element){\n\tvar bounds = MouseCoordinateWrangler.getOffsetRect(element);\n\treturn { x: ((event.pageX - bounds.left)/bounds.width) * 2 - 1, y: (1 - (event.pageY - bounds.top)/bounds.height) * 2 - 1};\n};\n\n/**\n *\n * @param {number} ndcCenteredScreenX - screen location x in centered NDC (-1 to 1)\n * @param {number} ndcCenteredScreenY - screen location y in centered NDC (-1 to 1)\n * @param {THREE.PerspectiveCamera} camera - camera that is projecting this scene\n * @param {THREE.Vector3} pointOnPlane - any point on the target plane, (0,0,0) will be used if omitted\n * @param {THREE.Vector3} planeNormal - normal of the target plane, (0,1,0) will be used if omitted\n * @returns {THREE.Vector3} the point where the screen point intersects the given plane, or undefined if it doesn't intersect\n */\nMouseCoordinateWrangler.unprojectScreenToPlane = function(ndcCenteredScreenX, ndcCenteredScreenY, camera, pointOnPlane, planeNormal){\n\n\tvar screenVecNear = new THREE.Vector3(ndcCenteredScreenX,  ndcCenteredScreenY, 0);\n\tvar screenVecFar = new THREE.Vector3(ndcCenteredScreenX,  ndcCenteredScreenY, 1);\n\tscreenVecNear.unproject(camera);\n\tscreenVecFar.unproject(camera);\n\n\tvar lineDirection = screenVecFar.sub(screenVecNear);\n\tvar lineAnchor = screenVecNear;\n\n\tlineDirection.normalize();\n\tvar lineAnchorToPlaneAnchor = new THREE.Vector3().copy(pointOnPlane).sub(lineAnchor);\n\tvar denominator = lineDirection.dot(planeNormal);\n\tif(Math.abs(denominator) < 0.0001){\n\t\tslog(channel, \"un-project error, no intersection\");\n\t\treturn undefined;\n\t}else{\n\t\tvar dist = lineAnchorToPlaneAnchor.dot(planeNormal) / lineDirection.dot(planeNormal);\n\t\tif(dist < 0){\n\t\t\tslog(channel, \"error, intersection behind camera\");\n\t\t\treturn undefined;\n\t\t}else{\n\t\t\treturn lineAnchor.add(lineDirection.multiplyScalar(dist));\n\t\t}\n\t}\n};\n\n/**\n *\n * @param {UIEvent} event - event to project the location of\n * @param {Element} element - the gl element\n * @param {THREE.PerspectiveCamera} camera - camera that is projecting this scene\n * @param {THREE.Vector3} pointOnPlane - any point on the target plane, (0,0,0) will be used if omitted\n * @param {THREE.Vector3} planeNormal - normal of the target plane, (0,1,0) will be used if omitted\n * @returns {THREE.Vector3} the point where the screen point intersects the given plane, or undefined if it doesn't intersect\n */\nMouseCoordinateWrangler.unprojectEventToPlane = function(event, element, camera, pointOnPlane, planeNormal){\n\tvar local = MouseCoordinateWrangler.getLocalCoordinatesNDCCentered(event, element);\n\tif(pointOnPlane === undefined){\n\t\tpointOnPlane = new THREE.Vector3(0,0,0);\n\t}\n\tif(planeNormal === undefined){\n\t\tplaneNormal = new THREE.Vector3(0,1,0);\n\t}\n\treturn MouseCoordinateWrangler.unprojectScreenToPlane(local.x, local.y, camera, pointOnPlane, planeNormal);\n};\n\nmodule.exports = MouseCoordinateWrangler;\n"],"sourceRoot":"/source/"}