{"version":3,"sources":["ifr-geometry/loaders/SkeletonLoader.js"],"names":[],"mappings":";;;;;AAKA;;AAEA,IAAI,aAAa,QAAQ,eAAR,CAAb;AACJ,IAAI,YAAY,QAAQ,0BAAR,CAAZ;AACJ,IAAI,QAAQ,QAAQ,OAAR,CAAR;;;;;AAKJ,IAAI,qBAAqB,SAArB,kBAAqB,GACzB;;AAEC,MAAK,GAAL,GAAW,IAAX;;AAFD,KAIC,CAAK,OAAL,GAAe,KAAf;;AAJD,KAMC,CAAK,OAAL,GAAe,EAAf;;;AAND,KASC,CAAK,YAAL,GAAoB,IAApB,CATD;CADyB;;;;;AAgBzB,IAAI,iBAAiB,SAAjB,cAAiB,GACrB;;AAEC,MAAK,OAAL,GAAe,IAAf,CAFD;CADqB;;;;;AASrB,eAAe,SAAf,CAAyB,SAAzB,GAAqC,YACrC;AACC,QAAO,KAAK,OAAL,CADR;CADqC;;;;;;AASrC,eAAe,SAAf,CAAyB,IAAzB,GAAgC,UAAS,GAAT,EAAc,QAAd,EAChC;AACC,KAAI,OAAO,IAAP,CADL;AAEC,WAAU,QAAV,CAAmB,GAAnB,EAAwB,UAAS,KAAT,EAAgB,IAAhB,EACxB;AACC,MAAI,UAAU,IAAV,EACJ;AACC,QAAK,SAAL,CAAe,IAAf,EAAqB,GAArB,EADD;AAEC,OAAI,QAAJ,EACA;AACC,eADD;IADA;GAHD,MASA;AACC,OAAI,SAAS,IAAI,kBAAJ,EAAT,CADL;AAEC,UAAO,GAAP,GAAa,GAAb,CAFD;AAGC,UAAO,OAAP,GAAiB,KAAjB,CAHD;AAIC,UAAO,OAAP,GAAiB,KAAjB,CAJD;AAKC,QAAK,OAAL,GAAe,MAAf,CALD;AAMC,OAAI,QAAJ,EACA;AACC,eADD;IADA;GAfD;EAFuB,CAAxB,CAFD;CADgC;;;;;;AAgChC,eAAe,SAAf,CAAyB,SAAzB,GAAqC,UAAS,QAAT,EAAmB,OAAnB,EACrC;AACC,MAAK,OAAL,GAAe,IAAI,kBAAJ,EAAf,CADD;AAEC,MAAK,OAAL,CAAa,GAAb,GAAmB,OAAnB,CAFD;;AAIC,KAAI,SAAS,MAAT,CAAgB,QAAhB,KAA6B,UAA7B,EACJ;AACC,OAAK,OAAL,CAAa,OAAb,GAAuB,KAAvB,CADD;AAEC,OAAK,OAAL,CAAa,OAAb,GAAuB,yCAAuC,SAAS,MAAT,CAAgB,QAAhB,CAF/D;AAGC,SAHD;EADA;;AAOA,MAAK,OAAL,CAAa,YAAb,GAA4B,KAAK,cAAL,CAAoB,SAAS,OAAT,CAAhD,CAXD;AAYC,MAAK,OAAL,CAAa,OAAb,GAAuB,IAAvB,CAZD;CADqC;;;;;;AAoBrC,eAAe,SAAf,CAAyB,cAAzB,GAA0C,UAAS,QAAT,EAC1C;AACC,KAAI,MAAM,IAAI,MAAM,QAAN,EAAV,CADL;AAEC,KAAI,QAAQ,IAAI,UAAJ,GAAiB,WAAjB,CAA6B,QAA7B,CAAR,CAFL;AAGC,KAAI,IAAJ,GAAW,MAAM,IAAN,CAHZ;AAIC,KAAI,QAAJ,CAAa,IAAb,CAAkB,MAAM,QAAN,CAAlB,CAJD;AAKC,KAAI,UAAJ,CAAe,IAAf,CAAoB,MAAM,WAAN,CAApB,CALD;;AAOC,KAAI,SAAS,QAAT,EACJ;AACC,OAAK,IAAI,IAAE,CAAF,EAAK,IAAE,SAAS,QAAT,CAAkB,MAAlB,EAA0B,GAA1C,EACA;AACC,OAAI,GAAJ,CAAQ,KAAK,cAAL,CAAoB,SAAS,QAAT,CAAkB,CAAlB,CAApB,CAAR,EADD;GADA;EAFD;;AAQA,QAAO,GAAP,CAfD;CAD0C;;AAmB1C,OAAO,OAAP,GAAiB,cAAjB","file":"ifr-geometry/loaders/SkeletonLoader.js","sourcesContent":["/**\n * @author mattb\n * Copyright 2014 IF Robots LLC\n */\n\n\"use strict\";\n\nvar BasicFrame = require(\"../BasicFrame\");\nvar FileTools = require(\"../../ifr-core/FileTools\");\nvar THREE = require(\"three\");\n\n/**\n * @constructor\n */\nvar SkeletonLoadResult = function()\n{\n\t/** @type {string} */\n\tthis.url = null;\n\t/** @type {!boolean} */\n\tthis.success = false;\n\t/** @type {string} */\n\tthis.message = \"\";\n\n\t/** @type {THREE.Object3D} */\n\tthis.skeletonRoot = null;\n};\n\n/**\n * @constructor\n */\nvar SkeletonLoader = function()\n{\n\t/** @type {SkeletonLoadResult} */\n\tthis._result = null;\n};\n\n/**\n * @return {SkeletonLoadResult}\n */\nSkeletonLoader.prototype.getResult = function()\n{\n\treturn this._result;\n};\n\n/**\n * @param {string} url\n * @param callback\n */\nSkeletonLoader.prototype.load = function(url, callback)\n{\n\tvar self = this;\n\tFileTools.loadJSON(url, function(error, data)\n\t{\n\t\tif (error === null)\n\t\t{\n\t\t\tself.parseData(data, url);\n\t\t\tif (callback)\n\t\t\t{\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar result = new SkeletonLoadResult();\n\t\t\tresult.url = url;\n\t\t\tresult.success = false;\n\t\t\tresult.message = error;\n\t\t\tself._result = result;\n\t\t\tif (callback)\n\t\t\t{\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t});\n};\n\n/**\n * @param {Object} jsonData\n * @param {string} dataUrl\n */\nSkeletonLoader.prototype.parseData = function(jsonData, dataUrl)\n{\n\tthis._result = new SkeletonLoadResult();\n\tthis._result.url = dataUrl;\n\n\tif (jsonData.header.fileType !== \"Skeleton\")\n\t{\n\t\tthis._result.success = false;\n\t\tthis._result.message = \"don't know how to handle file type: \"+jsonData.header.fileType;\n\t\treturn;\n\t}\n\n\tthis._result.skeletonRoot = this._parseSkeleton(jsonData.content);\n\tthis._result.success = true;\n};\n\n/**\n * @param {Object} jsonData\n * @return {THREE.Object3D}\n */\nSkeletonLoader.prototype._parseSkeleton = function(jsonData)\n{\n\tvar obj = new THREE.Object3D();\n\tvar frame = new BasicFrame().setFromJson(jsonData);\n\tobj.name = frame.name;\n\tobj.position.copy(frame.position);\n\tobj.quaternion.copy(frame.orientation);\n\n\tif (jsonData.children)\n\t{\n\t\tfor (var i=0; i<jsonData.children.length; i++)\n\t\t{\n\t\t\tobj.add(this._parseSkeleton(jsonData.children[i]));\n\t\t}\n\t}\n\n\treturn obj;\n};\n\nmodule.exports = SkeletonLoader;"],"sourceRoot":"/source/"}