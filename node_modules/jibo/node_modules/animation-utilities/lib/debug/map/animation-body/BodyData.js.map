{"version":3,"sources":["animation-body/BodyData.js"],"names":[],"mappings":"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","file":"animation-body/BodyData.js","sourcesContent":["/**\n * @author mattb\n */\n\n\"use strict\";\n\n\nvar Time = require(\"../ifr-core/Time\");\nvar slog = require(\"../ifr-core/SLog\");\n\n\nvar AxisCommandMode = {\n\tNONE: 0,\n\tLIMP: 1,\n\tBRAKE: 2,\n\tPWM: 3,\n\tVELOCITY: 4,\n\tTRAJECTORY: 5,\n\tTORQUE: 6,\n\tPOS_VEL: 7\n};\n\n/**\n * @constructor\n */\nvar SingleAxisState = function()\n{\n\t/**\n\t * chronometer timestamp\n\t * @type {number[]} */\n\tthis.ts = null;\n\t/**\n\t * absolute (indexed) position in radians, undefined until indexed\n\t * @type {number} */\n\tthis.pos = null;\n\t/**\n\t * encoder position in radians, arbitrary zero based on power-up position\n\t * @type {number} */\n\tthis.inc_pos = null;\n\t/**\n\t * velocity in radians/second\n\t * @type {number} */\n\tthis.vel = null;\n\t/**\n\t * current in amperes\n\t * @type {number} */\n\tthis.cur = null;\n\t/**\n\t * PWM value in % max PWM\n\t * @type {number} */\n\tthis.pwm = null;\n\t/**\n\t * low-level flags for motor and driver status (integer)\n\t * @type {number} */\n\tthis.status = null;\n\t/**\n\t * velocity limit in radians/second\n\t * @type {number} */\n\tthis.vel_limit = null;\n\t/**\n\t * acceleration limit in radians/second^2\n\t * @type {number} */\n\tthis.acc_limit = null;\n\t/**\n\t * current limit in amperes\n\t * @type {number} */\n\tthis.cur_limit = null;\n\t/**\n\t * command mode of the axis {none=0, limp=1, brake=2, pwm=3, vel=4, traj=5, trq=6}\n\t * @type {number} */\n\tthis.mode = null;\n\t/**\n\t * reference value of trajectory generator (depends on command)\n\t * @type {number} */\n\tthis.ref = null;\n\t/**\n\t * reference position (may not be reported for all modes)\n\t * @type {number} */\n\tthis.ref_pos = null;\n\t/**\n\t * reference acc (may not be reported for all modes)\n\t * @type {number} */\n\tthis.ref_acc = null;\n\t/**\n\t * hardware-level tick counter (milliseconds)\n\t * @type {number} */\n\tthis.ticks = null;\n\t/**\n\t * value of the integral term of the PID loop\n\t * @type {number} */\n\tthis.integrator = null;\n\t/**\n\t * Low level motor fault flags (int)\n\t * @type {number} */\n\tthis.fault_status = null;\n};\n\n/**\n * @return {Time} - chronometer timestamp as a Time instance\n */\nSingleAxisState.prototype.getTimestamp = function()\n{\n\tif (this.ts === null)\n\t{\n\t\treturn null;\n\t}\n\telse\n\t{\n\t\treturn Time.createFromTimestamp(this.ts);\n\t}\n};\n\n/**\n * @return {boolean} - true if axis is indexed (0th bit of status)\n */\nSingleAxisState.prototype.isIndexed = function()\n{\n\tif (this.status === null)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\t/*jshint bitwise:false*/\n\t\treturn (this.status & 0x01) > 0;\n\t\t/*jshint bitwise:true*/\n\t}\n};\n\n/**\n * @param {Object} jsonData\n * @return {SingleAxisState}\n */\nSingleAxisState.prototype.setFromJson = function(jsonData)\n{\n\tvar keys = Object.keys(jsonData);\n\tfor (var i=0; i<keys.length; i++)\n\t{\n\t\tif (this.hasOwnProperty(keys[i]))\n\t\t{\n\t\t\tthis[keys[i]] = jsonData[keys[i]];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tslog.info(\"SingleAxisState: unknown JSON property name: \"+keys[i]);\n\t\t}\n\t}\n\treturn this;\n};\n\n/**\n * @constructor\n */\nvar AxisState = function()\n{\n\t/**\n\t * overall update chronometer timestamp\n\t * @type {number[]} */\n\tthis.ts = null;\n\t/** @type {SingleAxisState} */\n\tthis.pelvis = null;\n\t/** @type {SingleAxisState} */\n\tthis.torso = null;\n\t/** @type {SingleAxisState} */\n\tthis.neck = null;\n};\n\n/**\n * @return {Time} - overall update chronometer timestamp as a Time instance\n */\nAxisState.prototype.getTimestamp = function()\n{\n\tif (this.ts === null)\n\t{\n\t\treturn null;\n\t}\n\telse\n\t{\n\t\treturn Time.createFromTimestamp(this.ts);\n\t}\n};\n\n/**\n * @param {Object} jsonData\n * @return {AxisState}\n */\nAxisState.prototype.setFromJson = function(jsonData)\n{\n\tthis.ts = jsonData.ts;\n\tthis.pelvis = new SingleAxisState().setFromJson(jsonData.pelvis);\n\tthis.torso = new SingleAxisState().setFromJson(jsonData.torso);\n\tthis.neck = new SingleAxisState().setFromJson(jsonData.neck);\n\treturn this;\n};\n\n/**\n * @constructor\n */\nvar SingleAxisCommand = function()\n{\n\t/**\n\t * command mode {none=0, limp=1, brake=2, pwm=3, vel=4, traj=5, trq=6}\n\t * @type {number} */\n\tthis.mode = null;\n\t/**\n\t * command target, as defined by the mode\n\t * @type {number[]} */\n\tthis.value = null;\n\t/**\n\t * velocity limit in radians/second\n\t * @type {number} */\n\tthis.vel_limit = null;\n\t/**\n\t * acceleration limit in radians/second^2\n\t * @type {number} */\n\tthis.acc_limit = null;\n\t/**\n\t * current limit in amperes\n\t * @type {number} */\n\tthis.cur_limit = null;\n};\n\n/**\n * @constructor\n */\nvar AxisCommand = function()\n{\n\t/**\n\t * chronometer timestamp\n\t * @type {number[]} */\n\tthis.ts = null;\n\t/** @type {SingleAxisCommand} */\n\tthis.pelvis = null;\n\t/** @type {SingleAxisCommand} */\n\tthis.torso = null;\n\t/** @type {SingleAxisCommand} */\n\tthis.neck = null;\n};\n\n/**\n * @param {Time} timestamp\n */\nAxisCommand.prototype.setTimestamp = function(timestamp)\n{\n\tthis.ts = timestamp._timestamp;\n};\n\n/**\n * @constructor\n */\nvar LEDCommand = function()\n{\n\t/**\n\t * chronometer timestamp\n\t * @type {number[]} */\n\tthis.ts = null;\n\t/**\n\t * RGB color value, percentage of maximum [0.0, 1.0]\n\t * @type {number[]} */\n\tthis.color = null;\n\t/**\n\t * desired rate of change of each color value, in percent/second\n\t * @type {number[]} */\n\tthis.rate_limit = null;\n};\n\n/**\n * @param {Time} timestamp\n */\nLEDCommand.prototype.setTimestamp = function(timestamp)\n{\n\tthis.ts = timestamp._timestamp;\n};\n\n/**\n * @param {number} rateLimit - desired rate of change, in percent/second\n */\nLEDCommand.prototype.setRateLimit = function(rateLimit)\n{\n\tthis.rate_limit = [rateLimit, rateLimit, rateLimit];\n};\n\n\nmodule.exports.AxisCommandMode = AxisCommandMode;\nmodule.exports.SingleAxisState = SingleAxisState;\nmodule.exports.AxisState = AxisState;\nmodule.exports.SingleAxisCommand = SingleAxisCommand;\nmodule.exports.AxisCommand = AxisCommand;\nmodule.exports.LEDCommand = LEDCommand;\n\n"],"sourceRoot":"/source/"}