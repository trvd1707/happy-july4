{"version":3,"sources":["animation-body/MotionServiceOutput.js"],"names":[],"mappings":";;;;AAKA;;AAGA,IAAI,aAAa,QAAQ,cAAR,CAAb;;;;;;;;;;;;;AAaJ,IAAI,sBAAsB,SAAtB,mBAAsB,CAAS,KAAT,EAAgB,SAAhB,EAA2B,cAA3B,EAA2C,gBAA3C,EAA6D,YAA7D,EAA2E,oBAA3E,EAAiG,YAAjG,EAC1B;AACC,YAAW,IAAX,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,SAA7B,EAAwC,cAAxC,EAAwD,YAAxD,EAAsE,oBAAtE,EAA4F,YAA5F,EADD;;AAGC,MAAK,aAAL,GAAqB,IAAI,SAAJ,CAAc,gBAAd,CAArB,CAHD;CAD0B;;AAO1B,oBAAoB,SAApB,GAAgC,OAAO,MAAP,CAAc,WAAW,SAAX,CAA9C;AACA,oBAAoB,SAApB,CAA8B,WAA9B,GAA4C,mBAA5C;;AAEA,oBAAoB,SAApB,CAA8B,MAA9B,GAAuC,YACvC;AACC,KAAI,cAAc,KAAK,KAAL,CAAW,WAAX,EAAd,CADL;;AAGC,KAAI,UAAU,KAAK,qBAAL,CAA2B,YAAY,GAAZ,CAAgB,KAAK,YAAL,CAA3C,CAAV,CAHL;;AAKC,KAAI,YAAY,IAAZ,IAAoB,KAAK,aAAL,CAAmB,UAAnB,KAAkC,UAAU,IAAV,EAC1D;AACC,OAAK,IAAI,IAAE,CAAF,EAAK,IAAE,KAAK,QAAL,CAAc,MAAd,EAAsB,GAAtC,EACA;AACC,WAAQ,CAAR,EAAW,OAAX,GAAqB,KAAK,YAAL,CAAkB,CAAlB,CAArB,CADD;GADA;;AAKA,MAAI,MAAM,KAAK,SAAL,CAAe,OAAf,CAAN,CANL;AAOC,OAAK,aAAL,CAAmB,IAAnB,CAAwB,GAAxB;;;AAPD,MAUK,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAA5B,IAAiC,KAAK,eAAL,CAAqB,WAArB,EAAjC,EACJ;AACC,QAAK,IAAE,CAAF,EAAK,IAAE,KAAK,QAAL,CAAc,MAAd,EAAsB,GAAlC,EACA;AACC,QAAI,QAAQ,KAAK,eAAL,CAAqB,QAArB,CAA8B,KAAK,QAAL,CAAc,CAAd,CAA9B,CAAR,CADL;AAEC,QAAI,OAAO;AACV,cAAS,KAAK,QAAL,CAAc,CAAd,CAAT;AACA,gBAAW,WAAX;AACA,uBAAkB,MAAM,GAAN;AAClB,qBAAgB,QAAQ,CAAR,EAAW,QAAX;AAChB,uBAAkB,MAAM,GAAN;AAClB,sBAAiB,QAAQ,CAAR,EAAW,QAAX;KANd,CAFL;AAUC,SAAK,IAAI,IAAE,CAAF,EAAK,IAAE,KAAK,aAAL,CAAmB,MAAnB,EAA2B,GAA3C,EACA;AACC,UAAK,aAAL,CAAmB,CAAnB,EAAsB,IAAtB,EADD;KADA;IAXD;GAFD;EAXD;CANsC;;;;;AA0CvC,oBAAoB,SAApB,CAA8B,WAA9B,GAA4C,YAC5C;AACC,QAAO,KAAK,eAAL,CAAqB,WAArB,MAAsC,KAAK,aAAL,CAAmB,UAAnB,KAAkC,UAAU,IAAV,CADhF;CAD4C;;AAM5C,OAAO,OAAP,GAAiB,mBAAjB","file":"animation-body/MotionServiceOutput.js","sourcesContent":["/**\n * @author mattb\n */\n\n\n\"use strict\";\n\n\nvar BodyOutput = require(\"./BodyOutput\");\n\n/**\n * Timeline output connecting to the body service.\n * @param {Clock} clock - the timeline clock\n * @param {RobotInfo} robotInfo - robot info object\n * @param {string} bodyServiceURL - base URL for the body service\n * @param {string} motionServiceURL - URL for the position server\n * @param {boolean} [startEnabled] - optional, if true, start up with motors enabled (defaults to false)\n * @param {number} [updateIntervalMillis] - if specified and non-zero, auto-update at the given interval\n * @param {string} [sessionToken] - optional session security token\n * @constructor\n */\nvar MotionServiceOutput = function(clock, robotInfo, bodyServiceURL, motionServiceURL, startEnabled, updateIntervalMillis, sessionToken)\n{\n\tBodyOutput.call(this, clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken);\n\n\tthis.commandSocket = new WebSocket(motionServiceURL);\n};\n\nMotionServiceOutput.prototype = Object.create(BodyOutput.prototype);\nMotionServiceOutput.prototype.constructor = MotionServiceOutput;\n\nMotionServiceOutput.prototype.update = function()\n{\n\tvar currentTime = this.clock.currentTime();\n\n\tvar targets = this.computeTargetsForTime(currentTime.add(this.reactionTime));\n\n\tif (targets !== null && this.commandSocket.readyState === WebSocket.OPEN)\n\t{\n\t\tfor (var i=0; i<this.dofNames.length; i++)\n\t\t{\n\t\t\ttargets[i].enabled = this.enabledArray[i];\n\t\t}\n\n\t\tvar cmd = JSON.stringify(targets);\n\t\tthis.commandSocket.send(cmd);\n\n\t\t// update listeners\n\t\tif (this.infoListeners.length > 0 && this.motionInterface.isConnected())\n\t\t{\n\t\t\tfor (i=0; i<this.dofNames.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.motionInterface.getState(this.dofNames[i]);\n\t\t\t\tvar info = {\n\t\t\t\t\tdofName: this.dofNames[i],\n\t\t\t\t\ttimestamp: currentTime,\n\t\t\t\t\tobservedPosition: state.pos,\n\t\t\t\t\ttargetPosition: targets[i].position,\n\t\t\t\t\tobservedVelocity: state.vel,\n\t\t\t\t\tcommandVelocity: targets[i].velocity\n\t\t\t\t};\n\t\t\t\tfor (var c=0; c<this.infoListeners.length; c++)\n\t\t\t\t{\n\t\t\t\t\tthis.infoListeners[c](info);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @return {boolean}\n */\nMotionServiceOutput.prototype.isConnected = function()\n{\n\treturn this.motionInterface.isConnected() && this.commandSocket.readyState === WebSocket.OPEN;\n};\n\n\nmodule.exports = MotionServiceOutput;\n"],"sourceRoot":"/source/"}