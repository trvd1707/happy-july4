{"version":3,"sources":["animation-body/BodyVelocityOutput.js"],"names":[],"mappings":"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","file":"animation-body/BodyVelocityOutput.js","sourcesContent":["/**\n * @author mattb\n */\n\n\n\"use strict\";\n\n\nvar BodyData = require(\"./BodyData\");\nvar BodyOutput = require(\"./BodyOutput\");\n\nvar PVController = require(\"../ifr-motion/feedback/PVController\");\n\n/**\n * Timeline output connecting to the body service.\n * Creates a local set of position-velocity feedback controllers wrapping\n * the (remote) velocity control mode on the body boards.\n * @param {Clock} clock - the timeline clock\n * @param {RobotInfo} robotInfo - robot info object\n * @param {string} bodyServiceURL - base URL for the body service\n * @param {boolean} [startEnabled] - optional, if true, start up with motors enabled (defaults to false)\n * @param {number} [updateIntervalMillis] - if specified and non-zero, auto-update at the given interval\n * @param {string} [sessionToken] - optional session security token\n * @constructor\n */\nvar BodyVelocityOutput = function(clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken)\n{\n\tBodyOutput.call(this, clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken);\n\n\t/** @type {PVController[]} */\n\tthis.feedbackControllers = [];\n\tfor (var i=0; i<this.dofNames.length; i++)\n\t{\n\t\tthis.feedbackControllers.push(new PVController());\n\t}\n};\n\nBodyVelocityOutput.prototype = Object.create(BodyOutput.prototype);\nBodyVelocityOutput.prototype.constructor = BodyOutput;\n\nBodyVelocityOutput.prototype.update = function()\n{\n\tvar currentTime = this.clock.currentTime();\n\n\tvar targets = this.computeTargetsForTime(currentTime.add(this.reactionTime));\n\n\tif (targets !== null && this.motionInterface.isConnected())\n\t{\n\t\tfor (var i=0; i<this.dofNames.length; i++)\n\t\t{\n\t\t\tthis.feedbackControllers[i].setTarget(currentTime, targets[i].position, targets[i].velocity);\n\t\t\tthis.feedbackControllers[i].calculateForTime(currentTime);\n\n\t\t\tvar commandVelocity = this.feedbackControllers[i].getCommandVelocity();\n\t\t\tvar commandAcceleration = this.feedbackControllers[i].getCommandAcceleration();\n\t\t\tvar commandMode = this.enabledArray[i] ? BodyData.AxisCommandMode.VELOCITY : BodyData.AxisCommandMode.LIMP;\n\n\t\t\tthis.motionInterface.setCommand(this.dofNames[i], commandMode, commandVelocity, null, commandAcceleration, null);\n\n\t\t\tvar state = this.motionInterface.getState(this.dofNames[i]);\n\t\t\tthis.feedbackControllers[i].acceptFeedback(currentTime, state.pos, state.vel, state.ref);\n\n\t\t\tif (this.infoListeners.length > 0)\n\t\t\t{\n\t\t\t\tvar info = {\n\t\t\t\t\tdofName: this.dofNames[i],\n\t\t\t\t\ttimestamp: currentTime,\n\t\t\t\t\tobservedPosition: state.pos,\n\t\t\t\t\ttargetPosition: targets[i].position,\n\t\t\t\t\tobservedVelocity: state.vel,\n\t\t\t\t\tcommandVelocity: commandVelocity\n\t\t\t\t};\n\t\t\t\tfor (var c=0; c<this.infoListeners.length; c++)\n\t\t\t\t{\n\t\t\t\t\tthis.infoListeners[c](info);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.motionInterface.sendCommand();\n\t}\n};\n\n\nmodule.exports = BodyVelocityOutput;\n"],"sourceRoot":"/source/"}