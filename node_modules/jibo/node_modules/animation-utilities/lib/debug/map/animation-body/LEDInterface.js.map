{"version":3,"sources":["animation-body/LEDInterface.js"],"names":[],"mappings":";;;;AAKA;;AAGA,IAAI,WAAW,QAAQ,YAAR,CAAX;AACJ,IAAI,QAAQ,QAAQ,mBAAR,CAAR;;;;;;;AAOJ,IAAI,eAAe,SAAf,YAAe,CAAS,cAAT,EAAyB,YAAzB,EACnB;;AAEC,MAAK,OAAL,GAAe,IAAI,SAAS,UAAT,EAAnB,CAFD;AAGC,MAAK,OAAL,CAAa,KAAb,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAArB,CAHD;AAIC,MAAK,OAAL,CAAa,YAAb,CAA0B,EAA1B,EAJD;;AAMC,KAAI,YAAJ,EACA;AACC,OAAK,aAAL,GAAqB,IAAI,SAAJ,CAAc,iBAAe,cAAf,EAA+B,YAA7C,CAArB,CADD;EADA,MAKA;AACC,OAAK,aAAL,GAAqB,IAAI,SAAJ,CAAc,iBAAe,cAAf,CAAnC,CADD;EALA;CAPkB;;;;;;;AAsBnB,aAAa,SAAb,CAAuB,UAAvB,GAAoC,UAAS,QAAT,EAAmB,SAAnB,EACpC;AACC,MAAK,IAAI,IAAE,CAAF,EAAK,IAAE,CAAF,EAAK,GAAnB,EACA;AACC,OAAK,OAAL,CAAa,KAAb,CAAmB,CAAnB,IAAwB,SAAS,CAAT,CAAxB,CADD;EADA;AAIA,MAAK,OAAL,CAAa,YAAb,CAA0B,SAA1B,EALD;;AAOC,QAAO,IAAP,CAPD;CADoC;;;;;AAcpC,aAAa,SAAb,CAAuB,WAAvB,GAAqC,YACrC;AACC,KAAI,KAAK,aAAL,CAAmB,UAAnB,KAAkC,UAAU,IAAV,EACtC;AACC,OAAK,OAAL,CAAa,YAAb,CAA0B,MAAM,WAAN,EAA1B,EADD;AAEC,MAAI,MAAM,KAAK,SAAL,CAAe,KAAK,OAAL,CAArB,CAFL;AAGC,OAAK,aAAL,CAAmB,IAAnB,CAAwB,GAAxB,EAHD;AAIC,SAAO,IAAP,CAJD;EADA,MAQA;AACC,SAAO,KAAP,CADD;EARA;CAFoC;;;;;AAkBrC,aAAa,SAAb,CAAuB,WAAvB,GAAqC,YACrC;AACC,QAAO,KAAK,aAAL,CAAmB,UAAnB,KAAkC,UAAU,IAAV,CAD1C;CADqC;;AAKrC,aAAa,SAAb,CAAuB,KAAvB,GAA+B,YAC/B;AACC,MAAK,aAAL,CAAmB,KAAnB,GADD;CAD+B;;AAM/B,OAAO,OAAP,GAAiB,YAAjB","file":"animation-body/LEDInterface.js","sourcesContent":["/**\n * @author mattb\n */\n\n\n\"use strict\";\n\n\nvar BodyData = require(\"./BodyData\");\nvar Clock = require(\"../ifr-core/Clock\");\n\n/**\n * @param {string} bodyServiceURL - base URL for the body service\n * @param {string} [sessionToken] - optional session security token\n * @constructor\n */\nvar LEDInterface = function(bodyServiceURL, sessionToken)\n{\n\t/** @type {LEDCommand} */\n\tthis.command = new BodyData.LEDCommand();\n\tthis.command.color = [0, 0, 0];\n\tthis.command.setRateLimit(50);\n\n\tif (sessionToken)\n\t{\n\t\tthis.commandSocket = new WebSocket(bodyServiceURL+\"/led_command\", sessionToken);\n\t}\n\telse\n\t{\n\t\tthis.commandSocket = new WebSocket(bodyServiceURL+\"/led_command\");\n\t}\n};\n\n/**\n * @param {number[]} rgbValue - RGB color value array, values in percentage of maximum [0.0, 1.0]\n * @param {number} rateLimit - maximum rate of change of color values, in percent/second\n * @return {boolean} true if the command was set successfully\n */\nLEDInterface.prototype.setCommand = function(rgbValue, rateLimit)\n{\n\tfor (var i=0; i<3; i++)\n\t{\n\t\tthis.command.color[i] = rgbValue[i];\n\t}\n\tthis.command.setRateLimit(rateLimit);\n\n\treturn true;\n};\n\n/**\n * @return {boolean} true if the command was sent successfully\n */\nLEDInterface.prototype.sendCommand = function()\n{\n\tif (this.commandSocket.readyState === WebSocket.OPEN)\n\t{\n\t\tthis.command.setTimestamp(Clock.currentTime());\n\t\tvar cmd = JSON.stringify(this.command);\n\t\tthis.commandSocket.send(cmd);\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * @return {boolean} true if the LED interface is connected\n */\nLEDInterface.prototype.isConnected = function()\n{\n\treturn this.commandSocket.readyState === WebSocket.OPEN;\n};\n\nLEDInterface.prototype.close = function()\n{\n\tthis.commandSocket.close();\n};\n\n\nmodule.exports = LEDInterface;\n"],"sourceRoot":"/source/"}