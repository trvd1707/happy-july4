{"version":3,"sources":["animation-body/BodyPosVelComboOutput.js"],"names":[],"mappings":";;;;AAKA;;AAGA,IAAI,WAAW,QAAQ,YAAR,CAAX;AACJ,IAAI,aAAa,QAAQ,cAAR,CAAb;AACJ,IAAI,QAAQ,QAAQ,mBAAR,CAAR;;;;;;;;;;;;;;AAcJ,IAAI,wBAAwB,SAAxB,qBAAwB,CAAS,KAAT,EAAgB,SAAhB,EAA2B,cAA3B,EAA2C,YAA3C,EAAyD,oBAAzD,EAA+E,YAA/E,EAA6F,kBAA7F,EAC5B;AACC,YAAW,IAAX,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,SAA7B,EAAwC,cAAxC,EAAwD,YAAxD,EAAsE,oBAAtE,EAA4F,YAA5F,EADD;AAEC,MAAK,kBAAL,GAA0B,GAA1B,CAFD;AAGC,KAAG,sBAAsB,IAAtB,EAA2B;AAC7B,OAAK,kBAAL,GAA0B,kBAA1B,CAD6B;EAA9B;;;AAHD,KAQC,CAAK,SAAL,GAAiB,IAAjB;;AARD,KAUC,CAAK,aAAL,GAAqB,EAArB;;;AAVD,KAaC,CAAK,qBAAL,GAA6B,EAA7B;;;AAbD,KAgBC,CAAK,aAAL,GAAqB,MAArB,CAhBD;CAD4B;;AAoB5B,sBAAsB,SAAtB,GAAkC,OAAO,MAAP,CAAc,WAAW,SAAX,CAAhD;AACA,sBAAsB,SAAtB,CAAgC,WAAhC,GAA8C,UAA9C;;AAEA,sBAAsB,SAAtB,CAAgC,MAAhC,GAAyC,YACzC;AACC,KAAI,CAAJ;;AADD,KAGK,cAAc,KAAK,KAAL,CAAW,WAAX,EAAd,CAHL;;AAKC,KAAI,UAAU,KAAK,qBAAL,CAA2B,YAAY,GAAZ,CAAgB,KAAK,YAAL,CAA3C,CAAV,CALL;;AAOC,KAAI,YAAY,IAAZ,IAAoB,KAAK,eAAL,CAAqB,WAArB,EAApB,EACJ;AACC,MAAG,KAAK,SAAL,KAAmB,IAAnB,EAAwB;;AAE1B,QAAK,SAAL,GAAiB,WAAjB,CAF0B;AAG1B,QAAK,IAAE,CAAF,EAAK,IAAE,KAAK,QAAL,CAAc,MAAd,EAAsB,GAAlC,EACA;AACC,SAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAK,eAAL,CAAqB,QAArB,CAA8B,KAAK,QAAL,CAAc,CAAd,CAA9B,CAAxB,EADD;IADA;;;AAH0B,QASrB,IAAE,CAAF,EAAK,IAAE,KAAK,QAAL,CAAc,MAAd,EAAsB,GAAlC,EACA;AACC,SAAK,qBAAL,CAA2B,IAA3B,CAAgC,MAAM,WAAN,EAAhC,EADD;IADA;GATD;;AAeA,MAAI,YAAY,CAAZ,CAhBL;AAiBC,MAAI,iBAAiB,CAAjB,CAjBL;AAkBC,MAAG,YAAY,QAAZ,CAAqB,KAAK,SAAL,CAArB,GAAuC,cAAvC,EAAsD;AACxD,OAAI,cAAc,CAAd,CADoD;AAExD,QAAK,IAAE,CAAF,EAAK,IAAE,KAAK,QAAL,CAAc,MAAd,EAAsB,GAAlC,EACA;AACC,QAAG,KAAK,GAAL,CAAS,KAAK,aAAL,CAAmB,CAAnB,EAAsB,GAAtB,CAAT,GAAsC,WAAtC,EACH;AACC,mBAAc,KAAK,GAAL,CAAS,KAAK,aAAL,CAAmB,CAAnB,EAAsB,GAAtB,CAAvB,CADD;KADA;IAFD;AAOA,iBAAc,KAAK,GAAL,CAAS,CAAT,EAAY,KAAK,GAAL,CAAS,KAAK,EAAL,EAAS,WAAlB,CAAZ,CAAd,CATwD;AAUxD,OAAI,cAAc,kBAAkB,cAAY,KAAK,EAAL,CAA9B,CAVsC;;AAYxD,eAAY,YAAY,QAAZ,CAAqB,KAAK,SAAL,CAArB,GAAuC,WAAvC,CAZ4C;AAaxD,eAAY,KAAK,GAAL,CAAS,CAAT,EAAY,KAAK,GAAL,CAAS,CAAT,EAAY,SAAZ,CAAZ,CAAZ,CAbwD;GAAzD;;AAgBA,OAAK,IAAE,CAAF,EAAK,IAAE,KAAK,QAAL,CAAc,MAAd,EAAsB,GAAlC,EACA;AACC,OAAI,oBAAoB,EAApB,CADL;AAEC,OAAI,OAAJ,CAFD;AAGC,OAAG,YAAY,CAAZ,EAAc;AAChB,cAAU,CACT,QAAQ,CAAR,EAAW,QAAX,GAAsB,SAAtB,EACA,QAAQ,CAAR,EAAW,QAAX,GAAsB,SAAtB,GAAkC,KAAK,aAAL,CAAmB,CAAnB,EAAsB,GAAtB,IAA2B,IAAE,SAAF,CAA3B,CAFnC,CADgB;AAKhB,SAAK,qBAAL,CAA2B,CAA3B,IAAgC,MAAM,WAAN,EAAhC,CALgB;IAAjB,MAMM;AACL,cAAU,CAAC,QAAQ,CAAR,EAAW,QAAX,EAAqB,QAAQ,CAAR,EAAW,QAAX,CAAhC,CADK;IANN;;AAUA,OAAG,KAAK,GAAL,CAAS,QAAQ,CAAR,CAAT,IAAuB,KAAK,aAAL,IAAsB,YAAY,CAAZ,EAAc;;AAE7D,SAAK,qBAAL,CAA2B,CAA3B,IAAgC,MAAM,WAAN,EAAhC,CAF6D;IAA9D;;AAKA,OAAI,YAAJ,CAlBD;AAmBC,OAAI,YAAJ,CAnBD;;AAqBC,OAAG,KAAK,kBAAL,GAA0B,CAA1B,IAA+B,MAAM,WAAN,GAAoB,QAApB,CAA6B,KAAK,qBAAL,CAA2B,CAA3B,CAA7B,IAA8D,KAAK,kBAAL,EAAwB;;;AAGvH,SAAK,eAAL,CAAqB,UAArB,CAAgC,KAAK,QAAL,CAAc,CAAd,CAAhC,EAAkD,KAAK,YAAL,CAAkB,CAAlB,IAAqB,SAAS,eAAT,CAAyB,QAAzB,GAAkC,SAAS,eAAT,CAAyB,IAAzB,EAA+B,CAAxI,EAA2I,IAA3I,EAAiJ,iBAAjJ,EAAoK,IAApK,EAHuH;AAIvH,mBAAe,CAAf,CAJuH;AAKvH,mBAAe,IAAf;AALuH,IAAxH,MAMK;;;AAGJ,SAAI,cAAc,KAAK,YAAL,CAAkB,CAAlB,IAAuB,SAAS,eAAT,CAAyB,OAAzB,GAAmC,SAAS,eAAT,CAAyB,IAAzB;;AAHxE,SAKJ,CAAK,eAAL,CAAqB,UAArB,CAAgC,KAAK,QAAL,CAAc,CAAd,CAAhC,EAAkD,WAAlD,EAA+D,gBAAc,SAAS,eAAT,CAAyB,OAAzB,GAAiC,OAA/C,GAAuD,CAAvD,EAA0D,IAAzH,EAA+H,iBAA/H,EAAkJ,IAAlJ,EALI;AAMJ,oBAAe,QAAQ,CAAR,CAAf,CANI;AAOJ,oBAAe,QAAQ,CAAR,CAAf,CAPI;KANL;;AAiBA,OAAI,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAA5B,EACJ;AACC,QAAI,QAAQ,KAAK,eAAL,CAAqB,QAArB,CAA8B,KAAK,QAAL,CAAc,CAAd,CAA9B,CAAR,CADL;AAEC,QAAI,OAAO;AACV,cAAS,KAAK,QAAL,CAAc,CAAd,CAAT;AACA,gBAAW,WAAX;AACA,uBAAkB,MAAM,GAAN;AAClB,qBAAgB,YAAhB;AACA,uBAAkB,MAAM,GAAN;AAClB,sBAAiB,YAAjB;AACA,kBAAa,MAAM,GAAN;KAPV,CAFL;AAWC,SAAK,IAAI,IAAE,CAAF,EAAK,IAAE,KAAK,aAAL,CAAmB,MAAnB,EAA2B,GAA3C,EACA;AACC,UAAK,aAAL,CAAmB,CAAnB,EAAsB,IAAtB,EADD;KADA;IAZD;GAvCD;;AA0DA,OAAK,eAAL,CAAqB,WAArB,GA5FD;EADA;CARwC;;AA0GzC,OAAO,OAAP,GAAiB,qBAAjB","file":"animation-body/BodyPosVelComboOutput.js","sourcesContent":["/**\n * @author mattb\n */\n\n\n\"use strict\";\n\n\nvar BodyData = require(\"./BodyData\");\nvar BodyOutput = require(\"./BodyOutput\");\nvar Clock = require(\"../ifr-core/Clock\");\n\n/**\n * Timeline output connecting to the body service.\n * Communicates with the (remote) position-velocity control mode running on the body boards.\n * @param {Clock} clock - the timeline clock\n * @param {RobotInfo} robotInfo - robot info object\n * @param {string} bodyServiceURL - base URL for the body service\n * @param {boolean} [startEnabled] - optional, if true, start up with motors enabled (defaults to false)\n * @param {number} [updateIntervalMillis] - if specified and non-zero, auto-update at the given interval\n * @param {string} [sessionToken] - optional session security token\n * @param {number} [idleModeSwitchTime=0.3] - switch to zero velocity idle after this many seconds of static position commands (0 to never switch to idle)\n * @constructor\n */\nvar BodyPosVelComboOutput = function(clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken, idleModeSwitchTime)\n{\n\tBodyOutput.call(this, clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken);\n\tthis.idleModeSwitchTime = 0.3;\n\tif(idleModeSwitchTime != null){\n\t\tthis.idleModeSwitchTime = idleModeSwitchTime;\n\t}\n\n\t/** @type {Time} */\n\tthis.startTime = null;\n\t/** @type {SingleAxisState[]} */\n\tthis.initialStates = [];\n\n\t/** @type {Time[]} */\n\tthis.lastMovingCommandTime = [];\n\n\t/** @type {number} */\n\tthis.movingEpsilon = 0.0001;\n};\n\nBodyPosVelComboOutput.prototype = Object.create(BodyOutput.prototype);\nBodyPosVelComboOutput.prototype.constructor = BodyOutput;\n\nBodyPosVelComboOutput.prototype.update = function()\n{\n\tvar i;\n\t/** @type {Time} */\n\tvar currentTime = this.clock.currentTime();\n\n\tvar targets = this.computeTargetsForTime(currentTime.add(this.reactionTime));\n\n\tif (targets !== null && this.motionInterface.isConnected())\n\t{\n\t\tif(this.startTime === null){\n\t\t\t//grab the initial states and start time after we are first connected for fade-in\n\t\t\tthis.startTime = currentTime;\n\t\t\tfor (i=0; i<this.dofNames.length; i++)\n\t\t\t{\n\t\t\t\tthis.initialStates.push(this.motionInterface.getState(this.dofNames[i]));\n\t\t\t}\n\n\t\t\t//init motion-stopped idle trackers\n\t\t\tfor (i=0; i<this.dofNames.length; i++)\n\t\t\t{\n\t\t\t\tthis.lastMovingCommandTime.push(Clock.currentTime());\n\t\t\t}\n\t\t}\n\n\t\tvar fadeAlpha = 1;\n\t\tvar fadeSecondsMax = 8;\n\t\tif(currentTime.subtract(this.startTime) < fadeSecondsMax){\n\t\t\tvar maxDistance = 0;\n\t\t\tfor (i=0; i<this.dofNames.length; i++)\n\t\t\t{\n\t\t\t\tif(Math.abs(this.initialStates[i].pos) > maxDistance)\n\t\t\t\t{\n\t\t\t\t\tmaxDistance = Math.abs(this.initialStates[i].pos);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmaxDistance = Math.max(0, Math.min(Math.PI, maxDistance));\n\t\t\tvar fadeSeconds = fadeSecondsMax * (maxDistance/Math.PI);\n\n\t\t\tfadeAlpha = currentTime.subtract(this.startTime) / fadeSeconds;\n\t\t\tfadeAlpha = Math.max(0, Math.min(1, fadeAlpha));\n\t\t}\n\n\t\tfor (i=0; i<this.dofNames.length; i++)\n\t\t{\n\t\t\tvar accelerationLimit = 50;\n\t\t\tvar command;\n\t\t\tif(fadeAlpha < 1){\n\t\t\t\tcommand = [\n\t\t\t\t\ttargets[i].velocity * fadeAlpha,\n\t\t\t\t\ttargets[i].position * fadeAlpha + this.initialStates[i].pos*(1-fadeAlpha)\n\t\t\t\t];\n\t\t\t\tthis.lastMovingCommandTime[i] = Clock.currentTime();\n\t\t\t}else {\n\t\t\t\tcommand = [targets[i].velocity, targets[i].position];\n\t\t\t}\n\n\t\t\tif(Math.abs(command[0]) > this.movingEpsilon || fadeAlpha < 1){\n\t\t\t\t//prevent idle if starting up or moving more than epsilon speed\n\t\t\t\tthis.lastMovingCommandTime[i] = Clock.currentTime();\n\t\t\t}\n\n\t\t\tvar sendVelocity;\n\t\t\tvar sendPosition;\n\n\t\t\tif(this.idleModeSwitchTime > 0 && Clock.currentTime().subtract(this.lastMovingCommandTime[i]) > this.idleModeSwitchTime){\n\t\t\t\t//idle mode (assumed to be at target position, no desired velocity)  send velocity mode 0, or limp if disabled.\n\n\t\t\t\tthis.motionInterface.setCommand(this.dofNames[i], this.enabledArray[i]?BodyData.AxisCommandMode.VELOCITY:BodyData.AxisCommandMode.LIMP, 0, null, accelerationLimit, null);\n\t\t\t\tsendVelocity = 0;\n\t\t\t\tsendPosition = 0.25; //undefined, not sent\n\t\t\t}else{\n\t\t\t\t//regular mode.  send posvel command, or limp if disabled.\n\n\t\t\t\tvar commandMode = this.enabledArray[i] ? BodyData.AxisCommandMode.POS_VEL : BodyData.AxisCommandMode.LIMP;\n\t\t\t\t//send only 1 value if we're in \"limp\" mode\n\t\t\t\tthis.motionInterface.setCommand(this.dofNames[i], commandMode, commandMode===BodyData.AxisCommandMode.POS_VEL?command:0, null, accelerationLimit, null);\n\t\t\t\tsendVelocity = command[0];\n\t\t\t\tsendPosition = command[1];\n\t\t\t}\n\n\n\t\t\tif (this.infoListeners.length > 0)\n\t\t\t{\n\t\t\t\tvar state = this.motionInterface.getState(this.dofNames[i]);\n\t\t\t\tvar info = {\n\t\t\t\t\tdofName: this.dofNames[i],\n\t\t\t\t\ttimestamp: currentTime,\n\t\t\t\t\tobservedPosition: state.pos,\n\t\t\t\t\ttargetPosition: sendPosition,\n\t\t\t\t\tobservedVelocity: state.vel,\n\t\t\t\t\tcommandVelocity: sendVelocity,\n\t\t\t\t\trefVelocity: state.ref\n\t\t\t\t};\n\t\t\t\tfor (var c=0; c<this.infoListeners.length; c++)\n\t\t\t\t{\n\t\t\t\t\tthis.infoListeners[c](info);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.motionInterface.sendCommand();\n\t}\n};\n\n\nmodule.exports = BodyPosVelComboOutput;\n"],"sourceRoot":"/source/"}