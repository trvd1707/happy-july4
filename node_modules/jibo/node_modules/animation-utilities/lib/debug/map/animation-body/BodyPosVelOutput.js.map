{"version":3,"sources":["animation-body/BodyPosVelOutput.js"],"names":[],"mappings":"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","file":"animation-body/BodyPosVelOutput.js","sourcesContent":["/**\n * @author mattb\n */\n\n\n\"use strict\";\n\n\nvar BodyData = require(\"./BodyData\");\nvar BodyOutput = require(\"./BodyOutput\");\n\n/**\n * Timeline output connecting to the body service.\n * Communicates with the (remote) position-velocity control mode running on the body boards.\n * @param {Clock} clock - the timeline clock\n * @param {RobotInfo} robotInfo - robot info object\n * @param {string} bodyServiceURL - base URL for the body service\n * @param {boolean} [startEnabled] - optional, if true, start up with motors enabled (defaults to false)\n * @param {number} [updateIntervalMillis] - if specified and non-zero, auto-update at the given interval\n * @param {string} [sessionToken] - optional session security token\n * @constructor\n */\nvar BodyPosVelOutput = function(clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken)\n{\n\tBodyOutput.call(this, clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken);\n\t/** @type {Time} */\n\tthis.startTime = null;\n\t/** @type {SingleAxisState[]} */\n\tthis.initialStates = [];\n};\n\nBodyPosVelOutput.prototype = Object.create(BodyOutput.prototype);\nBodyPosVelOutput.prototype.constructor = BodyOutput;\n\nBodyPosVelOutput.prototype.update = function()\n{\n\tvar i;\n\t/** @type {Time} */\n\tvar currentTime = this.clock.currentTime();\n\n\tvar targets = this.computeTargetsForTime(currentTime.add(this.reactionTime));\n\n\tif (targets !== null && this.motionInterface.isConnected())\n\t{\n\t\tif(this.startTime === null){\n\t\t\t//grab the initial states and start time after we are first connected for fade-in\n\t\t\tthis.startTime = currentTime;\n\t\t\tfor (i=0; i<this.dofNames.length; i++)\n\t\t\t{\n\t\t\t\tthis.initialStates.push(this.motionInterface.getState(this.dofNames[i]));\n\t\t\t}\n\t\t}\n\n\t\tvar fadeAlpha = 1;\n\t\tvar fadeSecondsMax = 8;\n\t\tif(currentTime.subtract(this.startTime) < fadeSecondsMax){\n\t\t\tvar maxDistance = 0;\n\t\t\tfor (i=0; i<this.dofNames.length; i++)\n\t\t\t{\n\t\t\t\tif(Math.abs(this.initialStates[i].pos) > maxDistance)\n\t\t\t\t{\n\t\t\t\t\tmaxDistance = Math.abs(this.initialStates[i].pos);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmaxDistance = Math.max(0, Math.min(Math.PI, maxDistance));\n\t\t\tvar fadeSeconds = fadeSecondsMax * (maxDistance/Math.PI);\n\n\t\t\tfadeAlpha = currentTime.subtract(this.startTime) / fadeSeconds;\n\t\t\tfadeAlpha = Math.max(0, Math.min(1, fadeAlpha));\n\t\t}\n\n\t\tfor (i=0; i<this.dofNames.length; i++)\n\t\t{\n\t\t\tvar commandMode = this.enabledArray[i] ? BodyData.AxisCommandMode.POS_VEL : BodyData.AxisCommandMode.LIMP;\n\t\t\tvar accelerationLimit = 50;\n\t\t\tvar command;\n\t\t\tif(fadeAlpha < 1){\n\t\t\t\tcommand = [\n\t\t\t\t\ttargets[i].velocity * fadeAlpha,\n\t\t\t\t\ttargets[i].position * fadeAlpha + this.initialStates[i].pos*(1-fadeAlpha)\n\t\t\t\t];\n\t\t\t}else {\n\t\t\t\tcommand = [targets[i].velocity, targets[i].position];\n\t\t\t}\n\n\t\t\t//send only 1 value if we're in \"limp\" mode\n\t\t\tthis.motionInterface.setCommand(this.dofNames[i], commandMode, commandMode===BodyData.AxisCommandMode.POS_VEL?command:0, null, accelerationLimit, null);\n\n\t\t\tif (this.infoListeners.length > 0)\n\t\t\t{\n\t\t\t\tvar state = this.motionInterface.getState(this.dofNames[i]);\n\t\t\t\tvar info = {\n\t\t\t\t\tdofName: this.dofNames[i],\n\t\t\t\t\ttimestamp: currentTime,\n\t\t\t\t\tobservedPosition: state.pos,\n\t\t\t\t\ttargetPosition: command[1],\n\t\t\t\t\tobservedVelocity: state.vel,\n\t\t\t\t\tcommandVelocity: command[0],\n\t\t\t\t\trefVelocity: state.ref\n\t\t\t\t};\n\t\t\t\tfor (var c=0; c<this.infoListeners.length; c++)\n\t\t\t\t{\n\t\t\t\t\tthis.infoListeners[c](info);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.motionInterface.sendCommand();\n\t}\n};\n\n\nmodule.exports = BodyPosVelOutput;\n"],"sourceRoot":"/source/"}