{"version":3,"sources":["ifr-motion/dofs/ModelControl.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAKA,IAAI,eAAe,SAAf,YAAe,GACnB;;AAEC,MAAK,aAAL,GAAqB,EAArB;;AAFD,KAIC,CAAK,SAAL,GAAiB,EAAjB,CAJD;CADmB;;;AASnB,aAAa,SAAb,CAAuB,YAAvB,GAAsC,IAAtC;;;;;AAKA,aAAa,SAAb,CAAuB,WAAvB,GAAqC,UAAS,QAAT,EACrC;AACC,KAAI,SAAS,WAAT,EACJ;AACC,OAAK,aAAL,CAAmB,IAAnB,CAAwB,SAAS,WAAT,CAAxB,CADD;EADA;CAFoC;;;;;AAWrC,aAAa,SAAb,CAAuB,cAAvB,GAAwC,YACxC;AACC,QAAO,KAAK,YAAL,CADR;CADwC;;;;;AAQxC,aAAa,SAAb,CAAuB,eAAvB,GAAyC,YACzC;AACC,QAAO,KAAK,aAAL,CADR;CADyC;;;;;AAQzC,aAAa,SAAb,CAAuB,WAAvB,GAAqC,YACrC;AACC,QAAO,KAAK,SAAL,CADR;CADqC;;;;;AAQrC,aAAa,SAAb,CAAuB,iBAAvB,GAA2C,YAC3C;AACC,QAAO,IAAP,CADD;CAD2C;;;;;AAQ3C,aAAa,SAAb,CAAuB,kBAAvB,GAA4C,YAC5C;AACC,KAAI,KAAK,aAAL,CAAmB,MAAnB,KAA8B,CAA9B,EACJ;AACC,SAAO,IAAP,CADD;EADA,MAIK,IAAI,KAAK,aAAL,CAAmB,MAAnB,KAA8B,CAA9B,EACT;AACC,SAAO,KAAK,aAAL,CAAmB,CAAnB,CAAP,CADD;EADK,MAKL;AACC,MAAI,QAAQ,KAAK,aAAL,CAAmB,CAAnB,CAAR,CADL;AAEC,OAAK,IAAI,IAAE,CAAF,EAAK,IAAE,KAAK,aAAL,CAAmB,MAAnB,EAA2B,GAA3C,EACA;AACC,WAAQ,QAAQ,IAAR,GAAe,KAAK,aAAL,CAAmB,CAAnB,CAAf,CADT;GADA;AAIA,SAAO,kBAAkB,KAAlB,GAA0B,GAA1B,CANR;EALK;CANsC;;;;;;AAyB5C,aAAa,SAAb,CAAuB,aAAvB,GAAuC,UAAS,QAAT;AACvC;AACC,QAAO,KAAP,CADD;CADuC;;;;;;;AAUvC,aAAa,SAAb,CAAuB,oBAAvB,GAA8C,UAAS,YAAT,EAAuB,EAAvB;;;;;;AAM9C,aAAa,SAAb,CAAuB,mBAAvB,GAA6C,UAAS,SAAT;AAC7C;AACC,QAAO,KAAP,CADD;CAD6C;;;;;;AAS7C,aAAa,SAAb,CAAuB,cAAvB,GAAwC,UAAS,IAAT;AACxC;AACC,QAAO,KAAP,CADD;CADwC;;;;;;;;;AAYxC,aAAa,SAAb,CAAuB,OAAvB,GAAiC,UAAS,QAAT,EACjC;AACC,KAAG,CAAC,QAAD,EAAU;AACZ,aAAW,IAAI,YAAJ,EAAX,CADY;EAAb;AAGA,UAAS,aAAT,GAAyB,KAAK,aAAL,GAAmB,KAAK,aAAL,CAAmB,KAAnB,CAAyB,CAAzB,CAAnB,GAA+C,IAA/C,CAJ1B;AAKC,UAAS,SAAT,GAAqB,KAAK,SAAL,GAAe,KAAK,SAAL,CAAe,KAAf,CAAqB,CAArB,CAAf,GAAuC,IAAvC,CALtB;AAMC,UAAS,YAAT,GAAwB,KAAK,YAAL,CANzB;CADiC;;AAWjC,OAAO,OAAP,GAAiB,YAAjB","file":"ifr-motion/dofs/ModelControl.js","sourcesContent":["/**\n * @author mattb\n * Copyright 2014 IF Robots LLC\n */\n\n\"use strict\";\n\n/**\n * @constructor\n */\nvar ModelControl = function()\n{\n\t/** @type {Array.<string>} */\n\tthis._controlNames = [];\n\t/** @type {Array.<string>} */\n\tthis._dofNames = [];\n};\n\n/** @type {string} */\nModelControl.prototype._controlType = null;\n\n/**\n * @param {Object} jsonData\n */\nModelControl.prototype.setFromJson = function(jsonData)\n{\n\tif (jsonData.controlName)\n\t{\n\t\tthis._controlNames.push(jsonData.controlName);\n\t}\n};\n\n/**\n * @return {string}\n */\nModelControl.prototype.getControlType = function()\n{\n\treturn this._controlType;\n};\n\n/**\n * @return {Array.<string>}\n */\nModelControl.prototype.getControlNames = function()\n{\n\treturn this._controlNames;\n};\n\n/**\n * @return {Array.<string>}\n */\nModelControl.prototype.getDOFNames = function()\n{\n\treturn this._dofNames;\n};\n\n/**\n * @return {Array.<string>}\n */\nModelControl.prototype.getTransformNames = function()\n{\n\treturn null;\n};\n\n/**\n * @return {string}\n */\nModelControl.prototype.getDescriptiveName = function()\n{\n\tif (this._controlNames.length === 0)\n\t{\n\t\treturn null;\n\t}\n\telse if (this._controlNames.length === 1)\n\t{\n\t\treturn this._controlNames[0];\n\t}\n\telse\n\t{\n\t\tvar names = this._controlNames[0];\n\t\tfor (var i=1; i<this._controlNames.length; i++)\n\t\t{\n\t\t\tnames = names + \", \" + this._controlNames[i];\n\t\t}\n\t\treturn \"MultiControl<\" + names + \">\";\n\t}\n};\n\n/**\n * @param {Object.<string, THREE.Object3D>} modelMap\n * @return {!boolean}\n */\nModelControl.prototype.attachToModel = function(modelMap) // eslint-disable-line no-unused-vars\n{\n\treturn false;\n};\n\n/**\n * Called once when control list is assigned to a group, used by controls\n * which need to make links amongst themselves.\n * @param {ModelControlGroup} controlGroup\n */\nModelControl.prototype.attachToControlGroup = function(controlGroup) {}; // eslint-disable-line no-unused-vars\n\n/**\n * @param {Object.<string, Object>} dofValues\n * @return {!boolean}\n */\nModelControl.prototype.updateFromDOFValues = function(dofValues) // eslint-disable-line no-unused-vars\n{\n\treturn false;\n};\n\n/**\n * @param {Pose} pose\n * @return {!boolean}\n */\nModelControl.prototype.updateFromPose = function(pose) // eslint-disable-line no-unused-vars\n{\n\treturn false;\n};\n\n/**\n * Creates a copy of this dof, or fills in this dof's data to the provided\n * argument (to allow type to be defined by subclass's getCopy).\n *\n * @param {ModelControl} copyInto - optional object to copy into\n * @return {ModelControl} copy of this dof, not attached to any model\n */\nModelControl.prototype.getCopy = function(copyInto)\n{\n\tif(!copyInto){\n\t\tcopyInto = new ModelControl();\n\t}\n\tcopyInto._controlNames = this._controlNames?this._controlNames.slice(0):null;\n\tcopyInto._dofNames = this._dofNames?this._dofNames.slice(0):null;\n\tcopyInto._controlType = this._controlType;\n};\n\n\nmodule.exports = ModelControl;"],"sourceRoot":"/source/"}