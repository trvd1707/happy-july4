{"version":3,"sources":["ifr-motion/lookat/LookatMotionNode.js"],"names":[],"mappings":"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","file":"ifr-motion/lookat/LookatMotionNode.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\nvar OcularStabilizationTracker = require(\"./OcularStabilizationTracker\");\nvar PoseOffsetFilter = require(\"./PoseOffsetFilter\");\nvar Pose = require(\"../base/Pose\");\nvar slog = require(\"../../ifr-core/SLog\");\nvar THREE = require(\"three\");\nvar LookatNode = require(\"./LookatNode\");\nvar LookatNodeDistanceReport = require(\"./LookatNodeDistanceReport\");\nvar LookatNodeTrackPolicy = require(\"./trackpolicy/LookatNodeTrackPolicy\");\nvar TrackPolicyTriggerAlways = require(\"./trackpolicy/TrackPolicyTriggerAlways\");\n\n\n/**\n * Enum Values for look stabilization modes, for use with LookatMotionNode's constructor.\n * @enum {string}\n */\nvar LookStabilizationMode = {\n\t/**\n\t * Use point-at stabilization relative to current target.\n\t */\n\tPOINT_TARGET: \"POINT_TARGET\",\n\t/**\n\t * Use point-st stabilization relative to node forward.\n\t */\n\tPOINT_FORWARD: \"POINT_FORWARD\",\n\t/**\n\t * Use point-at from target when it scores stable, forward relative otherwise\n\t */\n\tPOINT_AUTO: \"POINT_AUTO\"\n};\n\n\n\n/**\n *\n * @param {LookatNode} lookatNode - assumed to be in order root to leaf\n * @param {DOFGlobalAlignment} dofAligner\n * @param {number} accel - acceleration value for this node\n * @param {LookStabilizationMode} stabilizationMode - specify stabilization mode\n * @param {LookatNodeTrackPolicy} trackPolicy\n * @constructor\n */\nvar LookatMotionNode = function(lookatNode, dofAligner, accel, stabilizationMode, trackPolicy){\n\t/** @type {LookatNode} */\n\tthis._lookatNode = lookatNode;\n\n\t/** @type {OcularStabilizationTracker} */\n\tthis._stabilization = new OcularStabilizationTracker(lookatNode, dofAligner);\n\n\t/** @type {PoseOffsetFilter} */\n\tthis._filter = new PoseOffsetFilter(lookatNode.getDOFs());\n\tthis._filter.setRejectDeltaThreshold(0.4);\n\tif(accel!=null){\n\t\tthis._filter.setAcceleration(accel);\n\t}\n\n\t/** @type {Time} */\n\tthis._lastUpdateTime = null;\n\n\t/** @type {Pose} */\n\tthis._optimalPose = new Pose(\"LMN Optimal\", lookatNode.getDOFs());\n\n\t/** @type {Pose} */\n\tthis._tempPose = new Pose(\"LMN Temp\", lookatNode.getDOFs());\n\n\t/** @type {THREE.Vector3} */\n\tthis._stabilizationTarget = new THREE.Vector3();\n\n\t/** @type {Pose} */\n\tthis._poseForStabilizationTarget = new Pose(\"Pose For ST\", lookatNode.getDOFs());\n\n\t/** @type {Pose} */\n\tthis._holdPose = new Pose(\"Hold Pose\", lookatNode.getDOFs());\n\n\t/** @type {LookatNodeTrackPolicy} */\n\tthis._lookatTrackPolicy = trackPolicy;\n\tif(this._lookatTrackPolicy == null){ //null or undefined (eqnull)\n\t\tthis._lookatTrackPolicy = new LookatNodeTrackPolicy([new TrackPolicyTriggerAlways()]);\n\t}\n\n\t/** @type {DOFGlobalAlignment} */\n\tthis._dofAligner = dofAligner;\n\n\t/**\n\t * stabilization mode\n\t * @type {LookStabilizationMode} */\n\tthis._stabilizationMode = stabilizationMode;\n\n\t/**\n\t * @type {LookatNodeDistanceReport}\n\t * @private\n\t */\n\tthis._lookatNodeDistanceReport = new LookatNodeDistanceReport();\n};\n\nLookatMotionNode.LookStabilizationMode = LookStabilizationMode;\n\n/**\n * @param {KinematicGroup} kinematicGroup\n */\nLookatMotionNode.prototype.connectToGroup = function(kinematicGroup){\n\tthis._lookatNode.connectToGroup(kinematicGroup);\n};\n\n\n/**\n * Update state to the current time and produce the new filtered pose.\n * If called twice at the same \"time\", second call will not recompute,\n * and will instead return the same pose.\n *\n * @param {Pose} currentPose - use parents' position from here to compute our values.  velocities and positions of currentPose (our node and parents) must be correct on first update after reset! (initialization update)\n * @param {Pose} inplaceOutput\n * @param {THREE.Vector3} target\n * @param {Time} time\n */\nLookatMotionNode.prototype.update = function(currentPose, inplaceOutput, target, time){\n\n\tif(this._lastUpdateTime !== null && time.equals(this._lastUpdateTime)){\n\t\tthis._filter.getValue(inplaceOutput);\n\t\treturn;\n\t}\n\n\tvar defaultPose;\n\n\tif(this._lastUpdateTime === null){\n\t\t//not initialized, must make do\n\t\tdefaultPose = currentPose;\n\t}else{\n\t\t//initialized, previous optimal will be a good default for uncomputable joints\n\t\tdefaultPose = this._optimalPose;\n\t}\n\n\tvar report = new LookatNode.PointNodeReport();\n\n\tthis._lookatNode.getPose(currentPose, this._optimalPose, target, defaultPose, report);\n\n\n\tif(this._stabilizationMode === LookStabilizationMode.POINT_FORWARD ||\n\t\t(this._stabilizationMode === LookStabilizationMode.POINT_AUTO &&\n\t\t\t(report._targetStability < 0.2 || !report._pointSucceeded))){\n\t\tif(this._stabilizationMode === LookStabilizationMode.POINT_AUTO){\n\t\t\tslog.info(\"Stabilization AUTO mode for \"+this.getName()+\" falling back to FORWARD with stability \"+report._targetStability+\", pointSuccess=\"+report._pointSucceeded);\n\t\t}\n\t\tthis._lookatNode.suggestForwardTarget(currentPose, this._stabilizationTarget);\n\t\tthis._lookatNode.getPose(currentPose, this._poseForStabilizationTarget, this._stabilizationTarget, defaultPose);\n\t}else{\n\t\tthis._stabilizationTarget.copy(target);\n\t\tthis._poseForStabilizationTarget.setPose(this._optimalPose);\n\t}\n\n\t//hold is hold, but already stabilized\n\n\tif(this._lastUpdateTime === null){\n\t\tthis._stabilization.reset();\n\n\t\t//init hold pose to the state at the start\n\t\tthis._holdPose.setPose(currentPose);\n\n\t\tthis._lookatTrackPolicy.reset();\n\n\t\tthis._stabilization.computeStabilizationDelta(currentPose, this._poseForStabilizationTarget, this._stabilizationTarget); //initialize for next time\n\t\tthis._tempPose.setPose(currentPose);\n\n\t\tthis._stabilization.decomposeVelocity(currentPose, this._tempPose, this._stabilizationTarget, this._filter.getRejectDeltaThreshold());\n\t\t//tempPose has velocity removed that will later be added back in by the stabilization delta.\n\t\tthis._filter.resetToPose(this._tempPose);\n\t}else{\n\t\tthis._filter.getTarget(this._tempPose);\n\t\tthis._dofAligner.refineToLocallyClosestTargetPose(this._tempPose, this._optimalPose);\n\n\t\tvar delta = this._stabilization.computeStabilizationDelta(currentPose, this._poseForStabilizationTarget, this._stabilizationTarget);\n\t\t//var delta = new Pose(\"temp\", currentPose.getDOFNames());\n\t\tthis._filter.applyUnfilteredOffset(delta);\n\t\tPose.add(this._holdPose, delta, false, this._holdPose);\n\n\t\tthis._filter.getValue(this._tempPose);//grab current filter value to check our progress\n\t\tthis._lookatNodeDistanceReport.compute(this._holdPose, this._optimalPose, this._tempPose);\n\t\tvar trackMode = this._lookatTrackPolicy.computeMode(this._lookatNodeDistanceReport, time);\n\t\tif(trackMode === LookatNodeTrackPolicy.TrackMode.HOLD || trackMode === LookatNodeTrackPolicy.TrackMode.DELAY){\n\t\t\tthis._filter.setTarget(this._holdPose);\n\t\t}else{\n\t\t\tthis._filter.setTarget(this._optimalPose);\n\t\t}\n\n\t\tthis._filter.updateByTime(time.subtract(this._lastUpdateTime));\n\t}\n\n\tif(inplaceOutput!=null){ //null or undefined (eqnull)\n\t\tthis._filter.getValue(inplaceOutput);\n\t}\n\n\n\n\tthis._lastUpdateTime = time;\n};\n\n/**\n * Produces the optimal lookat pose, regardless of current state/time.  Does not update state.\n *\n * @param {Pose} currentPose\n * @param {Pose} inplaceOutput\n * @param {THREE.Vector3} target\n */\nLookatMotionNode.prototype.getOptimalPose = function(currentPose, inplaceOutput, target) {\n\tvar defaultPose;\n\n\tif(this._lastUpdateTime === null){\n\t\t//not initialized, must make do\n\t\tdefaultPose = currentPose;\n\t}else{\n\t\t//initialized, previous optimal will be a good default for uncomputable joints\n\t\tdefaultPose = this._optimalPose;\n\t}\n\n\tthis._lookatNode.getPose(currentPose, inplaceOutput, target, defaultPose);\n};\n\n/**\n * Get the latest computed pose.  Does not advance (use update()).  Only\n * valid after initialized, typically by first call to update() after init or reset.\n *\n * @param {Pose} inplaceOutput\n */\nLookatMotionNode.prototype.getPose = function(inplaceOutput){\n\tif(this._lastUpdateTime === null){\n\t\tslog.error(\"LookatMotionNode asked \\\"getPose()\\\" before initialization\");\n\t}\n\tthis._filter.getValue(inplaceOutput);\n};\n\n/**\n * Get the distance remaining from filtered to optimal.  Does not advance (use update())\n * This value is computed from the data calculated in the last update() call.\n * @return {number} distance of dof with largest remaining distance (as ratio of current distance of total range of LookatDOF)\n */\nLookatMotionNode.prototype.getDistanceRemaining = function(){\n\tthis._filter.getValue(this._tempPose);\n\treturn this._lookatNode.distanceAsRatio(this._tempPose, this._optimalPose);\n};\n\n\n/**\n * Get all the dofs that are modified by this node\n * @return {string[]}\n */\nLookatMotionNode.prototype.getDOFs = function(){\n\treturn this._lookatNode.getDOFs();\n};\n\nLookatMotionNode.prototype.reset = function(){\n\tthis._lastUpdateTime = null;\n};\n\nLookatMotionNode.prototype.getName = function(){\n\treturn this._lookatNode.getName();\n};\n\nmodule.exports = LookatMotionNode;"],"sourceRoot":"/source/"}