{"version":3,"sources":["ifr-motion/base/Interpolators.js"],"names":[],"mappings":";;;;;AAKA;;AAEA,IAAI,gBAAgB,EAAhB;;;;;AAKJ,cAAc,gBAAd,GAAiC,YACjC,EADiC;;;;;;;;;;AAYjC,cAAc,gBAAd,CAA+B,SAA/B,CAAyC,WAAzC,GAAuD,UAAS,OAAT,EAAkB,OAAlB,EAA2B,KAA3B;AACvD;AACC,SAAO,OAAP,CADD;CADuD;;;;;;AASvD,cAAc,gBAAd,GAAiC,UAAS,cAAT,EACjC;AACC,gBAAc,gBAAd,CAA+B,IAA/B,CAAoC,IAApC;;AADD,MAGC,CAAK,cAAL,GAAsB,cAAC,KAAmB,SAAnB,GAAgC,cAAjC,GAAkD,CAAlD,CAHvB;CADiC;;AAOjC,cAAc,gBAAd,CAA+B,SAA/B,GAA2C,OAAO,MAAP,CAAc,cAAc,gBAAd,CAA+B,SAA/B,CAAzD;AACA,cAAc,gBAAd,CAA+B,SAA/B,CAAyC,WAAzC,GAAuD,cAAc,gBAAd;;AAEvD,cAAc,gBAAd,CAA+B,SAA/B,CAAyC,WAAzC,GAAuD,UAAS,OAAT,EAAkB,OAAlB,EAA2B,KAA3B,EACvD;AACC,SAAO,KAAC,GAAQ,KAAK,cAAL,GAAuB,OAAhC,GAA0C,OAA1C,CADR;CADuD;;;;;AAQvD,cAAc,kBAAd,GAAmC,YACnC;AACC,gBAAc,gBAAd,CAA+B,IAA/B,CAAoC,IAApC,EADD;CADmC;;AAKnC,cAAc,kBAAd,CAAiC,SAAjC,GAA6C,OAAO,MAAP,CAAc,cAAc,gBAAd,CAA+B,SAA/B,CAA3D;AACA,cAAc,kBAAd,CAAiC,SAAjC,CAA2C,WAA3C,GAAyD,cAAc,kBAAd;;;;;;;;;;AAUzD,cAAc,kBAAd,CAAiC,SAAjC,CAA2C,WAA3C,GAAyD,UAAS,OAAT,EAAkB,OAAlB,EAA2B,KAA3B,EACzD;AACC,SAAO,CAAC,IAAE,KAAF,CAAD,GAAU,OAAV,GAAoB,QAAM,OAAN,CAD5B;CADyD;;;;;;;AAUzD,cAAc,qBAAd,GAAsC,UAAS,oBAAT,EAA+B,sBAA/B,EACtC;AACC,gBAAc,gBAAd,CAA+B,IAA/B,CAAoC,IAApC;;AADD,MAGC,CAAK,oBAAL,GAA4B,oBAA5B;;AAHD,MAKC,CAAK,sBAAL,GAA8B,sBAAC,KAA2B,SAA3B,GAAwC,sBAAzC,GAAkE,IAAI,cAAc,kBAAd,EAAtE,CAL/B;CADsC;;AAStC,cAAc,qBAAd,CAAoC,SAApC,GAAgD,OAAO,MAAP,CAAc,cAAc,gBAAd,CAA+B,SAA/B,CAA9D;AACA,cAAc,qBAAd,CAAoC,SAApC,CAA8C,WAA9C,GAA4D,cAAc,qBAAd;;;;;;;;;AAS5D,cAAc,qBAAd,CAAoC,SAApC,CAA8C,WAA9C,GAA4D,UAAS,OAAT,EAAkB,OAAlB,EAA2B,KAA3B,EAC5D;AACC,MAAI,EAAE,mBAAmB,KAAnB,CAAF,EACJ;AACC,cAAU,CAAC,OAAD,CAAV,CADD;GADA;AAIA,MAAI,EAAE,mBAAmB,KAAnB,CAAF,EACJ;AACC,cAAU,CAAC,OAAD,CAAV,CADD;GADA;;AAKA,MAAI,SAAS,EAAT,CAVL;AAWC,MAAI,mBAAmB,KAAK,GAAL,CAAS,QAAQ,MAAR,EAAgB,QAAQ,MAAR,CAA5C,CAXL;;AAaC,OAAK,IAAI,kBAAgB,CAAhB,EAAmB,kBAAgB,gBAAhB,EAAkC,iBAA9D,EACA;AACC,QAAI,oBAAoB,CAApB,EACJ;AACC,aAAO,IAAP,CAAY,KAAK,oBAAL,CAA0B,WAA1B,CAAsC,QAAQ,eAAR,CAAtC,EAAgE,QAAQ,eAAR,CAAhE,EAA0F,KAA1F,CAAZ,EADD;KADA,MAKA;AACC,aAAO,IAAP,CAAY,KAAK,sBAAL,CAA4B,WAA5B,CAAwC,QAAQ,eAAR,CAAxC,EAAkE,QAAQ,eAAR,CAAlE,EAA4F,KAA5F,CAAZ,EADD;KALA;GAFD;;AAYA,SAAO,MAAP,CAzBD;CAD4D;;AA6B5D,OAAO,OAAP,GAAiB,aAAjB","file":"ifr-motion/base/Interpolators.js","sourcesContent":["/**\n * @author mattb\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\nvar Interpolators = {};\n\n/**\n * @constructor\n */\nInterpolators.BaseInterpolator = function()\n{\n};\n\n/**\n * Interpolate between two samples based on interpolation factor alpha.\n * alpha === 0 : sampleA-only; alpha === 1 : sampleB-only\n * @param {*} sampleA\n * @param {*} sampleB\n * @param {number} alpha interpolation factor\n * @return {*}\n */\nInterpolators.BaseInterpolator.prototype.interpolate = function(sampleA, sampleB, alpha) // eslint-disable-line no-unused-vars\n{\n\treturn sampleA;\n};\n\n/**\n * @param {number} [alphaThreshold]\n * @constructor\n */\nInterpolators.StepInterpolator = function(alphaThreshold)\n{\n\tInterpolators.BaseInterpolator.call(this);\n\t/** @type {number} */\n\tthis.alphaThreshold = (alphaThreshold !== undefined) ? alphaThreshold : 1;\n};\n\nInterpolators.StepInterpolator.prototype = Object.create(Interpolators.BaseInterpolator.prototype);\nInterpolators.StepInterpolator.prototype.constructor = Interpolators.StepInterpolator;\n\nInterpolators.StepInterpolator.prototype.interpolate = function(sampleA, sampleB, alpha)\n{\n\treturn (alpha < this.alphaThreshold) ? sampleA : sampleB;\n};\n\n/**\n * @constructor\n */\nInterpolators.LinearInterpolator = function()\n{\n\tInterpolators.BaseInterpolator.call(this);\n};\n\nInterpolators.LinearInterpolator.prototype = Object.create(Interpolators.BaseInterpolator.prototype);\nInterpolators.LinearInterpolator.prototype.constructor = Interpolators.LinearInterpolator;\n\n/**\n * Linearly interpolate between two numerical samples based on interpolation factor alpha.\n * alpha === 0 : sampleA-only; alpha === 1 : sampleB-only\n * @param {number} sampleA\n * @param {number} sampleB\n * @param {number} alpha interpolation factor\n * @return {number}\n */\nInterpolators.LinearInterpolator.prototype.interpolate = function(sampleA, sampleB, alpha)\n{\n\treturn (1-alpha)*sampleA + alpha*sampleB;\n};\n\n/**\n * @param {Interpolators.BaseInterpolator} positionInterpolator\n * @param {Interpolators.BaseInterpolator} [derivativeInterpolator]\n * @constructor\n */\nInterpolators.DOFSampleInterpolator = function(positionInterpolator, derivativeInterpolator)\n{\n\tInterpolators.BaseInterpolator.call(this);\n\t/** @type {Interpolators.BaseInterpolator} */\n\tthis.positionInterpolator = positionInterpolator;\n\t/** @type {Interpolators.BaseInterpolator} */\n\tthis.derivativeInterpolator = (derivativeInterpolator !== undefined) ? derivativeInterpolator : new Interpolators.LinearInterpolator();\n};\n\nInterpolators.DOFSampleInterpolator.prototype = Object.create(Interpolators.BaseInterpolator.prototype);\nInterpolators.DOFSampleInterpolator.prototype.constructor = Interpolators.DOFSampleInterpolator;\n\n/**\n * Interpolate between two DOF samples based on interpolation factor alpha.\n * @param {Array|*} sampleA\n * @param {Array|*} sampleB\n * @param {number} alpha\n * @return {Array}\n */\nInterpolators.DOFSampleInterpolator.prototype.interpolate = function(sampleA, sampleB, alpha)\n{\n\tif (!(sampleA instanceof Array))\n\t{\n\t\tsampleA = [sampleA];\n\t}\n\tif (!(sampleB instanceof Array))\n\t{\n\t\tsampleB = [sampleB];\n\t}\n\n\tvar result = [];\n\tvar derivativeLength = Math.min(sampleA.length, sampleB.length);\n\n\tfor (var derivativeIndex=0; derivativeIndex<derivativeLength; derivativeIndex++)\n\t{\n\t\tif (derivativeIndex === 0)\n\t\t{\n\t\t\tresult.push(this.positionInterpolator.interpolate(sampleA[derivativeIndex], sampleB[derivativeIndex], alpha));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.push(this.derivativeInterpolator.interpolate(sampleA[derivativeIndex], sampleB[derivativeIndex], alpha));\n\t\t}\n\t}\n\n\treturn result;\n};\n\nmodule.exports = Interpolators;"],"sourceRoot":"/source/"}