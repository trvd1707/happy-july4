{"version":3,"sources":["ifr-motion/base/AccelPlanner.js"],"names":[],"mappings":"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","file":"ifr-motion/base/AccelPlanner.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\nvar slog = require(\"../../ifr-core/SLog\");\nvar channel = \"ACCEL_PLANNER\";\n\n\nvar AccelPlan = function(initialVelocity, targetVelocity, acceleration, accelerateTime, decelerateTime, totalTime, distance){\n\tthis._initialVelocity = initialVelocity;\n\tthis._targetVelocity = targetVelocity;\n\tthis._acceleration = acceleration;\n\tthis._accelerateTime = accelerateTime;\n\tthis._decelerateTime = decelerateTime;\n\tthis._totalTime = totalTime;\n\tthis._distance = distance;\n};\n\nAccelPlan.prototype.displacementAtTime = function(tDelta){\n\tvar newPosition = 0;\n\tif(tDelta > 0) {\n\t\tvar useAccTime = Math.min(tDelta, this._accelerateTime);\n\t\tnewPosition += (this._initialVelocity + (this._acceleration * useAccTime) / 2) * useAccTime;\n\t\ttDelta -= useAccTime;\n\t}\n\tif(tDelta > 0){\n\t\tvar useDecTime = Math.min(tDelta, this._decelerateTime);\n\t\tnewPosition += (this._initialVelocity + (this._acceleration * this._accelerateTime) - (this._acceleration* useDecTime/2))*useDecTime;\n\t\ttDelta -= useDecTime;\n\t}\n\tif(tDelta > 0){\n\t\tnewPosition += this._targetVelocity * tDelta;\n\t}\n\treturn newPosition;\n};\n\nAccelPlan.prototype.velocityAtTime = function(tDelta){\n\tvar newVelocity = this._initialVelocity;\n\tif(tDelta > 0) {\n\t\tvar useAccTime = Math.min(tDelta, this._accelerateTime);\n\t\tnewVelocity += this._acceleration * useAccTime;\n\t\ttDelta -= useAccTime;\n\t}\n\tif(tDelta > 0){\n\t\tvar useDecTime = Math.min(tDelta, this._decelerateTime);\n\t\tnewVelocity -= this._acceleration * useDecTime;\n\t\ttDelta -= useDecTime;\n\t}\n\n\treturn newVelocity;\n};\n\n\nAccelPlan.prototype.isConsistent = function(){\n\n\tif(isNaN(this._accelerateTime) || isNaN(this._decelerateTime)) {\n\t\tslog(channel, \"Plan has NaN times! accelerationTime:\"+this._accelerateTime+\" decelerationTime:\"+this._decelerateTime);\n\t\treturn false;\n\t}\n\n\tif(!isFinite(this._accelerateTime) || !isFinite(this._decelerateTime)) {\n\t\tslog(channel, \"Plan has non-finite times! accelerationTime:\"+this._accelerateTime+\" decelerationTime:\"+this._decelerateTime);\n\t\treturn false;\n\t}\n\n\tif(isNaN(this._acceleration)) {\n\t\tslog(channel, \"Plan has NaN acceleration!: \"+this._acceleration);\n\t\treturn false;\n\t}\n\n\tif(!isFinite(this._acceleration)) {\n\t\tslog(channel, \"Plan has non-finite acceleration!: \"+this._acceleration);\n\t\treturn false;\n\t}\n\n\tvar totalTime = this._accelerateTime + this._decelerateTime;\n\tvar targetDisplacement = this._distance + this._targetVelocity * totalTime;\n\n\tvar ourDisplacement = (this._initialVelocity + (this._acceleration * this._accelerateTime)/2)*this._accelerateTime +\n\t\t(this._initialVelocity + (this._acceleration * this._accelerateTime) - (this._acceleration*this._decelerateTime/2))*this._decelerateTime;\n\n\tvar ourFinalV = this._initialVelocity + this._acceleration * this._accelerateTime - this._acceleration*this._decelerateTime;\n\n\tif(this._accelerateTime < 0 || this._decelerateTime < 0){\n\t\tslog(channel, \"Plan has negative times! accelerationTime:\"+this._accelerateTime+\" decelerationTime:\"+this._decelerateTime);\n\t\treturn false;\n\t}\n\n\tif(Math.abs(this._accelerateTime + this._decelerateTime - this._totalTime) > 0.0000001){\n\t\tslog(channel, \"Plan time segments are not equal to target time! segments:\"+(this._accelerateTime+this._decelerateTime)+\" target:\"+this._totalTime);\n\t\treturn false;\n\t}\n\n\tif(Math.abs(ourDisplacement - targetDisplacement) > 0.000001){\n\t\tslog(channel, \"Plan has incorrect integral! ourDisplacement:\"+ourDisplacement+\" pDelta:\"+targetDisplacement);\n\t\treturn false;\n\t}\n\n\tif(Math.abs(ourFinalV - this._targetVelocity) > 0.0000001){\n\t\tslog(channel, \"Plan has incorrect final velocity resultV:\"+ourFinalV+\" pDelta:\"+this._targetVelocity);\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\n/**\n * @returns {number}\n */\nAccelPlan.prototype.getTotalTime = function(){\n\treturn this._totalTime;\n};\n\nvar AccelPlanner = function(){\n\n};\n\n/**\n * Compute the acceleration needed to intercept a target moving at\n * vTarget and starting pDelta away from our initial velocity vCurrent\n * in time totalTime.  Acceleration is the free variable, time is fixed.\n *\n * @param {number} vCurrent\n * @param {number} vTarget\n * @param {number} pDelta\n * @param {number} totalTime\n * @returns {AccelPlan}\n */\nAccelPlanner.prototype.computeWithFixedTime = function(vCurrent, vTarget, pDelta, totalTime){\n\t//slog(channel, \"Find (accel) plan for vTarget=\"+vTarget+\" vCurrent=\"+vCurrent+\" totalTime=\"+totalTime+\" pDelta=\"+pDelta);\n\n\tif(totalTime < 0.0000000001){\n\t\tslog(channel, \"Asked for fixed time plan with time of \"+totalTime+\", returning null\");\n\t\treturn null;\n\t}\n\n\tvar aChoiceT1, aChoiceT2;\n\n\tvar term1 = (((vTarget - vCurrent)*totalTime/2) + pDelta);\n\tvar tosqrt = Math.pow((vCurrent - vTarget) * totalTime / 2 - pDelta, 2) -\n\t\tMath.pow(totalTime, 2) * (vTarget * vCurrent / 2 - Math.pow(vCurrent, 2) / 4 - Math.pow(vTarget, 2) / 4);\n\n\tif(tosqrt < 0){\n\t\tif(tosqrt > -0.0000000001) {\n\t\t\t//could occasionally, when values are very borderline, be slightly below zero here in an otherwise ok condition\n\t\t\ttosqrt = 0;\n\t\t}else {\n\t\t\tslog(channel, \"Inconsistent CWFT Plan for vCurrent:\"+vCurrent+\", vTarget:\"+vTarget+\", pDelta:\"+pDelta+\", totalTime:\"+totalTime+\", tsqrt:\"+tosqrt);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tvar term2 = Math.sqrt(tosqrt);\n\tvar term3 = Math.pow(totalTime,2)/2;\n\n\tvar sign = 1;\n\tif (pDelta < 0.5 * totalTime * (vCurrent - vTarget)) {\n\t\tsign = -1;\n\t}\n\n\tvar aChoice = (term1 + sign*term2)/term3;\n\n\tif(aChoice === 0) { //special handling if acceleration is zero, times are arbitrary\n\t\taChoiceT1 = totalTime;\n\t\taChoiceT2 = 0;\n\t}else if(Math.abs(aChoice) < 0.0000000001){\n\t\t//if accel is so small, plan may be compromised numerically\n\t\t//also, plan can be approximated by doing nothing.\n\t\taChoice = 0;\n\t\taChoiceT1 = totalTime;\n\t\taChoiceT2 = 0;\n\t}else{\n\t\taChoiceT1 = totalTime/2 + (vTarget - vCurrent)/(2*aChoice);\n\t\taChoiceT2 = totalTime/2 + (vCurrent - vTarget)/(2*aChoice);\n\t}\n\n\tif(aChoiceT1 < 0){\n\t\tif(aChoiceT1 > -0.0000000001){\n\t\t\taChoiceT1 = 0;\n\t\t}else{\n\t\t\tslog(channel, \"Inconsistent CWFTaT1 Plan for vCurrent:\"+vCurrent+\", vTarget:\"+vTarget+\", pDelta:\"+pDelta+\", totalTime:\"+totalTime+\", aChoiceT1:\"+aChoiceT1);\n\t\t\treturn null;\n\t\t}\n\t}\n\tif(aChoiceT2 < 0){\n\t\tif(aChoiceT2 > -0.0000000001){\n\t\t\taChoiceT2 = 0;\n\t\t}else{\n\t\t\tslog(channel, \"Inconsistent CWFTaT2 Plan for vCurrent:\"+vCurrent+\", vTarget:\"+vTarget+\", pDelta:\"+pDelta+\", totalTime:\"+totalTime+\", aChoiceT2:\"+aChoiceT2);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tvar accelPlan = new AccelPlan(vCurrent, vTarget, aChoice, aChoiceT1, aChoiceT2, totalTime, pDelta);\n\treturn accelPlan;\n};\n\n/**\n *\n * @param {number} vCurrent\n * @param {number} vTarget\n * @param {number} pDelta\n * @param {number} acceleration\n * @returns {AccelPlan}\n */\nAccelPlanner.prototype.computeWithFixedAccel = function(vCurrent, vTarget, pDelta, acceleration){\n\t//slog(channel, \"Find (time) plan for vTarget=\"+vTarget+\" vCurrent=\"+vCurrent+\" acceleration=\"+acceleration+\" pDelta=\"+pDelta);\n\n\t//var plans = [];\n\n\t//if we go positive first, the smallest distance we can travel\n\t//is to go straight to the target velocity\n\t// (zero t2 in +deltaV cases, zero t1 in -deltaV cases)\n\t// thus if we need less distance than this path, we need -a\n\n\tif(acceleration < 0.0000000001){\n\t\tslog(channel, \"Asked for fixed acceleration plan with acceleration of \"+acceleration+\", returning null\");\n\t\treturn null;\n\t}\n\n\n\tvar useAcceleration = acceleration;\n\tvar useSign = 1;\n\n\t//var timeToReachTargetVelocity = Math.abs((vTarget - vCurrent)/acceleration);\n\t//var distanceTraveled = (vTarget + vCurrent)/2 * timeToReachTargetVelocity;\n\t//var needToCoverDistance = pDelta + vTarget * timeToReachTargetVelocity;\n\t//\n\t//if(distanceTraveled > needToCoverDistance){\n\t//\tuseAcceleration = -acceleration;\n\t//}\n\n\t//simplified\n\n\tif ((vCurrent - vTarget) * Math.abs(vTarget - vCurrent) / (2 * acceleration) > pDelta) {\n\t\tuseAcceleration = -acceleration;\n\t\tuseSign = -1;\n\t}\n\n\tvar term1 = 2*vTarget - 2*vCurrent;\n\tvar tosqrt = 2 * Math.pow(vCurrent - vTarget, 2) + 4 * useAcceleration * pDelta;\n\n\tif(tosqrt < 0){\n\t\tif(tosqrt > -0.0000000001) {\n\t\t\t//can occasionally, when values are very borderline, be slightly below zero here in an otherwise ok condition\n\t\t\t//e.g., vCurrent = -0.3385816504064119, vTarget = 0, pDelta = -0.019106255665321623, acceleration = 3\n\t\t\ttosqrt = 0;\n\t\t}else {\n\t\t\tslog(channel, \"Inconsistent CWFA Plan for vCurrent:\"+vCurrent+\", vTarget:\"+vTarget+\", pDelta:\"+pDelta+\", acceleration:\"+acceleration+\", tsqrt:\"+tosqrt);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tvar term2 = Math.sqrt( tosqrt );\n\tvar term3 = 2*useAcceleration;\n\n\tvar time1Choice = (term1 + useSign*term2) / term3;\n\tvar time2Choice = vCurrent/useAcceleration + time1Choice - vTarget/useAcceleration;\n\n\tif(time1Choice < 0){\n\t\tif(time1Choice > -0.0000000001){\n\t\t\ttime1Choice = 0;\n\t\t}else{\n\t\t\tslog(channel, \"Inconsistent CWFAt1 Plan for vCurrent:\"+vCurrent+\", vTarget:\"+vTarget+\", pDelta:\"+pDelta+\", acceleration:\"+acceleration+\", t1Choice:\"+time1Choice);\n\t\t\treturn null;\n\t\t}\n\t}\n\tif(time2Choice < 0){\n\t\tif(time2Choice > -0.0000000001){\n\t\t\ttime2Choice = 0;\n\t\t}else{\n\t\t\tslog(channel, \"Inconsistent CWFAt2 Plan for vCurrent:\"+vCurrent+\", vTarget:\"+vTarget+\", pDelta:\"+pDelta+\", acceleration:\"+acceleration+\", t2Choice:\"+time2Choice);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\treturn new AccelPlan(vCurrent, vTarget, useAcceleration, time1Choice, time2Choice, (time1Choice+time2Choice), pDelta);\n\n};\n\n/**\n * Simple plan where we go at a constant speed for degenerate cases etc.\n * @param vCurrent speed to go at\n * @returns {AccelPlan} plan to go at constant speed with zero accel.  plan length is 1\n */\nAccelPlanner.prototype.computeWithZeroAccel = function(vCurrent){\n\tvar accelPlan = new AccelPlan(vCurrent, vCurrent, 0, 1, 0, 1, 0);\n\treturn accelPlan;\n};\n\nAccelPlanner.prototype.computeWithMaxAccel = function(vCurrent, vTarget, pDelta, maxAcceleration, targetInterceptTime){\n\tif(maxAcceleration < 0.000001){\n\t\treturn this.computeWithZeroAccel(vCurrent);\n\t}\n\tvar fixedTimePlan = this.computeWithFixedTime(vCurrent, vTarget, pDelta, targetInterceptTime);\n\tif(Math.abs(fixedTimePlan._acceleration)<=maxAcceleration){\n\t\treturn fixedTimePlan;\n\t}else{\n\t\tvar fixedAccelPlan = this.computeWithFixedAccel(vCurrent, vTarget, pDelta, maxAcceleration);\n\t\treturn fixedAccelPlan;\n\t}\n};\n\n\n\n\nmodule.exports = AccelPlanner;"],"sourceRoot":"/source/"}