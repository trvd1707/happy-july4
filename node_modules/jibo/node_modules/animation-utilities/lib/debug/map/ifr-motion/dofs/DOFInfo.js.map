{"version":3,"sources":["ifr-motion/dofs/DOFInfo.js"],"names":[],"mappings":";;;;;AAKA;;;;;;;;;;;AAUA,IAAI,UAAU,SAAV,OAAU,CAAS,OAAT,EAAkB,YAAlB,EACd;;;AAGC,MAAK,QAAL,GAAgB,OAAhB;;;;AAHD,KAOC,CAAK,YAAL,GAAoB,IAApB;;;AAPD,KAUC,CAAK,SAAL,GAAiB,KAAjB;;;AAVD,KAaC,CAAK,SAAL,GAAiB,KAAjB;;;AAbD,KAgBC,CAAK,IAAL,GAAY,SAAZ;;;AAhBD,KAmBC,CAAK,IAAL,GAAY,SAAZ;;;;AAnBD,KAuBC,CAAK,UAAL,GAAkB,EAAlB,CAvBD;;AAyBC,MAAK,mBAAL,CAAyB,YAAzB,EAzBD;CADc;;;;;;AAiCd,QAAQ,SAAR,CAAkB,mBAAlB,GAAwC,UAAS,YAAT,EACxC;AACC,MAAK,YAAL,GAAoB,aAAa,cAAb,EAApB,CADD;AAEC,MAAK,SAAL,GAAiB,KAAK,YAAL,KAAsB,SAAtB,CAFlB;AAGC,MAAK,SAAL,GAAkB,KAAK,YAAL,KAAsB,UAAtB,IAAoC,aAAa,QAAb,EAApC,CAHnB;;AAKC,KAAI,KAAK,YAAL,KAAsB,UAAtB,EACJ;AACC,OAAK,IAAL,GAAY,KAAK,SAAL,GAAiB,CAAC,KAAK,EAAL,GAAU,aAAa,MAAb,EAA5B,CADb;AAEC,OAAK,IAAL,GAAY,KAAK,SAAL,GAAiB,KAAK,EAAL,GAAU,aAAa,MAAb,EAA3B,CAFb;EADA,MAKK,IAAI,KAAK,YAAL,KAAsB,aAAtB,EACT;AACC,MAAI,WAAW,aAAa,WAAb,GAA2B,OAA3B,CAAmC,KAAK,QAAL,CAA9C,CADL;AAEC,MAAI,WAAW,CAAC,CAAD,EACf;AACC,QAAK,IAAL,GAAY,aAAa,QAAb,CAAsB,QAAtB,CAAZ,CADD;AAEC,QAAK,IAAL,GAAY,aAAa,QAAb,CAAsB,QAAtB,CAAZ,CAFD;GADA;EAHI,MASA,IAAI,KAAK,YAAL,KAAsB,OAAtB,EACT;AACC,OAAK,IAAL,GAAY,CAAZ,CADD;AAEC,OAAK,IAAL,GAAY,CAAZ,CAFD;EADK;CApBkC;;;;;AA8BxC,QAAQ,SAAR,CAAkB,UAAlB,GAA+B,YAC/B;AACC,QAAO,KAAK,QAAL,CADR;CAD+B;;;;;;AAS/B,QAAQ,SAAR,CAAkB,cAAlB,GAAmC,YACnC;AACC,QAAO,KAAK,YAAL,CADR;CADmC;;;;;;;AAUnC,QAAQ,SAAR,CAAkB,QAAlB,GAA6B,YAC7B;AACC,QAAO,KAAK,SAAL,CADR;CAD6B;;;;;;AAS7B,QAAQ,SAAR,CAAkB,QAAlB,GAA6B,YAC7B;AACC,QAAO,KAAK,SAAL,CADR;CAD6B;;;;;;AAS7B,QAAQ,SAAR,CAAkB,MAAlB,GAA2B,YAC3B;AACC,QAAO,KAAK,IAAL,CADR;CAD2B;;;;;;AAS3B,QAAQ,SAAR,CAAkB,MAAlB,GAA2B,YAC3B;AACC,QAAO,KAAK,IAAL,CADR;CAD2B;;;;;;;AAU3B,QAAQ,SAAR,CAAkB,YAAlB,GAAiC,UAAS,SAAT,EACjC;AACC,KAAI,YAAY,OAAO,IAAP,CAAY,SAAZ,CAAZ,CADL;AAEC,MAAK,IAAI,IAAE,CAAF,EAAK,IAAE,UAAU,MAAV,EAAkB,GAAlC,EACA;AACC,OAAK,UAAL,CAAgB,UAAU,CAAV,CAAhB,IAAgC,UAAU,UAAU,CAAV,CAAV,CAAhC,CADD;EADA;CAHgC;;;;;;;AAcjC,QAAQ,SAAR,CAAkB,QAAlB,GAA6B,UAAS,SAAT,EAC7B;AACC,QAAO,KAAK,UAAL,CAAgB,SAAhB,CAAP,CADD;CAD6B;;AAM7B,OAAO,OAAP,GAAiB,OAAjB","file":"ifr-motion/dofs/DOFInfo.js","sourcesContent":["/**\n * @author mattb\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\n/**\n * Protected constructor for internal use only.\n *\n * @param {string} dofName - Protected constructor parameter.\n * @param {ModelControl} modelControl - Protected constructor parameter.\n * @constructor\n * @protected\n */\nvar DOFInfo = function(dofName, modelControl)\n{\n\t/** @type {string} */\n\t/** @private */\n\tthis._dofName = dofName;\n\n\t/** @type {string} */\n\t/** @private */\n\tthis._controlType = null;\n\t/** @type {boolean} */\n\t/** @private */\n\tthis._isMetric = false;\n\t/** @type {boolean} */\n\t/** @private */\n\tthis._isCyclic = false;\n\t/** @type {number} */\n\t/** @private */\n\tthis._min = undefined;\n\t/** @type {number} */\n\t/** @private */\n\tthis._max = undefined;\n\n\t/** @type {Object.<string, number>} */\n\t/** @private */\n\tthis._limitData = {};\n\n\tthis.setFromModelControl(modelControl);\n};\n\n/**\n * @param {ModelControl} modelControl\n * @private\n */\nDOFInfo.prototype.setFromModelControl = function(modelControl)\n{\n\tthis._controlType = modelControl.getControlType();\n\tthis._isMetric = this._controlType !== \"TEXTURE\";\n\tthis._isCyclic = (this._controlType === \"ROTATION\" && modelControl.isCyclic());\n\n\tif (this._controlType === \"ROTATION\")\n\t{\n\t\tthis._min = this._isCyclic ? -Math.PI : modelControl.getMin();\n\t\tthis._max = this._isCyclic ? Math.PI : modelControl.getMax();\n\t}\n\telse if (this._controlType === \"TRANSLATION\")\n\t{\n\t\tvar dofIndex = modelControl.getDOFNames().indexOf(this._dofName);\n\t\tif (dofIndex > -1)\n\t\t{\n\t\t\tthis._min = modelControl._minList[dofIndex];\n\t\t\tthis._max = modelControl._maxList[dofIndex];\n\t\t}\n\t}\n\telse if (this._controlType === \"COLOR\")\n\t{\n\t\tthis._min = 0;\n\t\tthis._max = 1;\n\t}\n};\n\n/**\n * @return {string}\n */\nDOFInfo.prototype.getDOFName = function()\n{\n\treturn this._dofName;\n};\n\n/**\n * Gets the control type associated with this DOF.\n * @return {string}\n */\nDOFInfo.prototype.getControlType = function()\n{\n\treturn this._controlType;\n};\n\n/**\n * Returns whether or not this DOF exists in a metric space, i.e.\n * with a meaningful distance function, a well-defined minimum and maximum, etc.\n * @return {boolean}\n */\nDOFInfo.prototype.isMetric = function()\n{\n\treturn this._isMetric;\n};\n\n/**\n * Returns whether or not this DOF is cyclical (for example, a continuous rotational joint).\n * @return {boolean}\n */\nDOFInfo.prototype.isCyclic = function()\n{\n\treturn this._isCyclic;\n};\n\n/**\n * Returns the minimum value for this DOF (may be undefined).\n * @return {number}\n */\nDOFInfo.prototype.getMin = function()\n{\n\treturn this._min;\n};\n\n/**\n * Returns the maximum value for this DOF (may be undefined).\n * @return {number}\n */\nDOFInfo.prototype.getMax = function()\n{\n\treturn this._max;\n};\n\n/**\n * Sets optional limit values.\n * @param {Object.<string, number>} limitData\n * @private\n */\nDOFInfo.prototype.setLimitData = function(limitData)\n{\n\tvar limitKeys = Object.keys(limitData);\n\tfor (var i=0; i<limitKeys.length; i++)\n\t{\n\t\tthis._limitData[limitKeys[i]] = limitData[limitKeys[i]];\n\t}\n};\n\n/**\n * Returns the value for the specified limit (may be undefined).\n * @param {string} limitName - The requested limit (e.g. \"velocity\").\n * @return {number} - The limit value, or undefined if no limit is specified.\n */\nDOFInfo.prototype.getLimit = function(limitName)\n{\n\treturn this._limitData[limitName];\n};\n\n\nmodule.exports = DOFInfo;\n"],"sourceRoot":"/source/"}