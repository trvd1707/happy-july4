{"version":3,"sources":["ifr-motion/feedback/TrajectoryControllerSim.js"],"names":[],"mappings":"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","file":"ifr-motion/feedback/TrajectoryControllerSim.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\nvar AccelPlanner = require(\"../base/AccelPlanner\");\nvar Clock = require(\"../../ifr-core/Clock\");\nvar CyclicMath = require(\"../base/CyclicMath\");\nvar slog = require(\"../../ifr-core/SLog\");\n\n/**\n *\n * All arguments optional. Initial position/velocity can be provided here.\n * If this plan is sampled before any updateCommand's are issued, it will\n * be traveling at initialVelocity from initialPosition with zero acceleration.\n *\n * @param {number} [initialPosition] - defaults to 0\n * @param {number} [initialVelocity] - defaults to 0\n * @param {Time} [initialTime] - defaults to current time\n * @constructor\n */\nvar TrajectoryControllerSim = function(initialPosition, initialVelocity,\n\t\t\t\t\t\t\t\t\t\tinitialTime){\n\tif(initialPosition == null){ //null or undefined (eqnull)\n\t\tinitialPosition = 0;\n\t}\n\tif(initialVelocity == null){\n\t\tinitialVelocity = 0;\n\t}\n\tif(initialTime == null){\n\t\tinitialTime = Clock.currentTime();\n\t}\n\t/** @type {AccelPlanner} */\n\tthis._planner = new AccelPlanner();\n\t/** @type {AccelPlan} */\n\tthis._plan = this._planner.computeWithZeroAccel(initialVelocity);\n\t/** @type {Time} */\n\tthis._planStartTime = initialTime;\n\t/** @type {number} */\n\tthis._planStartPosition = initialPosition;\n};\n\n/**\n *\n * @param {number} targetPosition\n * @param {number} targetVelocity\n * @param {number} interceptInSeconds\n * @param {number} maxAcceleration\n * @param {number} maxVelocity\n * @param {Time} [currentTime] - time to activate command (current time used if omitted)\n */\nTrajectoryControllerSim.prototype.updateCommand = function(targetPosition, targetVelocity, interceptInSeconds,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmaxAcceleration, maxVelocity,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentTime){\n\tif(currentTime == null){ //null or undefined (eqnull)\n\t\tcurrentTime = Clock.currentTime();\n\t}\n\n\tvar tDelta = currentTime.subtract(this._planStartTime);\n\n\tvar currentPosition = this._plan.displacementAtTime(tDelta) + this._planStartPosition;\n\tvar currentVelocity = this._plan.velocityAtTime(tDelta);\n\n\ttargetPosition = CyclicMath.closestEquivalentRotation(targetPosition, currentPosition);\n\n\tthis._plan = this._planner.computeWithMaxAccel(currentVelocity, targetVelocity,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttargetPosition - currentPosition,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmaxAcceleration, interceptInSeconds);\n\tif(!this._plan.isConsistent()){\n\t\tslog.error(\"Inconsistent plan with inputs: \" +\n\t\t\t\"\\n\\tcurrentVelocity:\"+currentVelocity+\" \" +\n\t\t\t\"\\n\\ttargetVelocity:\"+targetVelocity+\" \" +\n\t\t\t\"\\n\\tpDelta:\"+(targetPosition - currentPosition)+\" \" +\n\t\t\t\"\\n\\tmaxAcceleration:\"+maxAcceleration+\" \" +\n\t\t\t\"\\n\\tmaxVelocity:\"+maxVelocity);\n\t\tthis.plan = this._planner.computeWithMaxAccel(0, 0, 0, 1, 1);\n\t}\n\tthis._planStartTime = currentTime;\n\tthis._planStartPosition = currentPosition;\n};\n\n/**\n * @param {Time} [currentTime] - time at which to get position (current time used if omitted)\n * @return {number}\n */\nTrajectoryControllerSim.prototype.getPosition = function(currentTime){\n\tif(currentTime == null){ //null or undefined (eqnull)\n\t\tcurrentTime = Clock.currentTime();\n\t}\n\n\tvar tDelta = currentTime.subtract(this._planStartTime);\n\n\tvar currentPosition = this._plan.displacementAtTime(tDelta) + this._planStartPosition;\n\treturn currentPosition;\n};\n\n/**\n * @param {Time} [currentTime] - time at which to get velocity (current time used if omitted)\n * @return {number}\n */\nTrajectoryControllerSim.prototype.getVelocity = function(currentTime){\n\tif(currentTime == null){ //null or undefined (eqnull)\n\t\tcurrentTime = Clock.currentTime();\n\t}\n\n\tvar tDelta = currentTime.subtract(this._planStartTime);\n\n\tvar currentVelocity = this._plan.velocityAtTime(tDelta);\n\treturn currentVelocity;\n};\n\nmodule.exports = TrajectoryControllerSim;"],"sourceRoot":"/source/"}