{"version":3,"sources":["ifr-motion/lookat/PlaneDisplacementLookatDOF.js"],"names":[],"mappings":"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","file":"ifr-motion/lookat/PlaneDisplacementLookatDOF.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\nvar PointADOF = require(\"./PointADOF\");\nvar LookatDOF = require(\"./LookatDOF\");\n\n/**\n *\n * @param {string} name\n * @param {string} controlledDOFName - should be a single translation dof\n * @param {string} centralTransformName - transform to use as anchor for angle computations\n * @param {THREE.Vector3} forwardDirection - forward from centralTransform\n * @param {THREE.Vector3} planeNormal - normal to restrict targets to plane (so motion is along single axis, e.g., left/right, up/down)\n * @param {number} internalDistance - distance behind (along -forward) centralTransform to be calculating angles from\n * @param {number} dofMin - value will be clamped to min, and max-min will be used for error ratio\n * @param {number} dofMax - value will be clamped to max, and max-min will be used for error ratio\n * @extends LookatDOF\n * @constructor\n */\nvar PlaneDisplacementLookatDOF = function(name, controlledDOFName, centralTransformName,\n\t\t\t\t\t\t\t\t\t\t\tforwardDirection, planeNormal, internalDistance,\n\t\t\t\t\t\t\t\t\t\t\tdofMin, dofMax){\n\tLookatDOF.call(this, name, controlledDOFName);\n\n\t/** @type {TranslationControl} */\n\tthis._control = null;\n\n\t/**\t@type {THREE.Vector3} */\n\tthis._forwardDir = forwardDirection;\n\n\t/**\t@type {string} */\n\tthis._centralTransformName = centralTransformName;\n\n\t/**\t@type number */\n\tthis._internalDistance = internalDistance;\n\n\n\t/** @type {THREE.Object3D} */\n\tthis._planeNormal = planeNormal;\n\n\t/** @type {THREE.Object3D} */\n\tthis._controlledTransform = null;\n\n\t/** @type {THREE.Object3D} */\n\tthis._centralTransform = null;\n\n\t/** @type {number} */\n\tthis._dofMin = dofMin;\n\n\t/** @type {number} */\n\tthis._dofMax = dofMax;\n};\n\nPlaneDisplacementLookatDOF.prototype = Object.create(LookatDOF.prototype);\nPlaneDisplacementLookatDOF.prototype.constructor = PlaneDisplacementLookatDOF;\n\n/**\n * @param {KinematicGroup} kinematicGroup group to use for kinematic math (assumed to be configured as desired before valToPointAtTarget calls)\n */\nPlaneDisplacementLookatDOF.prototype.connectToGroup = function(kinematicGroup){\n\tLookatDOF.prototype.connectToGroup.call(this, kinematicGroup);\n\tif(this._kinematicGroup) {\n\t\tthis._control = this._kinematicGroup.getModelControlGroup().getControlForDOF(this._controlledDOFName);\n\t\tthis._controlledTransform = this._kinematicGroup.getTransform(this._control.getTransformName());\n\t\tthis._centralTransform = this._kinematicGroup.getTransform(this._centralTransformName);\n\t}else{\n\t\tthis._control = null;\n\t\tthis._controlledTransform = null;\n\t\tthis._centralTransform = null;\n\t}\n};\n\n\n/**\n * Compute value is relative to current setup of the hierarchy that this._transform is part of.\n *\n * @param {THREE.Vector2} target\n * @param {PointReport} [pointReport] - inplace arg to return metadata about computation\n * @return {number} Value to cause this._control to point local this._forwardDir at the target\n * @override\n */\nPlaneDisplacementLookatDOF.prototype.valToPointAtTarget = function(target, pointReport){\n\tvar val = PointADOF.planeIntersectFromRear(this._centralTransform, target, null, this._forwardDir, this._planeNormal, this._internalDistance, pointReport);\n\treturn Math.max(Math.min(val,this._dofMax), this._dofMin);\n};\n\n/**\n * Provide the ratio that this error represents for the range of motion of this LookatDOF\n * @param errorAbsolute absolute error\n * @return {number} ratio that absoluteError represents of the total range of this LookatDOF\n * @override\n */\nPlaneDisplacementLookatDOF.prototype.errorRatio = function(errorAbsolute){\n\treturn Math.abs(errorAbsolute / (this._dofMax-this._dofMin));\n};\n\n\nPlaneDisplacementLookatDOF.prototype.suggestForwardTarget = function(inplaceVec){\n\tif(this._centralTransform == null){\n\t\treturn null;\n\t}else{\n\t\tinplaceVec.copy(this._forwardDir);\n\t\tinplaceVec.multiplyScalar(10);\n\t\tthis._centralTransform.localToWorld(inplaceVec);\n\t\treturn inplaceVec;\n\t}\n};\n\nmodule.exports = PlaneDisplacementLookatDOF;\n"],"sourceRoot":"/source/"}