{"version":3,"sources":["ifr-motion/lookat/trackpolicy/LookatNodeTrackPolicy.js"],"names":[],"mappings":"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","file":"ifr-motion/lookat/trackpolicy/LookatNodeTrackPolicy.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\nvar TrackPolicyTrigger = require(\"./TrackPolicyTrigger\");\n/**\n * Enum Values for track mode, informs Lookat to go to target or delay motion.\n * @enum {string}\n */\nvar TrackMode = {\n\t/**\n\t * Go to target\n\t */\n\tTRACK: \"TRACK\",\n\t/**\n\t * Go to target, hint that target is a large motion away\n\t */\n\tTRACK_SACCADE: \"TRACK_SACCADE\",\n\t/**\n\t * Hold current position, no definite future motion planned\n\t */\n\tHOLD: \"HOLD\",\n\t/**\n\t * Hold current position, expecting to move in time\n\t */\n\tDELAY: \"DELAY\"\n};\n\n\n/**\n * This class is responsible for computing the track state for a single lookat node based on the\n * policy for that particular node.  For example, one node may immediately track towards targets\n * that are sufficiently far away, but ignore small changes in the target position, while another node\n * might track towards any deviation no matter how small.\n *\n * Along with tracking vs holding, the policy can provide hints that help with events and other lookat behavior.\n * track can be TRACK or TRACK_SACCADE; both indicate that the node should track, but the latter indicates\n * a motion to new/distant target, and could be a good time to trigger additional behavior such as a blink.\n * Hold can be HOLD or DELAY; both indicate that the node should hold, but the latter indicates that the policy\n * is expecting to move and is waiting for time to pass first, so behaviors waiting for a lookat to fully\n * complete may want to consider this node as still \"in progress\" even though it is not yet moving.\n *\n * @param {TrackPolicyTrigger[]} checkers\n * @constructor\n */\nvar LookatNodeTrackPolicy = function(checkers){\n\t/** @type {TrackMode|string}\n\t * @private */\n\tthis._currentMode = TrackMode.HOLD;\n\n\t/** @type {TrackPolicyTrigger[]}\n\t * @private */\n\tthis._checkers = checkers;\n\n\t/** @type {Time}\n\t * @private */\n\tthis._lastTime = null;\n\n};\n\nLookatNodeTrackPolicy.TrackMode = TrackMode;\n\n\n/**\n *\n * @param {LookatNodeDistanceReport} lookatNodeDistanceReport distance report\n * @param {Time} currentTime time\n * @return {TrackMode}\n */\nLookatNodeTrackPolicy.prototype.computeMode = function(lookatNodeDistanceReport, time){\n\tvar startLaterIndicated = false;\n\tvar i;\n\n\tvar timeDelta = 0;\n\n\tif(this._lastTime !== null){\n\t\ttimeDelta = time.subtract(this._lastTime);\n\t}\n\n\tthis._lastTime = time;\n\n\tif(this._currentMode === TrackMode.HOLD){\n\t\tvar shouldStart = false;\n\t\tfor(i = 0; i < this._checkers.length; i++){\n\t\t\tvar startChecker = this._checkers[i];\n\t\t\tvar startStatus = startChecker.shouldStartTracking(lookatNodeDistanceReport, timeDelta);\n\t\t\tif(startStatus === TrackPolicyTrigger.StartStatus.YES){\n\t\t\t\tshouldStart = true;\n\t\t\t}\n\t\t\tif(startStatus === TrackPolicyTrigger.StartStatus.LATER){\n\t\t\t\tstartLaterIndicated = true;\n\t\t\t}\n\t\t}\n\t\tif(shouldStart){\n\t\t\tthis._start(time);\n\t\t}\n\t}else if(this._currentMode === TrackMode.TRACK){\n\t\tvar anyWishToContinue = false;\n\t\tfor(i = 0; i < this._checkers.length; i++){\n\t\t\tvar stopChecker = this._checkers[i];\n\t\t\tvar stopStatus = stopChecker.shouldStopTracking(lookatNodeDistanceReport, timeDelta);\n\t\t\tif(stopStatus === false) {\n\t\t\t\tanyWishToContinue = true;\n\t\t\t}\n\t\t}\n\t\tif(!anyWishToContinue){\n\t\t\tthis._stop(time);\n\t\t}\n\t}\n\n\tif(this._currentMode === TrackMode.HOLD && startLaterIndicated){\n\t\treturn TrackMode.DELAY;\n\t}else{\n\t\treturn this._currentMode;\n\t}\n};\n\n//TODO: when do we reset??\nLookatNodeTrackPolicy.prototype.reset = function(){\n\tfor(var i = 0; i < this._checkers.length; i++){\n\t\tthis._checkers[i].reset();\n\t}\n\tthis._lastTime = null;\n};\n\n/**\n * @param time\n * @private\n */\nLookatNodeTrackPolicy.prototype._start = function(time){ // eslint-disable-line no-unused-vars\n\tthis._currentMode = TrackMode.TRACK;\n\tthis.reset();\n};\n\n/**\n * @param time\n * @private\n */\nLookatNodeTrackPolicy.prototype._stop = function(time){ // eslint-disable-line no-unused-vars\n\tthis._currentMode = TrackMode.HOLD;\n\tthis.reset();\n};\n\n\n\nmodule.exports = LookatNodeTrackPolicy;"],"sourceRoot":"/source/"}