{"version":3,"sources":["ifr-motion/dofs/RotationControl.js"],"names":[],"mappings":"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","file":"ifr-motion/dofs/RotationControl.js","sourcesContent":["/**\n * @author mattb\n * Copyright 2014 IF Robots LLC\n */\n\n\"use strict\";\n\n\nvar ModelControl = require(\"./ModelControl\");\nvar ModelControlFactory = require(\"./ModelControlFactory\");\nvar BasicFrame = require(\"../../ifr-geometry/BasicFrame\");\nvar THREE = require(\"three\");\n\n/**\n * @constructor\n * @extends ModelControl\n */\nvar RotationControl = function()\n{\n\tModelControl.call(this);\n\n\t/** @type {string} */\n\tthis._skeletonFrameName = null;\n\n\t/** @type {THREE.Vector3} */\n\tthis._rotationalAxis = new THREE.Vector3();\n\t/** @type {THREE.Quaternion} */\n\tthis._initialRotation = new THREE.Quaternion();\n\n\t/** @type {number} */\n\tthis._min = null;\n\t/** @type {number} */\n\tthis._max = null;\n\n\t/** @type {boolean} */\n\tthis._isCyclic = false;\n\n\t/** @type {THREE.Object3D} */\n\tthis._skeletonFrame = null;\n};\n\nRotationControl.prototype = Object.create(ModelControl.prototype);\nRotationControl.prototype.constructor = RotationControl;\nRotationControl.prototype._controlType = \"ROTATION\";\n\n/**\n * @param {Object} jsonData\n * @override\n */\nRotationControl.prototype.setFromJson = function(jsonData)\n{\n\tModelControl.prototype.setFromJson.call(this, jsonData);\n\n\tthis._dofNames.push(jsonData.dofName);\n\tthis._skeletonFrameName = jsonData.skeletonFrameName;\n\tthis._rotationalAxis.copy(BasicFrame.vector3FromJson(jsonData.xyzRotationAxis));\n\tthis._initialRotation.copy(BasicFrame.quaternionFromJson(jsonData.wxyzQuatInitialRotation));\n\tthis._min = jsonData.min;\n\tthis._max = jsonData.max;\n\tthis._isCyclic = jsonData.isCyclic | false;\n};\n\n/**\n * @param {Object.<string, THREE.Object3D>} modelMap\n * @return {!boolean}\n * @override\n */\nRotationControl.prototype.attachToModel = function(modelMap)\n{\n\tthis._skeletonFrame = null;\n\n\tif (modelMap!=null && modelMap.hasOwnProperty(this._skeletonFrameName))\n\t{\n\t\tthis._skeletonFrame = modelMap[this._skeletonFrameName];\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n\n/**\n * @param {number} dofValue\n */\nfunction updateFromDOFVal(dofValue) {\n\t//dofValue = THREE.Math.clamp(dofValue, this._min, this._max);\n\tvar rotationAroundAxis = new THREE.Quaternion().setFromAxisAngle(this._rotationalAxis, dofValue);\n\tthis._skeletonFrame.quaternion.multiplyQuaternions(this._initialRotation, rotationAroundAxis);\n}\n\n\n/**\n * @param {Object.<string, Object>} dofValues\n * @return {!boolean}\n * @override\n */\nRotationControl.prototype.updateFromDOFValues = function(dofValues)\n{\n\tif (this._skeletonFrame && dofValues.hasOwnProperty(this._dofNames[0]))\n\t{\n\t\tvar dofValue = dofValues[this._dofNames[0]];\n\n\t\tupdateFromDOFVal.call(this, dofValue);\n\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * @param {Pose} pose\n * @return {!boolean}\n * @override\n */\nRotationControl.prototype.updateFromPose = function(pose)\n{\n\tvar dofValue = pose.get(this._dofNames[0], 0);\n\tif (this._skeletonFrame && (dofValue != null)) //null or undefined (eqnull)\n\t{\n\t\tupdateFromDOFVal.call(this, dofValue);\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n\n\n/**\n * @param {THREE.Vector3 } inplaceVector3 - new vector will be created if null or omitted\n * @return {!THREE.Vector3} the rotational axis.  will be === inplaceVector3 if provided\n */\nRotationControl.prototype.getRotationalAxis = function(inplaceVector3)\n{\n\tif(inplaceVector3 == null){ //null or undefined (eqnull)\n\t\tinplaceVector3 = new THREE.Vector3();\n\t}\n\treturn inplaceVector3.copy(this._rotationalAxis);\n};\n\n/**\n * @param {THREE.Quaternion } inplaceQuaternion - new vector will be created if null or omitted\n * @return {!THREE.Quaternion} the initial rotation.  will be === inplaceQuaternion if provided\n */\nRotationControl.prototype.getInitialRotation = function(inplaceQuaternion)\n{\n\tif(inplaceQuaternion == null){ //null or undefined (eqnull)\n\t\tinplaceQuaternion = new THREE.Quaternion();\n\t}\n\treturn inplaceQuaternion.copy(this._initialRotation);\n};\n\n/**\n * @returns {number}\n */\nRotationControl.prototype.getMin = function(){\n\treturn this._min;\n};\n\n/**\n * @returns {number}\n */\nRotationControl.prototype.getMax = function(){\n\treturn this._max;\n};\n\n/**\n * @returns {boolean}\n */\nRotationControl.prototype.isCyclic = function(){\n\treturn this._isCyclic;\n};\n\n/**\n * Creates a copy of this dof, or fills in this dof's data to the provided\n * argument (to allow type to be defined by subclass's getCopy).\n *\n * @param {RotationControl} copyInto - optional object to copy into\n * @return {RotationControl} copy of this dof, not attached to any model\n * @override\n */\nRotationControl.prototype.getCopy = function(copyInto)\n{\n\tif(!copyInto){\n\t\tcopyInto = new RotationControl();\n\t}\n\n\tModelControl.prototype.getCopy.call(this, copyInto);\n\n\tcopyInto._skeletonFrameName = this._skeletonFrameName;\n\n\tcopyInto._rotationalAxis = this._rotationalAxis?this._rotationalAxis.clone():null;\n\n\tcopyInto._initialRotation = this._initialRotation?this._initialRotation.clone():null;\n\n\tcopyInto._min = this._min;\n\n\tcopyInto._max = this._max;\n\n\tcopyInto._isCyclic = this._isCyclic;\n\n\treturn copyInto;\n};\n\n/**\n ** @returns {string}\n */\nRotationControl.prototype.getTransformName = function(){\n\treturn this._skeletonFrameName;\n};\n\n/**\n * @return {Array.<string>}\n * @override\n */\nRotationControl.prototype.getTransformNames = function(){\n\treturn [this.getTransformName()];\n};\n\n/**\n * @constructor\n */\nRotationControl.Factory = function()\n{\n};\n\nRotationControl.Factory.prototype = Object.create(ModelControlFactory.prototype);\nRotationControl.Factory.prototype.constructor = RotationControl.Factory;\nRotationControl.Factory.prototype._controlType = RotationControl.prototype._controlType;\nRotationControl.Factory.prototype._controlConstructor = RotationControl;\n\nmodule.exports = RotationControl;"],"sourceRoot":"/source/"}