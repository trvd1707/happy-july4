{"version":3,"sources":["geometry-info/RobotInfo.js"],"names":[],"mappings":";;;;AAIA;;AAEA,IAAI,aAAa,QAAQ,cAAR,CAAb;AACJ,IAAI,oBAAoB,QAAQ,qBAAR,CAApB;;AAEJ,IAAI,OAAO,QAAQ,kBAAR,CAAP;;AAEJ,IAAI,UAAU,eAAV;;;;;;;;;;;;;;AAcJ,IAAI,YAAY,SAAZ,SAAY,CAAS,UAAT,EAAqB,aAArB,EAAmC;;;AAGlD,OAAK,WAAL,GAAmB,UAAnB;;;AAHkD,MAMlD,CAAK,cAAL,GAAsB,aAAtB,CANkD;CAAnC;;;;;;;;;;;;;;;;;;AAyBhB,UAAU,UAAV,GAAuB,UAAS,UAAT,EAAqB,wBAArB,EAA8C;AACpE,MAAI,eAAe,SAAf,IAA4B,eAAe,IAAf,EAAoB;AACnD,iBAAa,IAAI,UAAJ,EAAb,CADmD;GAApD;AAGA,MAAI,gBAAgB,IAAI,iBAAJ,CAAsB,UAAtB,CAAhB,CAJgE;AAKpE,gBAAc,IAAd,CAAmB,YAAW;AAC7B,QAAI,cAAc,aAAd,EAA6B;AAChC,+BAAyB,IAAI,SAAJ,CAAc,UAAd,EAA0B,aAA1B,CAAzB,EADgC;KAAjC,MAEK;AACJ,WAAK,OAAL,EAAc,gCAA8B,cAAc,WAAd,CAA5C,CADI;AAEJ,+BAAyB,IAAzB,EAFI;KAFL;GADkB,CAAnB,CALoE;CAA9C;;;;;;AAmBvB,UAAU,SAAV,CAAoB,gBAApB,GAAuC,YAAU;AAChD,SAAO,KAAK,cAAL,CADyC;CAAV;;;;;;AAQvC,UAAU,SAAV,CAAoB,SAApB,GAAgC,YAAU;AACzC,SAAO,KAAK,WAAL,CADkC;CAAV;;;;;;AAQhC,UAAU,SAAV,CAAoB,eAApB,GAAsC,YACtC;AACC,SAAO,KAAK,cAAL,CAAoB,eAApB,EAAP,CADD;CADsC;;;;;;AAStC,UAAU,SAAV,CAAoB,cAApB,GAAqC,YACrC;AACC,SAAO,KAAK,cAAL,CAAoB,cAApB,EAAP,CADD;CADqC;;;;;;AASrC,UAAU,SAAV,CAAoB,WAApB,GAAkC,YAClC;AACC,SAAO,KAAK,cAAL,CAAoB,WAApB,EAAP,CADD;CADkC;;;;;;;AAUlC,UAAU,SAAV,CAAoB,gBAApB,GAAuC,YACvC;AACC,SAAO,KAAK,cAAL,CAAoB,gBAApB,EAAP,CADD;CADuC;;;;;;;AAUvC,UAAU,SAAV,CAAoB,UAApB,GAAiC,UAAS,OAAT,EACjC;AACC,SAAO,KAAK,cAAL,CAAoB,mBAApB,GAA0C,UAA1C,CAAqD,OAArD,CAAP,CADD;CADiC;;;;;;AASjC,UAAU,SAAV,CAAoB,mBAApB,GAA0C,YAC1C;;AAEC,MAAI,YAAY,EAAZ,CAFL;;AAIC,MAAI,cAAc,KAAK,cAAL,CAAoB,cAApB,EAAd,CAJL;AAKC,MAAI,WAAW,KAAK,WAAL,EAAX,CALL;AAMC,OAAK,IAAI,WAAS,CAAT,EAAY,WAAS,SAAS,MAAT,EAAiB,UAA/C,EACA;AACC,QAAI,UAAU,SAAS,QAAT,CAAV,CADL;AAEC,cAAU,OAAV,IAAqB,YAAY,GAAZ,CAAgB,OAAhB,EAAyB,CAAzB,CAArB,CAFD;GADA;;AAMA,SAAO,SAAP,CAZD;CAD0C;;;;;;AAoB1C,UAAU,SAAV,CAAoB,cAApB,GAAqC,YACrC;AACC,SAAO,OAAO,IAAP,CAAY,KAAK,cAAL,CAAoB,UAApB,EAAZ,CAAP,CADD;CADqC;;;;;;;AAWrC,UAAU,SAAV,CAAoB,SAApB,GAAgC,UAAS,UAAT,EAChC;AACC,SAAO,KAAK,cAAL,CAAoB,UAApB,GAAiC,UAAjC,CAAP,CADD;CADgC;;AAOhC,OAAO,OAAP,GAAiB,SAAjB","file":"geometry-info/RobotInfo.js","sourcesContent":["/**\n * @author jg\n */\n\n\"use strict\";\n\nvar JiboConfig = require(\"./JiboConfig\");\nvar JiboKinematicInfo = require(\"./JiboKinematicInfo\");\n\nvar slog = require(\"../ifr-core/SLog\");\n\nvar channel = \"MODEL_LOADING\";\n\n/**\n * Protected constructor for internal use only.\n *\n * RobotInfo provides robot configuration info used by the animate module,\n * including DOF names, default values, and other geometric info. Typically accessed\n * via the animate module's [getRobotInfo]{@link module:jibo/animate#getRobotInfo} method.\n *\n * @param {JiboConfig} jiboConfig - Protected constructor parameter.\n * @param {JiboKinematicInfo} kinematicInfo - Protected constructor parameter.\n * @constructor\n * @protected\n */\nvar RobotInfo = function(jiboConfig, kinematicInfo){\n\t/** @type {JiboConfig} */\n\t/** @private */\n\tthis._jiboConfig = jiboConfig;\n\t/** @type {JiboKinematicInfo} */\n\t/** @private */\n\tthis._kinematicInfo = kinematicInfo;\n};\n\n/**\n * @callback RobotInfoCreated\n * @param {RobotInfo} robotInfo - Loaded robot info or null.\n * @private\n */\n\n/**\n * Factory method to create a RobotInfo by loading data from the provided\n * jiboConfig. Callback will be called and will provide the loaded instance\n * as its first argument if loading is successful. Callback will be provided\n * null otherwise.\n *\n * @param {JiboConfig} jiboConfig - Configuration information to load.\n * @param {RobotInfoCreated} creationCompleteCallback - Callback to notify when loading is complete.\n * @private\n */\nRobotInfo.createInfo = function(jiboConfig, creationCompleteCallback){\n\tif (jiboConfig === undefined || jiboConfig === null){\n\t\tjiboConfig = new JiboConfig();\n\t}\n\tvar kinematicInfo = new JiboKinematicInfo(jiboConfig);\n\tkinematicInfo.load(function() {\n\t\tif (kinematicInfo.loadSucceeded) {\n\t\t\tcreationCompleteCallback(new RobotInfo(jiboConfig, kinematicInfo));\n\t\t}else{\n\t\t\tslog(channel, \"RobotInfo creation failed: \"+kinematicInfo.loadMessage);\n\t\t\tcreationCompleteCallback(null);\n\t\t}\n\t});\n};\n\n/**\n * @returns {JiboKinematicInfo}\n * @private\n */\nRobotInfo.prototype.getKinematicInfo = function(){\n\treturn this._kinematicInfo;\n};\n\n/**\n * @returns {JiboConfig}\n * @private\n */\nRobotInfo.prototype.getConfig = function(){\n\treturn this._jiboConfig;\n};\n\n/**\n * Returns the names of all of the DOFs in the robot's body.\n * @return {string[]}\n */\nRobotInfo.prototype.getBodyDOFNames = function()\n{\n\treturn this._kinematicInfo.getBodyDOFNames();\n};\n\n/**\n * Returns the names of all of the DOFs in the robot's eye/face.\n * @return {string[]}\n */\nRobotInfo.prototype.getEyeDOFNames = function()\n{\n\treturn this._kinematicInfo.getEyeDOFNames();\n};\n\n/**\n * Returns the full set of DOF names for the robot.\n * @return {string[]}\n */\nRobotInfo.prototype.getDOFNames = function()\n{\n\treturn this._kinematicInfo.getDOFNames();\n};\n\n/**\n * Returns info about the eye screen.\n * @return {EyeScreenInfo}\n * @private\n */\nRobotInfo.prototype.getEyeScreenInfo = function()\n{\n\treturn this._kinematicInfo.getEyeScreenInfo();\n};\n\n/**\n * Returns a DOFInfo report for the specified DOF.\n * @param {string} dofName DOF to return a DOFInfo report for.\n * @return {DOFInfo}\n */\nRobotInfo.prototype.getDOFInfo = function(dofName)\n{\n\treturn this._kinematicInfo.getFullControlGroup().getDOFInfo(dofName);\n};\n\n/**\n * Returns a map with the default values for all of the robot's DOFs.\n * @return {Object.<string, Object>}\n */\nRobotInfo.prototype.getDefaultDOFValues = function()\n{\n\t/** @type {Object.<string, Object>} */\n\tvar dofValues = {};\n\n\tvar defaultPose = this._kinematicInfo.getDefaultPose();\n\tvar dofNames = this.getDOFNames();\n\tfor (var dofIndex=0; dofIndex<dofNames.length; dofIndex++)\n\t{\n\t\tvar dofName = dofNames[dofIndex];\n\t\tdofValues[dofName] = defaultPose.get(dofName, 0);\n\t}\n\n\treturn dofValues;\n};\n\n/**\n * Returns the full set of DOFSet names for the robot.\n * @return {string[]} Names of DOFSets.\n */\nRobotInfo.prototype.getDOFSetNames = function()\n{\n\treturn Object.keys(this._kinematicInfo.getDOFSets());\n};\n\n\n/**\n * Returns the DOFSet specified by the given name.\n * @param {string} dofSetName - Name of DOFSet to get.\n * @return {DOFSet} DOFSet or null if not found.\n */\nRobotInfo.prototype.getDOFSet = function(dofSetName)\n{\n\treturn this._kinematicInfo.getDOFSets()[dofSetName];\n};\n\n\n\nmodule.exports = RobotInfo;\n"],"sourceRoot":"/source/"}