{"version":3,"sources":["geometry-info/EyeKinematicsHelper.js"],"names":[],"mappings":";;;;;AAKA;;AAEA,IAAI,qBAAqB,QAAQ,uCAAR,CAArB;;AAEJ,IAAI,sBAAsB,EAAtB;;;;;;;;;;;;;;;AAeJ,oBAAoB,oBAApB,GAA2C,UAAS,SAAT,EAAoB,SAApB,EAA8B;;AAExE,MAAI,kBAAkB,UAAU,gBAAV,GAA6B,kBAA7B,EAAlB,CAFoE;;AAIxE,MAAI,YAAY,EAAZ,CAJoE;AAKxE,MAAI,cAAc,gBAAgB,cAAhB,EAAd,CALoE;AAMxE,OAAI,IAAI,IAAI,CAAJ,EAAO,IAAI,YAAY,MAAZ,EAAoB,GAAvC,EAA2C;AAC1C,QAAI,UAAU,YAAY,CAAZ,CAAV,CADsC;AAE1C,QAAG,mBAAmB,kBAAnB,EAAsC;AACxC,gBAAU,QAAQ,kBAAR,CAAV,GAAwC,QAAQ,oBAAR,CAA6B,SAA7B,CAAxC,CADwC;KAAzC;GAFD;;AAOA,SAAO,SAAP,CAbwE;CAA9B;;AAgB3C,OAAO,OAAP,GAAiB,mBAAjB","file":"geometry-info/EyeKinematicsHelper.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\nvar TranslationControl = require(\"../ifr-motion/dofs/TranslationControl\");\n\nvar EyeKinematicsHelper = {};\n\n/**\n * Compute the vertex positions that would result from the given set of dof\n * values, and return them in a map (does not actually move the vertices).\n *\n * Keys of dofValues argument are expected to be DOF names; keys of the\n * returned map are the vertex names.\n *\n * Only gets values from TranslationControl types\n *\n * @param {Object.<string, Object>} dofValues\n * @param {RobotInfo} robotInfo - use the eye dof controls from this robot info to compute the values\n * @return {Object.<string, THREE.Vector3>} map from vertices to local positions\n */\nEyeKinematicsHelper.verticesForDOFValues = function(dofValues, robotInfo){\n\t/** @type {ModelControlGroup} */\n\tvar eyeControlGroup = robotInfo.getKinematicInfo().getEyeControlGroup();\n\n\tvar vertexMap = {};\n\tvar controlList = eyeControlGroup.getControlList();\n\tfor(var i = 0; i < controlList.length; i++){\n\t\tvar control = controlList[i];\n\t\tif(control instanceof TranslationControl){\n\t\t\tvertexMap[control._skeletonFrameName] = control.computeFromDOFValues(dofValues);\n\t\t}\n\t}\n\n\treturn vertexMap;\n};\n\nmodule.exports = EyeKinematicsHelper;"],"sourceRoot":"/source/"}