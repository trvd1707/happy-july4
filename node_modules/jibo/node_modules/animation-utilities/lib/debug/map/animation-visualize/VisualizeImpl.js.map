{"version":3,"sources":["animation-visualize/VisualizeImpl.js"],"names":[],"mappings":"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","file":"animation-visualize/VisualizeImpl.js","sourcesContent":["/**\n * @author mattb\n */\n\n\"use strict\";\n\nvar SceneInfo = require(\"../geometry-info/SceneInfo\");\nvar JiboBody = require(\"./JiboBody\");\nvar JiboEye = require(\"./JiboEye\");\nvar BasicScene = require(\"../ifr-visualizer/BasicScene\");\nvar CachedImageLoader = require(\"../ifr-geometry/loaders/CachedImageLoader\");\nvar THREE = require(\"three\");\nvar DefaultEyeLighting = require(\"./DefaultEyeLighting\");\nvar slog = require(\"../ifr-core/SLog\");\n\nvar channel = \"MODEL_LOADING\";\n\n\n/**\n * Protected constructor for internal use only.\n *\n * WebGL renderer displaying Jibo's eye and/or body.  Created via the visualize module's\n * [createRobotRenderer]{@link module:jibo/visualize.createRobotRenderer} method.\n *\n * @param {RobotInfo} robotInfo - Protected constructor parameter.\n * @param {BasicScene} rootScene - The BasicScene; may contain body scene if present, otherwise eye scene if eye-only.\n * @param {THREE.Scene} bodyScene - Body THREE scene; may be null if eye-only.\n * @param {THREE.Scene} eyeScene - Eye THREE scene; may be a sub-scene rendering to texture in body+eye.\n * @param {ModelControlGroup[]} modelControlGroups - Protected constructor parameter.\n * @param {CachedImageLoader} textureLoader - Protected constructor parameter.\n * @constructor\n * @protected\n */\nvar RobotRenderer = function(robotInfo, rootScene, bodyScene, eyeScene, modelControlGroups, textureLoader)\n{\n\t/** @type {RobotInfo} */\n\t/** @private */\n\tthis.robotInfo = robotInfo;\n\t/** @type {BasicScene} */\n\t/** \"main\" scene: bodyScene if we are body, eye scene if we are eye-only */\n\t/** @private */\n\tthis.scene = rootScene;\n\t/** @type {ModelControlGroup[]} */\n\t/** @private */\n\tthis.modelControlGroups = modelControlGroups;\n\t/** @type {CachedImageLoader} */\n\t/** @private */\n\tthis.textureLoader = textureLoader;\n\t/** @type {THREE.GridHelper} */\n\t/** @private */\n\tthis.grid = null;\n\n\t/** @type {string[]} */\n\t/** @private */\n\tthis.renderedDOFs = [];\n\n\t/** Used for tracking if dof has moved in trackDOFDirty mode\n\t *   Indexed by rendererDOFs\n\t * @type {number[]} */\n\t/** @private */\n\tthis.dofLastValues = [];\n\n\t/** Used for determining which dofs are numeric (for using epsilon distance) in trackDOFDirty mode.\n\t *   Indexed by rendererDOFs\n\t * @type {boolean[]} */\n\t/** @private */\n\tthis.dofIsMetric = [];\n\n\tfor(var i = 0; i < this.modelControlGroups.length; i++){\n\t\tvar groupIDOFNames = this.modelControlGroups[i].getDOFNames();\n\t\tfor(var di = 0; di < groupIDOFNames.length; di++){\n\t\t\tvar dofName = groupIDOFNames[di];\n\t\t\tif(this.renderedDOFs.indexOf(dofName)<0){\n\t\t\t\tthis.renderedDOFs.push(dofName);\n\t\t\t\tthis.dofLastValues.push(Infinity); //starting value that will necessitate a first update no matter what\n\t\t\t\tthis.dofIsMetric.push(robotInfo.getDOFInfo(dofName).isMetric());\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Used for measuring distance in trackDOFDirty mode\n\t * @type {number} */\n\t/** @private */\n\tthis.dofChangeEpsilon = 0.0001;\n\n\t/** @type {boolean} */\n\t/** @private */\n\tthis.trackDOFDirtyStatus = false;\n\n\n\t/** @type {Object.<string,RenderPlugin>} */\n\t/** @private */\n\tthis.renderPlugins = {};\n\n\t/** @type {THREE.Scene} */\n\t/** @private */\n\tthis.bodyScene = bodyScene;\n\n\t/** @type {THREE.Scene} */\n\t/** @private */\n\tthis.eyeScene = eyeScene;\n\n\tthis.display(this.robotInfo.getDefaultDOFValues());\n\n\tif (this.scene.getContainer() !== null)\n\t{\n\t\tthis.scene.play();\n\t}\n};\n\n/**\n * Set this to true to only render graphics when a dof value has changed.\n *\n * @param {boolean} renderOnlyWhenDirty\n */\nRobotRenderer.prototype.setRenderOnlyWhenDirty = function(renderOnlyWhenDirty){\n\tthis.trackDOFDirtyStatus = renderOnlyWhenDirty;\n\tthis.scene.setRenderOnlyWhenDirty(renderOnlyWhenDirty);\n};\n\n/**\n * @param {number} renderEveryNFrames - Render at most once every renderEveryNFrames frames (1 means render every time)\n */\nRobotRenderer.prototype.setRenderEveryNFrames = function(renderEveryNFrames) {\n\tthis.scene.setRenderEveryNFrames(renderEveryNFrames);\n};\n\n\n/**\n * Updates the display according to the specified values.\n * @param {Object.<string, Object>} dofValues - Update display according to these values.\n */\nRobotRenderer.prototype.display = function(dofValues)\n{\n\tvar shouldUpdate = true;\n\n\t//if we are tracking dirty status, find out if any dof values\n\t// (that we use) have changed, pass that info through to the BasicScene,\n\t// and skip updating if nothing has changed.\n\tif(this.trackDOFDirtyStatus){\n\t\tvar aDOFMoved = false;\n\t\tvar e = this.dofChangeEpsilon;\n\t\tfor (var j = 0; j < this.renderedDOFs.length; j++) {\n\t\t\tvar newValue = dofValues[this.renderedDOFs[j]];\n\t\t\tvar oldValue = this.dofLastValues[j];\n\t\t\tif(newValue !== oldValue){\n\t\t\t\tif(this.dofIsMetric[j]){\n\t\t\t\t\tif(Math.abs(oldValue - newValue) > e){\n\t\t\t\t\t\taDOFMoved = true;\n\t\t\t\t\t\tthis.dofLastValues[j] = newValue;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\taDOFMoved = true;\n\t\t\t\t\tthis.dofLastValues[j] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (aDOFMoved) {\n\t\t\t//shouldUpdate = true; //implied\n\t\t\tthis.scene.markDirty();\n\t\t}else{\n\t\t\tshouldUpdate = false;\n\t\t}\n\t}\n\n\t//this.displayRawCounter = this.displayRawCounter+1;\n\t//if(shouldUpdate){\n\t//\tthis.displayActualCounter = this.displayActualCounter+1;\n\t//}\n\t//if(this.displayRawCounter > 200 || isNaN(this.displayRawCounter)){\n\t//\tconsole.log(\"Drew \"+(this.displayActualCounter/this.displayRawCounter).toFixed(2));\n\t//\tthis.displayActualCounter = 0;\n\t//\tthis.displayRawCounter = 0;\n\t//}\n\t//\n\n\tif(shouldUpdate) {\n\t\tvar i;\n\t\tfor (i = 0; i < this.modelControlGroups.length; i++) {\n\t\t\tthis.modelControlGroups[i].updateFromDOFValues(dofValues);\n\t\t}\n\n\t\tvar renderPluginNames = Object.keys(this.renderPlugins);\n\t\tfor (i = 0; i < renderPluginNames.length; i++) {\n\t\t\t//Note: this will only be new dof values.  is there a case where\n\t\t\t// people pass in partial dof value maps, and we want to pass in ALL dof values here?\n\t\t\t// (keep a cached map?)\n\t\t\tthis.renderPlugins[renderPluginNames[i]].update(this.bodyScene, this.eyeScene, dofValues);\n\t\t}\n\t}\n};\n\n/**\n * @param {string} uri - A uri of a texture to pre-load to prepare for displaying.\n */\nRobotRenderer.prototype.loadTexture = function(uri)\n{\n\tthis.textureLoader.loadImage(uri);\n};\n\n/**\n * Sets background color of the gl view.\n *\n * @param {number} r - Red (0-1).\n * @param {number} g - Green (0-1).\n * @param {number} b - Blue (0-1).\n * @param {number} [a] - Alpha (0-1); defaults to 1.\n */\nRobotRenderer.prototype.setBackgroundColor = function(r,g,b,a)\n{\n\tif(!a){\n\t\ta = 1;\n\t}\n\tthis.scene.getRenderer().setClearColor(new THREE.Color(r,g,b), a);\n};\n\n/**\n * Sets the camera parameters for the GL view.\n * @param {THREE.Vector3} position - Position of the camera\n * @param {THREE.Vector3} [lookat] - Position of the camera's look-at target; defaults to origin.\n * @param {number} [fov] - Camera field of view in degrees; defaults to 45 degrees.\n */\nRobotRenderer.prototype.setCamera = function(position, lookat, fov)\n{\n\tvar pos = position;\n\tvar look = lookat ? lookat : new THREE.Vector3();\n\tvar f = fov ? fov : 45;\n\n\tthis.scene.getCamera().position.copy(pos);\n\tthis.scene.getTrackballControls().target.copy(look);\n\tthis.scene.getCamera().fov = f;\n\tthis.scene.getCamera().updateProjectionMatrix();\n};\n\n/**\n * Sets parameters for a ground-plane grid.\n * @param {number} stepSize - Spacing between gridlines.\n * @param {number} stepsFromCenter - Number of grid steps from the origin.\n * @param {THREE.Color} lineColor - Gridline color.\n */\nRobotRenderer.prototype.setGrid = function(stepSize, stepsFromCenter, lineColor)\n{\n\tif (this.grid !== null)\n\t{\n\t\tthis.scene.getScene().remove(this.grid);\n\t}\n\n\tthis.grid = new THREE.GridHelper(stepsFromCenter*stepSize, stepSize);\n\tthis.grid.quaternion.setFromAxisAngle(new THREE.Vector3(1,0,0), Math.PI/2);\n\tthis.grid.setColors(lineColor, lineColor);\n\tthis.scene.getScene().add(this.grid);\n};\n\n/**\n * Removes the renderer from the DOM and stop all associated computation and event handling.\n * Rendering can be resumed via the attachToContainer method.\n */\nRobotRenderer.prototype.detachFromContainer = function()\n{\n\tthis.scene.detachFromContainer();\n};\n\n/**\n * Attaches the renderer to the given DOM element and begins/resumes rendering and event handling.\n * @param {Element} domElement - Container element where renderer will be installed; can be null.\n */\nRobotRenderer.prototype.attachToContainer = function(domElement)\n{\n\tif (this.scene.getContainer() !== null)\n\t{\n\t\tthis.detachFromContainer();\n\t}\n\n\tthis.scene.attachToContainer(domElement);\n\n\tif (this.scene.getContainer() !== null)\n\t{\n\t\tthis.scene.play();\n\t}\n};\n\n/**\n * Permanently removes the renderer from the DOM and release its resources.\n */\nRobotRenderer.prototype.dispose = function()\n{\n\tif (this.scene !== null)\n\t{\n\t\tthis.scene.dispose();\n\t\tthis.scene = null;\n\t}\n\tthis.robotInfo = null;\n\tthis.modelControlGroups = [];\n\tthis.textureLoader = null;\n\tthis.grid = null;\n};\n\n/**\n * Removes the mouse-based camera controls, if installed.\n */\nRobotRenderer.prototype.removeCameraControls = function()\n{\n\tthis.scene.removeTrackballControls();\n};\n\n/**\n * Installs this render plugin. If a plugin with the same name is already installed, that\n * plugin will be uninstalled first.\n * @param {RenderPlugin} renderPlugin - Plugin to install.\n */\nRobotRenderer.prototype.installRenderPlugin = function(renderPlugin){\n\tvar name = renderPlugin.getName();\n\tif(this.renderPlugins.hasOwnProperty(name)){\n\t\tthis.renderPlugins[name].uninstall(this.bodyScene, this.eyeScene);\n\t}\n\trenderPlugin.install(this.bodyScene, this.eyeScene);\n\tthis.renderPlugins[name] = renderPlugin;\n};\n\n/**\n * Removes named RenderPlugin. [uninstall()]{@link RenderPlugin#uninstall} will be called on the plugin.\n *\n * @param {string} renderPluginName Plugin to remove.\n */\nRobotRenderer.prototype.removeRenderPlugin = function(renderPluginName){\n\tif(this.renderPlugins.hasOwnProperty(renderPluginName)){\n\t\tthis.renderPlugins[renderPluginName].uninstall(this.bodyScene, this.eyeScene);\n\t\tdelete this.renderPlugins[renderPluginName];\n\t}\n};\n\n/**\n * Gets the names of all installed RenderPlugins.\n * @returns {string[]} An array of the names of all installed RenderPlugins.\n */\nRobotRenderer.prototype.getInstalledRenderPluginNames = function(){\n\treturn Object.keys(this.renderPlugins);\n};\n\n\n\n/**\n * @description\n * Graphical Display/Visualization API, including API for creating/controlling\n * THREE renderers of Jibo's eye or entire body.\n *\n * ```\n * var jibo = require(\"jibo\");\n * jibo.visualize.createRobotRenderer(eyeContainerElement, jibo.visualize.DisplayType.EYE);\n * ```\n * @module jibo/visualize\n */\n\nvar visualize = {\n\n\t/**\n\t * @callback RobotRendererCreatedCallback\n\t * @param {RobotRenderer} robotRenderer - The RobotRenderer or null on failure.\n\t */\n\n\t/**\n\t * Creates a renderer bound to the given DOM element. Use to make the various renderers\n\t * in SDK mode. In robot mode, there will be a single renderer for the eye screen, which\n\t * can be accessed via \"getEye\" below.\n\t *\n\t * @function createRobotRenderer\n\t * @param {RobotInfo} robotInfo\n\t * @param {Element} domElement - Container element where THREE renderer will be installed (can be null).\n\t * @param {module:jibo/visualize~DisplayType} displayType - Type of display; \"BODY\" or \"EYE\".\n\t * @param {module:jibo/visualize~RobotRendererCreatedCallback} cb - Callback; receives newly-created RobotRenderer instance, or null if creation failed.\n\t * @static\n\t */\n\tcreateRobotRenderer: function(robotInfo, domElement, displayType, cb)\n\t{\n\t\tvar config = robotInfo.getConfig();\n\n\t\t/** @type {BasicScene} */\n\t\tvar scene = null;\n\t\t/** @type {ModelControlGroup[]} */\n\t\tvar modelControlGroups = [];\n\t\tvar textureLoader = new CachedImageLoader();\n\n\t\tvar robotRenderer = null;\n\n\t\tvar sceneInfo = new SceneInfo();\n\t\tsceneInfo.load(config.getSceneInfoURL(), function()\n\t\t{\n\t\t\tif (sceneInfo.loadSucceeded)\n\t\t\t{\n\t\t\t\tvar jiboEye = new JiboEye(config);\n\t\t\t\tjiboEye.load(function()\n\t\t\t\t{\n\t\t\t\t\tif (jiboEye.loadSucceeded)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodelControlGroups.push(jiboEye.getModelControlGroup());\n\t\t\t\t\t\tif (displayType === visualize.DisplayType.EYE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tscene = new BasicScene(domElement, false, false, new THREE.Color(0, 0, 0));\n\n\t\t\t\t\t\t\tscene._camera = jiboEye.constructCamera(sceneInfo);\n\t\t\t\t\t\t\tscene._scene = jiboEye.constructScene();\n\n\t\t\t\t\t\t\trobotRenderer = new RobotRenderer(robotInfo, scene, null, scene._scene, modelControlGroups, textureLoader);\n\t\t\t\t\t\t\trobotRenderer.installRenderPlugin(new DefaultEyeLighting());\n\t\t\t\t\t\t\tif (cb)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcb(robotRenderer);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar jiboBody = new JiboBody(config);\n\t\t\t\t\t\t\tjiboBody.load(function()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (jiboBody.loadSucceeded)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmodelControlGroups.push(jiboBody.getModelControlGroup());\n\n\t\t\t\t\t\t\t\t\tscene = new BasicScene(domElement, false, false, new THREE.Color(0, 0, 0.3));\n\t\t\t\t\t\t\t\t\tscene.getCamera().up = new THREE.Vector3(0,0,1);\n\t\t\t\t\t\t\t\t\tscene.installTrackballControls();//do this after we set the camera up\n\n\t\t\t\t\t\t\t\t\t// lighting\n\t\t\t\t\t\t\t\t\tscene.getDirectionalLight().intensity = 0.5;\n\t\t\t\t\t\t\t\t\tscene.getDirectionalLight().position.set(1, -1, 1);\n\n\t\t\t\t\t\t\t\t\tvar light2 = new THREE.DirectionalLight(0xffffff, 0.5);\n\t\t\t\t\t\t\t\t\tlight2.position.set(1, 1, 1);\n\t\t\t\t\t\t\t\t\tscene.getScene().add(light2);\n\t\t\t\t\t\t\t\t\tvar light3 = new THREE.DirectionalLight(0xffffff, 0.5);\n\t\t\t\t\t\t\t\t\tlight3.position.set(-1, 0, 1);\n\t\t\t\t\t\t\t\t\tscene.getScene().add(light3);\n\n\t\t\t\t\t\t\t\t\tvar modelRoot = jiboBody.getModelRoot();\n\t\t\t\t\t\t\t\t\t//modelRoot.position.z = 1.905/100; //in model now\n\t\t\t\t\t\t\t\t\tscene.getScene().add(modelRoot);\n\n\t\t\t\t\t\t\t\t\tvar eyeScene = jiboEye.constructScene();\n\t\t\t\t\t\t\t\t\tvar eyeCamera = jiboEye.constructCamera(sceneInfo);\n\t\t\t\t\t\t\t\t\tvar eyeRenderTarget = jiboBody.constructFaceScreenRenderTarget(sceneInfo);\n\n\t\t\t\t\t\t\t\t\tvar sceneClearColor = new THREE.Color();\n\t\t\t\t\t\t\t\t\tvar screenClearColor = new THREE.Color(0,0,0);\n\n\t\t\t\t\t\t\t\t\tscene.addRenderCallback(function()\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar renderer = scene.getRenderer();\n\n\t\t\t\t\t\t\t\t\t\tsceneClearColor.copy(renderer.getClearColor());\n\t\t\t\t\t\t\t\t\t\trenderer.setClearColor(screenClearColor);\n\n\t\t\t\t\t\t\t\t\t\trenderer.render(eyeScene, eyeCamera, eyeRenderTarget);\n\n\t\t\t\t\t\t\t\t\t\trenderer.setClearColor(sceneClearColor);\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\trobotRenderer = new RobotRenderer(robotInfo, scene, scene._scene, eyeScene, modelControlGroups, textureLoader);\n\t\t\t\t\t\t\t\t\trobotRenderer.setCamera(new THREE.Vector3(0.50, 0.0, 0.37), new THREE.Vector3(0, 0, 0.17), 45);\n\t\t\t\t\t\t\t\t\trobotRenderer.installRenderPlugin(new DefaultEyeLighting());\n\t\t\t\t\t\t\t\t\tif (cb)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tcb(robotRenderer);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tslog(channel, \"JiboBody load error: \"+jiboBody.loadMessage);\n\t\t\t\t\t\t\t\t\tif (cb)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tcb(null);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tslog(channel, \"JiboEye load error: \"+jiboEye.loadMessage);\n\t\t\t\t\t\tif (cb)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcb(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tslog(channel, \"SceneInfo load error: \"+sceneInfo.loadMessage);\n\t\t\t\tif (cb)\n\t\t\t\t{\n\t\t\t\t\tcb(null);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * This will provide access to the pre-initialized RobotRenderer instance running full\n\t * screen on the robot's eye during on-robot operation.\n\t *\n\t * @function getEye\n\t * @return {RobotRenderer}\n\t * @private\n\t * @static\n\t */\n\tgetEye: function()\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Enum Values for createRobotRenderer.\n * @enum {string}\n * @alias module:jibo/visualize~DisplayType\n */\nvar DisplayType = {\n\t/** Body display type */\n\tBODY: \"BODY\",\n\t/** Eye display type */\n\tEYE: \"EYE\"\n};\n\n/**\n * @type {DisplayType}\n */\nvisualize.DisplayType = DisplayType;\n\nmodule.exports = visualize;\n"],"sourceRoot":"/source/"}