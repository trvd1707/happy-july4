{"version":3,"sources":["ifr-core/Time.js"],"names":[],"mappings":"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","file":"ifr-core/Time.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\n/**\n * @typedef {Array.<integer>} Timestamp - This is a two-element array of integers,\n * representing seconds and fractions of a second in microseconds since epoch. Each are non-negative integer values.\n */\n\n/**\n * Represents the time since epoch.\n * @param {integer} seconds - Seconds from epoch.\n * @param {integer} microseconds - Fractions of a second from epoch in microseconds.\n * @throws {Error} Error if time values are invalid (not numbers, not positive, micros more than 10^6, not integers).\n *\n * @class\n */\nvar Time = function(seconds, microseconds){\n\n\tthis._timestamp = [seconds, microseconds];\n\n\t/**\n\t * @param {Timestamp} timestamp Time printed as seconds and fractions of a second in microseconds.\n\t * @returns {boolean} `true` if valid, `false` if invalid (i.e. negative).\n\t */\n\tvar isValid = function(timestamp){\n\t\tvar valid = timestamp[0] === +timestamp[0] && timestamp[1] === +timestamp[1] && //values are numbers\n\t\t\ttimestamp[0] >= 0 && timestamp[1] >= 0 && //numbers are positive\n\t\t\ttimestamp[1] < 1000000 && //micro seconds portion is under a second\n\t\t\ttimestamp[0] === Math.round(timestamp[0]) && timestamp[1] === Math.round(timestamp[1]); //values are integers\n\n\t\tif(!valid){\n\t\t\tif(timestamp[0] !== +timestamp[0] || timestamp[1] !== +timestamp[1]){\n\t\t\t\tconsole.log(\"InvalidTime: At least one element of timestamp is not a number\");\n\t\t\t}\n\t\t\tif(timestamp[0] < 0 || timestamp[1] < 0){\n\t\t\t\tconsole.log(\"InvalidTime: At least one element of timestamp is negative\");\n\t\t\t}\n\t\t\tif(timestamp[1] >= 1000000){\n\t\t\t\tconsole.log(\"InvalidTime: Microseconds portion is over one second\");\n\t\t\t}\n\t\t\tif(timestamp[0] !== Math.round(timestamp[0]) || timestamp[1] !== Math.round(timestamp[1])){\n\t\t\t\tconsole.log(\"InvalidTime: At least one element is not an integer\");\n\t\t\t}\n\t\t}\n\n\t\treturn valid;\n\t};\n\n\tif(!isValid(this._timestamp)) {\n\t\tthrow new Error(\"new Time() given invalid time values: (INVALID \" + this._timestamp[0] + \", \" + this._timestamp[1] + \")\");\n\t}\n};\n\n/**\n * Creates new Time instance from the specified timeStamp.\n * @param {Timestamp} timestamp - Two element-array representing time from epoch, where first element is seconds and the second is fractions of a second in microseconds.\n * @throws {Error} Error if timeStamp is invalid (not an array, not numbers, not positive, micros more than 10^6, not integers).\n */\nTime.createFromTimestamp = function(timestamp){\n\tif(!Array.isArray(timestamp)){\n\t\tthrow new Error(\"new Time() given invalid Timestamp: (INVALID: not array)\");\n\t}\n\treturn new Time(timestamp[0], timestamp[1]);\n};\n\n/**\n * Computes the signed seconds between this instance and subtrahendTime, i.e. (this - subtrahend)\n * @param {Time} subtrahendTime Time to compare this time to.\n * @returns {number} (this - subtrahend), in floating point seconds.\n */\nTime.prototype.subtract = function(subtrahendTime) {\n\tvar a, b, n;\n\tif (this.isGreaterOrEqual(subtrahendTime)) {\n\t\ta = this._timestamp;\n\t\tb = subtrahendTime._timestamp;\n\t\tn = 1;\n\t} else {\n\t\ta = subtrahendTime._timestamp;\n\t\tb = this._timestamp;\n\t\tn = -1;\n\t}\n\tvar usPart = a[1] - b[1];\n\tvar sPart = a[0] - b[0];\n\tif (usPart < 0) {\n\t\tusPart += 1000000;\n\t\tsPart -= 1;\n\t}\n\tvar r =  n * (sPart + (usPart / 1000000));\n\treturn Math.round(r*1000000)/1000000; //round off floating noise to be exact microseconds result\n};\n\n\n/**\n * Creates and returns a new Time offset from this instance by the seconds value provided.\n *\n * @param {number} seconds - Signed seconds value to offset new time by.\n * @returns {Time} new Time instance equal to this Time offset by signed seconds value.\n * @throws {Error} - Error if resulting timeStamp would have been negative.\n */\nTime.prototype.add = function(seconds){\n\tvar sPart, usPart;\n\n\tif(seconds < 0) {\n\t\tvar toSubSPart = Math.floor(-seconds);\n\t\tvar toSubFractionPart = -seconds - toSubSPart;\n\n\t\tsPart = this._timestamp[0] - toSubSPart;\n\t\tusPart = this._timestamp[1] - toSubFractionPart * 1000000;\n\n\t\tif(usPart < 0) {\n\t\t\tusPart += 1000000;\n\t\t\tsPart -= 1;\n\t\t}\n\n\t\tif(sPart < 0){\n\t\t\t//negative timestamps not supported\n\t\t\tconsole.log(\"Error, \"+this.toString()+\"+\"+seconds+\" is a negative timestamp! (not allowed)\");\n\t\t\tthrow new Error(\"Error, \"+this.toString()+\"+\"+seconds+\" is a negative timestamp! (not allowed)\");\n\t\t}\n\n\t}else{\n\t\tvar toAddSPart = Math.floor(seconds);\n\t\tvar toAddFractionalPart = seconds - toAddSPart;\n\n\t\tsPart = this._timestamp[0] + toAddSPart;\n\t\tusPart = this._timestamp[1] + toAddFractionalPart * 1000000;\n\n\t\tif(usPart >= 1000000){\n\t\t\tusPart -= 1000000;\n\t\t\tsPart += 1;\n\t\t}\n\t}\n\n\tusPart = Math.round(usPart);\n\n\treturn new Time(sPart, usPart);\n};\n\n\n/**\n * Computes if this time instance is later than the provided time, i.e. (this > otherTime).\n *\n * @param {Time} otherTime Time to compare this time to.\n * @returns {boolean} `true` if this time is greater (later) than otherTime.\n */\nTime.prototype.isGreater = function(otherTime){\n\tif(this._timestamp[0] > otherTime._timestamp[0]){\n\t\treturn true;\n\t}else if(this._timestamp[0] === otherTime._timestamp[0]){\n\t\treturn this._timestamp[1] > otherTime._timestamp[1];\n\t}else{\n\t\treturn false;\n\t}\n};\n\n/**\n * Computes if this time instance is later or the same as the provided time,\n * i.e. (this >= otherTime).\n *\n * @param {Time} otherTime Time to compare this time to.\n * @returns {boolean} `true` if this time is greater than or equal to (later or the same) otherTime.\n */\nTime.prototype.isGreaterOrEqual = function(otherTime){\n\tif(this._timestamp[0] > otherTime._timestamp[0]){\n\t\treturn true;\n\t}else if(this._timestamp[0] === otherTime._timestamp[0]){\n\t\treturn this._timestamp[1] >= otherTime._timestamp[1];\n\t}else{\n\t\treturn false;\n\t}\n};\n\n\n/**\n * Computes if this time instance represents the same time as the provided time.\n *\n * @param {Time} otherTime Time to compare this time to.\n * @returns {boolean} `true` if this time is the same time as otherTime.\n */\nTime.prototype.equals = function(otherTime){\n\treturn this._timestamp[0] === otherTime._timestamp[0] && this._timestamp[1] === otherTime._timestamp[1];\n};\n\n\n/**\n * @returns {string} string Representation of this timestamp. Printed as floating point value of seconds since epoch.\n */\nTime.prototype.toString = function(){\n\tvar tsUS = \"\"+this._timestamp[1];\n\twhile(tsUS.length < 6){\n\t\ttsUS = \"0\"+tsUS;\n\t}\n\treturn this._timestamp[0] + \".\" + tsUS;\n};\n\nmodule.exports = Time;\n"],"sourceRoot":"/source/"}