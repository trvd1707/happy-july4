{"version":3,"sources":["ifr-core/SLog.js"],"names":[],"mappings":"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","file":"ifr-core/SLog.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\n/**\n * @callback SlogDelegate\n * @param {string} channel\n * @param {string} message\n */\n\n/** @type {SlogDelegate} */\n// eslint-disable-next-line no-unused-vars\nvar _slogNOPDelegate = function(channel, message){};\n\n/** @type {boolean} */\nvar _printedUninitializedWarning = false;\n\n/** @type {SlogDelegate} */\n// eslint-disable-next-line no-unused-vars\nvar _slogWarnUninitializedDelegate = function(channel, message){\n\tif(!_printedUninitializedWarning){\n\t\t_printedUninitializedWarning = true;\n\t\tconsole.log(\"slog used without being initialized, first usage stack:\");\n\t\tconsole.log(new Error().stack);\n\t}\n};\n\nvar _slogConsolePrinterDelegate = function(channel, message){\n\tconsole.log(channel+\" : \"+message);\n};\n\n/** @type {SlogDelegate} */\nvar _slogDefaultDelegate = _slogNOPDelegate;\n\n/** @type {Object.<string, SlogDelegate>} */\nvar _slogChannelDelegates = {ERROR: _slogConsolePrinterDelegate};\n\n\n/**\n * @param {string} channel\n * @param {string} message\n */\nvar slog = function(channel, message){\n\tif(_slogChannelDelegates.hasOwnProperty(channel)){\n\t\t_slogChannelDelegates[channel](channel, message);\n\t}else{\n\t\t_slogDefaultDelegate(channel, message);\n\t}\n};\n\n/**\n * Enum Values for default channels.\n * @enum {string}\n */\nslog.BaseChannels = {\n\tINFO: \"INFO\",\n\tWARN: \"WARN\",\n\tERROR: \"ERROR\"\n};\n\n/**\n * Calls slog(INFO, message).\n *\n * @param {string} message\n */\nslog.info = function(message){\n\tslog(slog.BaseChannels.INFO, message);\n};\n\n/**\n * Calls slog(WARN, message).\n *\n * @param {string} message\n */\nslog.warn = function(message){\n\tslog(slog.BaseChannels.WARN, message);\n};\n\n/**\n * Calls slog(ERROR, message).\n *\n * @param {string} message\n */\nslog.error = function(message){\n\tslog(slog.BaseChannels.ERROR, message);\n};\n\n\n\n\n/**\n * Sets the default delegate which will handle all channels not explicitly\n * covered by a channel delegate.  Pass null for a NOP handler that prints nothing\n *\n * @param {SlogDelegate} slogDelegate - default delegate, null for NOP (silent) delegate\n */\nslog.setDefaultDelegate = function(slogDelegate){\n\tif(slogDelegate == null){ //null of undefined (eqnull)\n\t\t_slogDefaultDelegate = _slogNOPDelegate;\n\t}else {\n\t\t_slogDefaultDelegate = slogDelegate;\n\t}\n};\n\n/**\n * Sets the delegate for a particular channel.  Pass null for a NOP handler that prints nothing\n * @param {string} channel\n * @param {SlogDelegate} slogDelegate - channel delegate, null for NOP (silent) delegate\n */\nslog.setChannelDelegate = function(channel, slogDelegate){\n\tif(slogDelegate == null){ //null or undefined (eqnull)\n\t\t_slogChannelDelegates[channel] = _slogNOPDelegate;\n\t}else {\n\t\t_slogChannelDelegates[channel] = slogDelegate;\n\t}\n};\n\n/**\n * Clear the delegate from the given channel (channel will be handled by default delegate).\n * Pass null to clear all channel delegates\n *\n * @param {string} channel - channel to clear, null to clear all channels\n */\nslog.clearChannelDelegate = function(channel){\n\tif(channel == null){ //null or undefined (eqnull)\n\t\tvar channels = Object.keys(_slogChannelDelegates);\n\t\tfor(var i = 0; i < channels.length; i++){\n\t\t\tdelete(_slogChannelDelegates[channels[i]]);\n\t\t}\n\t}else{\n\t\tdelete(_slogChannelDelegates[channel]);\n\t}\n};\n\n/**\n * Convenience function to configure slog to print only the channels listed.  Clears all other\n * initialized state.\n *\n * Equivalent to setting the default delegate to NOP delegate, setting the given channels\n * to simple console printing delegates, and clearing all other channel delegates\n *\n * @param {string[]} channels - channels to print, null same as setPrintNone\n */\nslog.setPrintChannels = function(channels){\n\tslog.setDefaultDelegate(null);\n\tslog.clearChannelDelegate(null);\n\tif(channels != null){\n\t\tfor(var i = 0; i < channels.length; i++) {\n\t\t\tslog.setChannelDelegate(channels[i], _slogConsolePrinterDelegate);\n\t\t}\n\t}\n};\n\n/**\n * Convenience function to configure slog to print all channels.  Clears all other\n * initialized state.\n *\n * Equivalent to setting the default delegate to a simple console printing delegate\n * and clearing all channel delegates\n */\nslog.setPrintAll = function(){\n\tslog.setDefaultDelegate(_slogConsolePrinterDelegate);\n\tslog.clearChannelDelegate(null);\n};\n\n/**\n * Convenience function to configure slog to print nothing.  Clears all other\n * initialized state.\n *\n * Equivalent to setting the default delegate to a NOP delegate\n * and clearing all channel delegates\n */\nslog.setPrintNone = function(){\n\tslog.setDefaultDelegate(_slogNOPDelegate);\n\tslog.clearChannelDelegate(null);\n};\n\n\nmodule.exports = slog;"],"sourceRoot":"/source/"}