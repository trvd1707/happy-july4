{"version":3,"sources":["ifr-core/Clock.js"],"names":[],"mappings":";;;;;AAKA;;AAEA,IAAI,OAAO,QAAQ,QAAR,CAAP;;;;;;AAMJ,IAAI,QAAQ,EAAR;;;;;;;;;;AAUJ,MAAM,WAAN,GAAoB,YAAU;AAC7B,KAAI,aAAJ,CAD6B;AAE7B,KAAI,UAAJ,CAF6B;AAG7B,KAAG,OAAO,MAAP,KAAmB,WAAnB,IAAkC,OAAO,OAAO,WAAP,KAAwB,WAA/B,EAA2C;AAC/E,kBAAgB,OAAO,WAAP,CAAmB,GAAnB,EAAhB,CAD+E;AAE/E,eAAa,OAAO,WAAP,CAAmB,MAAnB,CAA0B,eAA1B,CAFkE;EAAhF,MAGK;AACJ,kBAAgB,CAAhB,CADI;AAEJ,eAAa,KAAK,GAAL,EAAb,CAFI;EAHL;;AAQA,KAAI,wBAAwB,KAAK,KAAL,CAAW,aAAX,CAAxB,CAXyB;AAY7B,KAAI,kCAAkC,gBAAgB,qBAAhB;;;;AAZT,KAgBzB,uBAAuB,wBAAwB,UAAxB;;;AAhBE,KAmBzB,sBAAsB,KAAK,KAAL,CAAW,uBAAuB,IAAvB,CAAjC,CAnByB;AAoB7B,yBAAwB,sBAAsB,IAAtB;;;AApBK,KAuBzB,+BAA+B,uBAAuB,+BAAvB;;;AAvBN,6BA0B7B,GAA+B,KAAK,KAAL,CAAW,+BAA+B,IAA/B,CAA1C;;;AA1B6B,KA6B1B,iCAAiC,OAAjC,EAAyC;AAC3C,iCAA+B,CAA/B,CAD2C;AAE3C,wBAAsB,sBAAsB,CAAtB,CAFqB;EAA5C;;AAKA,QAAO,IAAI,IAAJ,CAAS,mBAAT,EAA8B,4BAA9B,CAAP,CAlC6B;CAAV;;AAsCpB,OAAO,OAAP,GAAiB,KAAjB","file":"ifr-core/Clock.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\nvar Time = require(\"./Time\");\n/**\n * A high-precision clock.  Uses the Performance API if available.\n *\n * @class\n */\nvar Clock = {};\n\n/**\n * Gets the current time.\n *\n * Internally, time is calculated as time since epoch and is\n * represented as two integersâ€” seconds and fractions of a second in microseconds.\n *\n * @returns {Time}\n */\nClock.currentTime = function(){\n\tvar sinceNavStart;\n\tvar navStartMS;\n\tif(typeof(window) !== \"undefined\" && typeof(window.performance) !== \"undefined\"){\n\t\tsinceNavStart = window.performance.now();\n\t\tnavStartMS = window.performance.timing.navigationStart;\n\t}else{\n\t\tsinceNavStart = 0;\n\t\tnavStartMS = Date.now();\n\t}\n\n\tvar sinceStartMSComponent = Math.floor(sinceNavStart);\n\tvar sinceStartFractionalMSComponent = sinceNavStart - sinceStartMSComponent;\n\t//break off sub-ms part for later addition (don't want to lose precision)\n\n\t//our stamp is startTimeMS + elapsedMS\n\tvar timeStampMSComponent = sinceStartMSComponent + navStartMS;\n\n\t//break off and remove whole seconds\n\tvar timeStampSComponent = Math.floor(timeStampMSComponent / 1000);\n\ttimeStampMSComponent -= timeStampSComponent * 1000;\n\n\t//add back in the sub-ms elapsed component\n\tvar timeStampFractionalComponent = timeStampMSComponent + sinceStartFractionalMSComponent;\n\n\t//convert to us\n\ttimeStampFractionalComponent = Math.round(timeStampFractionalComponent * 1000);\n\n\t//us rounded up and need to carry into s\n\tif(timeStampFractionalComponent === 1000000){\n\t\ttimeStampFractionalComponent = 0;\n\t\ttimeStampSComponent = timeStampSComponent + 1;\n\t}\n\n\treturn new Time(timeStampSComponent, timeStampFractionalComponent);\n};\n\n\nmodule.exports = Clock;\n"],"sourceRoot":"/source/"}