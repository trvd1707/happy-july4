{"version":3,"sources":["ifr-core/Bakery.js"],"names":[],"mappings":";;;;;AAKA;;AAEA,IAAI,OAAO,QAAQ,QAAR,CAAP;;AAEJ,IAAI,WAAW,IAAX;;AAEJ,IAAI,SAAS,EAAT;;AAEJ,IAAI,2BAA2B,KAA3B;;;;;;;;AAQJ,OAAO,IAAP,GAAc,UAAS,oBAAT,EAA8B;AAC3C,MAAG,aAAa,IAAb,EAAmB;AACrB,eAAW,oBAAX,CADqB;GAAtB,MAEK;AACJ,SAAK,IAAL,CAAU,6CAAV,EADI;GAFL;CADa;;AAQd,IAAI,WAAW,SAAX,QAAW,CAAS,OAAT,EAAiB;;AAC/B,SAAO,QAAP;AAD+B,CAAjB;;AAIf,IAAI,4BAA4B,SAA5B,yBAA4B,GAAU;AACzC,MAAG,CAAC,wBAAD,EAA2B;AAC7B,SAAK,IAAL,CAAU,qDAAV,EAD6B;AAE7B,+BAA2B,IAA3B,CAF6B;GAA9B;CAD+B;;;;;;;;;;;;;AAkBhC,OAAO,QAAP,GAAkB,UAAS,IAAT,EAAe,GAAf,EAAoB,GAApB,EAAyB,OAAzB,EAAkC,OAAlC,EAA0C;AAC3D,MAAI,WAAW,SAAS,OAAT,CAAX,CADuD;AAE3D,MAAG,aAAW,IAAX,EAAgB;AAClB,WAAO,SAAS,QAAT,CAAkB,IAAlB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,OAAlC,EAA2C,OAA3C,CAAP,CADkB;GAAnB,MAEK;AACJ,gCADI;AAEJ,WAAO,OAAP,CAFI;GAFL;CAFiB;;;;;;;;;;;AAmBlB,OAAO,UAAP,GAAoB,UAAS,IAAT,EAAe,OAAf,EAAwB,OAAxB,EAAgC;AACnD,MAAI,WAAW,SAAS,OAAT,CAAX,CAD+C;AAEnD,MAAG,aAAW,IAAX,EAAgB;AAClB,WAAO,SAAS,UAAT,CAAoB,IAApB,EAA0B,OAA1B,EAAmC,OAAnC,CAAP,CADkB;GAAnB,MAEK;AACJ,gCADI;AAEJ,WAAO,OAAP,CAFI;GAFL;CAFmB;;;;;;;;;;AAmBpB,OAAO,UAAP,GAAoB,UAAS,IAAT,EAAe,QAAf,EAAyB,OAAzB,EAAiC;AACpD,MAAI,WAAW,SAAS,OAAT,CAAX,CADgD;AAEpD,MAAG,aAAW,IAAX,EAAgB;AAClB,aAAS,UAAT,CAAoB,IAApB,EAA0B,QAA1B,EAAoC,OAApC,EADkB;GAAnB,MAEK;AACJ,gCADI;GAFL;CAFmB;;;;;;;;;;AAkBpB,OAAO,QAAP,GAAkB,UAAS,IAAT,EAAe,IAAf,EAAqB,OAArB,EAA6B;AAC9C,MAAI,WAAW,SAAS,OAAT,CAAX,CAD0C;AAE9C,MAAG,aAAW,IAAX,EAAgB;AAClB,aAAS,QAAT,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B,OAA9B,EADkB;GAAnB,MAEK;AACJ,gCADI;GAFL;CAFiB;;AASlB,OAAO,OAAP,GAAiB,MAAjB","file":"ifr-core/Bakery.js","sourcesContent":["/**\n * @author jg\n * Copyright 2015 IF Robots LLC\n */\n\n\"use strict\";\n\nvar slog = require(\"./SLog\");\n\nvar theBaker = null;\n\nvar Bakery = {};\n\nvar printedInitializeWarning = false;\n\n/**\n * Initialize the Bakery with a specific Bakery implementation.  This should be called once, the result is cached\n * statically so subsequent calls to getFloat etc. will display their UI via the given implementation.\n *\n * @param {Object} bakeryImplementation\n */\nBakery.init = function(bakeryImplementation){\n\tif(theBaker === null) {\n\t\ttheBaker = bakeryImplementation;\n\t}else{\n\t\tslog.warn(\"Warning, Bakery initialized multiple times!\");\n\t}\n};\n\nvar getBaker = function(tabName){ // eslint-disable-line no-unused-vars\n\treturn theBaker; //only one baker for now, keeping this function as placeholder for path to baker index.\n};\n\nvar printUnInitializedWarning = function(){\n\tif(!printedInitializeWarning) {\n\t\tslog.info(\"Bakery values requested by Bakery never initialized\");\n\t\tprintedInitializeWarning = true;\n\t}\n};\n\n/**\n * First call will initialize/display a slider with the provided name in the\n * tab listed.  If tabName is an array of strings, there will be set of nested\n * tabs.\n * @param {string} name - name of slider\n * @param {number} min - minimum of slider\n * @param {number} max - maximum of slider\n * @param {number} initial - initial value of slider and produced value\n * @param {string | string[]} [tabName] - the tab name (or path) to display the ui in.  put in \"default\" tab if omitted\n * @returns {number}\n */\nBakery.getFloat = function(name, min, max, initial, tabName){\n\tvar useBaker = getBaker(tabName);\n\tif(useBaker!==null){\n\t\treturn useBaker.getFloat(name, min, max, initial, tabName);\n\t}else{\n\t\tprintUnInitializedWarning();\n\t\treturn initial;\n\t}\n};\n\n/**\n * First call will initialize/display a checkbox with the provided name in the\n * tab listed.  If tabName is an array of strings, there will be set of nested\n * tabs.\n * @param {string} name - name of checkbox\n * @param {boolean} initial - initial value of checkbox and produced value\n * @param {string | string[]} [tabName] - the tab name (or path) to display the ui in.  put in \"default\" tab if omitted\n * @returns {boolean}\n */\nBakery.getBoolean = function(name, initial, tabName){\n\tvar useBaker = getBaker(tabName);\n\tif(useBaker!==null){\n\t\treturn useBaker.getBoolean(name, initial, tabName);\n\t}else{\n\t\tprintUnInitializedWarning();\n\t\treturn initial;\n\t}\n};\n\n\n/**\n * First call will initialize/display a button with the provided name in the\n * tab listed.  If tabName is an array of strings, there will be set of nested\n * tabs.\n * @param {string} name - name of button\n * @param callback - callback called when button pressed\n * @param {string | string[]} [tabName] - the tab name (or path) to display the ui in.  put in \"default\" tab if omitted\n */\nBakery.makeButton = function(name, callback, tabName){\n\tvar useBaker = getBaker(tabName);\n\tif(useBaker!==null){\n\t\tuseBaker.makeButton(name, callback, tabName);\n\t}else{\n\t\tprintUnInitializedWarning();\n\t}\n};\n\n\n/**\n * First call will initialize/display a text label with provided text.\n * (label:text).  Subsequent calls change the text.\n *\n * @param {string} name - name of label, will show up in the display\n * @param {string} text - text to show\n * @param {string | string[]} [tabName] - the tab name (or path) to display the ui in.  put in \"default\" tab if omitted\n */\nBakery.showText = function(name, text, tabName){\n\tvar useBaker = getBaker(tabName);\n\tif(useBaker!==null){\n\t\tuseBaker.showText(name, text, tabName);\n\t}else{\n\t\tprintUnInitializedWarning();\n\t}\n};\n\nmodule.exports = Bakery;\n"],"sourceRoot":"/source/"}