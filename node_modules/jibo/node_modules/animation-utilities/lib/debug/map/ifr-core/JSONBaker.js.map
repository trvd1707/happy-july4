{"version":3,"sources":["ifr-core/JSONBaker.js"],"names":[],"mappings":"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","file":"ifr-core/JSONBaker.js","sourcesContent":["/**\n * @author mattb\n * Copyright 2016 IF Robots LLC\n */\n\n\n\"use strict\";\n\nvar FileTools = require(\"./FileTools\");\nvar slog = require(\"./SLog\");\n\n\n/**\n * Implementation of the Bakery that provides data from a serialized JSON object.\n *\n * @param {object|string} bakeryData - Bakery data object or URL to load for data.\n * @constructor\n */\nvar JSONBaker = function(bakeryData)\n{\n\tvar initData = null;\n\tvar url = null;\n\tif (typeof bakeryData === \"string\")\n\t{\n\t\turl = bakeryData;\n\t}\n\telse\n\t{\n\t\tinitData = bakeryData;\n\t}\n\n\tthis._dataRoot = {};\n\tthis._defaultScopeName = \"default\";\n\n\tif (initData)\n\t{\n\t\tthis._dataRoot = initData;\n\t}\n\tif (url)\n\t{\n\t\tvar self = this;\n\t\tFileTools.loadJSON(url, function(error, data)\n\t\t{\n\t\t\tif (error)\n\t\t\t{\n\t\t\t\tslog.error(\"JSONBaker: failed to load data, url: \"+url+\" error: \"+error);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tself._dataRoot = data;\n\t\t\t}\n\t\t});\n\t}\n};\n\n\nJSONBaker.prototype._getScope = function(tabName)\n{\n\tif (!tabName)\n\t{\n\t\ttabName = this._defaultScopeName;\n\t}\n\tif (tabName instanceof Array)\n\t{\n\t\tvar scope = this._dataRoot;\n\t\tfor (var i = 0; i < tabName.length; i++)\n\t\t{\n\t\t\tif (typeof scope[tabName[i]] !== \"object\")\n\t\t\t{\n\t\t\t\tscope[tabName[i]] = {};\n\t\t\t}\n\t\t\tscope = scope[tabName[i]];\n\t\t}\n\t\treturn scope;\n\t}\n\telse\n\t{\n\t\tif (typeof this._dataRoot[tabName] !== \"object\")\n\t\t{\n\t\t\tthis._dataRoot[tabName] = {};\n\t\t}\n\t\treturn this._dataRoot[tabName];\n\t}\n};\n\nJSONBaker.prototype.getFloat = function(name, min, max, initial, tabName)\n{\n\tvar scope = this._getScope(tabName);\n\tvar value = scope[name];\n\tif (value === undefined || value === null)\n\t{\n\t\tvalue = initial;\n\t\tscope[name] = value;\n\t}\n\treturn value;\n};\n\nJSONBaker.prototype.getBoolean = function(name, initial, tabName)\n{\n\tvar scope = this._getScope(tabName);\n\tvar value = scope[name];\n\tif (value === undefined || value === null)\n\t{\n\t\tvalue = initial;\n\t\tscope[name] = value;\n\t}\n\treturn value;\n};\n\nJSONBaker.prototype.makeButton = function(name, callback, tabName) // eslint-disable-line no-unused-vars\n{\n};\n\nJSONBaker.prototype.showText = function(name, text, tabName) // eslint-disable-line no-unused-vars\n{\n};\n\nJSONBaker.prototype.getData = function()\n{\n\treturn this._dataRoot;\n};\n\n\nmodule.exports = JSONBaker;\n"],"sourceRoot":"/source/"}