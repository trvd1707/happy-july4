{"version":3,"sources":["animation-animate/timeline/ScaleSampleCombiner.js"],"names":[],"mappings":";;;;AAIA;;AAEA,IAAI,iBAAiB,QAAQ,kBAAR,CAAjB;;;;;;;;;;;;;AAaJ,IAAI,sBAAsB,SAAtB,mBAAsB,CAAS,cAAT,EAAyB,aAAzB,EAAwC,QAAxC,EAAiD;AAC1E,gBAAe,IAAf,CAAoB,IAApB;;;AAD0E,KAI1E,CAAK,YAAL,GAAoB,EAApB,CAJ0E;AAK1E,MAAK,WAAL,GAAmB,EAAnB,CAL0E;AAM1E,MAAI,IAAI,IAAI,CAAJ,EAAO,IAAI,SAAS,MAAT,EAAiB,GAApC,EAAwC;AACvC,MAAI,UAAU,SAAS,CAAT,CAAV,CADmC;AAEvC,MAAG,kBAAkB,IAAlB,IAA0B,eAAe,GAAf,CAAmB,OAAnB,KAA+B,IAA/B,EAAoC;AAChE,QAAK,YAAL,CAAkB,OAAlB,IAA6B,eAAe,GAAf,CAAmB,OAAnB,EAA4B,CAA5B,CAA7B,CADgE;GAAjE,MAEK;AACJ,QAAK,YAAL,CAAkB,OAAlB,IAA6B,CAA7B,CADI;GAFL;AAKA,MAAG,iBAAiB,IAAjB,IAAyB,cAAc,GAAd,CAAkB,OAAlB,KAA+B,IAA/B,EAAoC;AAC/D,QAAK,WAAL,CAAiB,OAAjB,IAA4B,cAAc,GAAd,CAAkB,OAAlB,EAA2B,CAA3B,CAA5B,CAD+D;GAAhE,MAEK;AACJ,QAAK,WAAL,CAAiB,OAAjB,IAA4B,CAA5B,CADI;GAFL;EAPD;CANyB;;AAqB1B,oBAAoB,SAApB,GAAgC,OAAO,MAAP,CAAc,eAAe,SAAf,CAA9C;AACA,oBAAoB,SAApB,CAA8B,WAA9B,GAA4C,mBAA5C;;;;;;;;;;;;;AAcA,oBAAoB,SAApB,CAA8B,cAA9B,GAA+C,UAAS,OAAT,EAAkB,UAAlB,EAA8B,SAA9B,EAAyC,UAAzC,EAAoD;;AAClG,KAAI,IAAI,EAAJ,CAD8F;AAElG,KAAI,WAAW,KAAK,YAAL,CAAkB,OAAlB,CAAX,CAF8F;AAGlG,KAAI,UAAU,KAAK,WAAL,CAAiB,OAAjB,CAAV,CAH8F;AAIlG,KAAI,QAAQ,CAAC,UAAU,CAAV,IAAe,OAAf,CAAD,IAA4B,WAAS,OAAT,CAA5B,GAAgD,OAAhD,CAJsF;AAKlG,KAAG,MAAM,KAAN,CAAH,EAAgB;AACf,UAAQ,CAAR,CADe;EAAhB;;AAIA,MAAI,IAAI,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,GAAtC,EAA0C;AACzC,IAAE,IAAF,CAAO,WAAW,CAAX,IAAgB,KAAhB,CAAP,CADyC;EAA1C;AAGA,QAAO,CAAP;;AAZkG,CAApD;;AAiB/C,OAAO,OAAP,GAAiB,mBAAjB","file":"animation-animate/timeline/ScaleSampleCombiner.js","sourcesContent":["/**\n * @author jg\n */\n\n\"use strict\";\n\nvar SampleCombiner = require(\"./SampleCombiner\");\n\n/**\n * Scale incoming samples by our samples.  Our samples will first be mapped\n * from their raw dof values, using linear interpolation, based on the 2 poses\n * provided the constructor.\n *\n * @param {Pose} unityScalePose - dof values to map to scale of 1 (defaults to 1's)\n * @param {Pose} zeroScalePose - dof values to map to scale of 0 (defaults to 0's)\n * @param {string[]} dofNames - used to initialize defaults.  should include at least all dofs that this combined will be combining\n * @constructor\n * @extends SampleCombiner\n */\nvar ScaleSampleCombiner = function(unityScalePose, zeroScalePose, dofNames){\n\tSampleCombiner.call(this);\n\n\t//init the interpolation mapping\n\tthis._unityScales = {};\n\tthis._zeroScales = {};\n\tfor(var i = 0; i < dofNames.length; i++){\n\t\tvar dofName = dofNames[i];\n\t\tif(unityScalePose != null && unityScalePose.get(dofName) != null){\n\t\t\tthis._unityScales[dofName] = unityScalePose.get(dofName)[0];\n\t\t}else{\n\t\t\tthis._unityScales[dofName] = 1;\n\t\t}\n\t\tif(zeroScalePose != null && zeroScalePose.get(dofName)  != null){\n\t\t\tthis._zeroScales[dofName] = zeroScalePose.get(dofName)[0];\n\t\t}else{\n\t\t\tthis._zeroScales[dofName] = 0;\n\t\t}\n\t}\n};\n\nScaleSampleCombiner.prototype = Object.create(SampleCombiner.prototype);\nScaleSampleCombiner.prototype.constructor = ScaleSampleCombiner;\n\n\n/**\n * Scales all components of samplePrev by sampleNew's 0th component\n * mapped to a scale using unityScale and zeroScale values.\n *\n * @param {string} dofName\n * @param {number[]} samplePrev\n * @param {number[]} sampleNew\n * @param {Object.<string, string|number|boolean>} properties\n * @return {number[]}\n * @override\n */\nScaleSampleCombiner.prototype.combineSamples = function(dofName, samplePrev, sampleNew, properties){ // eslint-disable-line no-unused-vars\n\tvar r = [];\n\tvar unityVal = this._unityScales[dofName];\n\tvar zeroVal = this._zeroScales[dofName];\n\tvar scale = (sampleNew[0] - zeroVal) / (unityVal-zeroVal) + zeroVal;\n\tif(isNaN(scale)){\n\t\tscale = 0;\n\t}\n\n\tfor(var i = 0; i < samplePrev.length; i++){\n\t\tr.push(samplePrev[i] * scale);\n\t}\n\treturn r;\n\t//return samplePrev;\n};\n\n\nmodule.exports = ScaleSampleCombiner;"],"sourceRoot":"/source/"}