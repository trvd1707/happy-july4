{"version":3,"sources":["animation-animate/timeline/SimpleMotionGenerator.js"],"names":[],"mappings":";;;;AAIA;;AAEA,IAAI,kBAAkB,QAAQ,uCAAR,CAAlB;AACJ,IAAI,sBAAsB,QAAQ,uBAAR,CAAtB;;;;;;;;;;AAUJ,IAAI,wBAAwB,SAAxB,qBAAwB,CAAS,MAAT,EAAiB,SAAjB,EAA4B,SAA5B,EAAuC,QAAvC,EAC5B;AACC,KAAI,CAAC,QAAD,EACJ;AACC,aAAW,OAAO,IAAP,CAAY,OAAO,SAAP,EAAZ,CAAX,CADD;EADA;;AAKA,KAAI,WAAW,CAAX,CANL;AAOC,MAAK,IAAI,IAAE,CAAF,EAAK,IAAE,SAAS,MAAT,EAAiB,GAAjC,EACA;AACC,MAAI,gBAAgB,OAAO,SAAP,GAAmB,SAAS,CAAT,CAAnB,EAAgC,SAAhC,EAAhB,CADL;AAEC,MAAI,gBAAgB,QAAhB,EACJ;AACC,cAAW,aAAX,CADD;GADA;EAHD;;AASA,qBAAoB,IAApB,CAAyB,IAAzB,EAA+B,OAAO,OAAP,EAA/B,EAAiD,SAAjD,EAA4D,QAA5D,EAAsE,QAAtE,EAhBD;;AAkBC,iBAAgB,WAAhB,CAA4B,MAA5B;;;AAlBD,KAqBC,CAAK,OAAL,GAAe,MAAf;;;AArBD,KAwBC,CAAK,gBAAL,GAAwB,UAAU,gBAAV,GAA6B,kBAA7B,EAAxB,CAxBD;CAD4B;;AA6B5B,sBAAsB,SAAtB,GAAkC,OAAO,MAAP,CAAc,oBAAoB,SAApB,CAAhD;AACA,sBAAsB,SAAtB,CAAgC,WAAhC,GAA8C,qBAA9C;;;;;;;;AASA,sBAAsB,SAAtB,CAAgC,WAAhC,GAA8C,UAAS,OAAT,EAAkB,aAAlB;AAC9C;AACC,KAAI,sBAAsB,KAAK,YAAL,CAAkB,QAAlB,CAA2B,KAAK,YAAL,EAA3B,CAAtB,CADL;AAEC,KAAI,kBAAkB,KAAK,iBAAL,CAAuB,OAAvB,CAAlB,CAFL;AAGC,KAAI,oBAAoB,IAApB,EACJ;AACC,MAAI,aAAa,KAAK,GAAL,CAAS,mBAAT,EAA8B,eAA9B,CAAb,CADL;AAEC,MAAI,SAAS,KAAK,OAAL,CAAa,SAAb,GAAyB,OAAzB,EAAkC,aAAlC,CAAgD,UAAhD,EAA4D,KAAK,gBAAL,CAAsB,eAAtB,CAAsC,OAAtC,CAA5D,CAAT,CAFL;;AAIC,SAAO,MAAP,CAJD;EADA,MAQA;AACC,SAAO,IAAP,CADD;EARA;CAJ6C;;AAkB9C,OAAO,OAAP,GAAiB,qBAAjB","file":"animation-animate/timeline/SimpleMotionGenerator.js","sourcesContent":["/**\n * @author mattb\n */\n\n\"use strict\";\n\nvar MotionValidator = require(\"../../ifr-motion/base/MotionValidator\");\nvar BaseMotionGenerator = require(\"./BaseMotionGenerator\");\n\n/**\n * @param {Motion} motion\n * @param {Time} startTime\n * @param {RobotInfo} robotInfo\n * @param {string[]} [dofNames]\n * @constructor\n * @extends BaseMotionGenerator\n */\nvar SimpleMotionGenerator = function(motion, startTime, robotInfo, dofNames)\n{\n\tif (!dofNames)\n\t{\n\t\tdofNames = Object.keys(motion.getTracks());\n\t}\n\n\tvar duration = 0;\n\tfor (var i=0; i<dofNames.length; i++)\n\t{\n\t\tvar trackDuration = motion.getTracks()[dofNames[i]].getLength();\n\t\tif (trackDuration > duration)\n\t\t{\n\t\t\tduration = trackDuration;\n\t\t}\n\t}\n\n\tBaseMotionGenerator.call(this, motion.getName(), startTime, dofNames, duration);\n\n\tMotionValidator.valuesExist(motion);\n\n\t/** @type {Motion} */\n\tthis._motion = motion;\n\n\t/** @type {InterpolatorSet} */\n\tthis._interpolatorSet = robotInfo.getKinematicInfo().getInterpolatorSet();\n\n};\n\nSimpleMotionGenerator.prototype = Object.create(BaseMotionGenerator.prototype);\nSimpleMotionGenerator.prototype.constructor = SimpleMotionGenerator;\n\n\n/**\n * @param {string} dofName\n * @param {LayerState} partialRender\n * @returns {number[]}\n * @override\n */\nSimpleMotionGenerator.prototype.getDOFState = function(dofName, partialRender) // eslint-disable-line no-unused-vars\n{\n\tvar relativeCurrentTime = this._currentTime.subtract(this.getStartTime());\n\tvar relativeEndTime = this.getDurationForDOF(dofName);\n\tif (relativeEndTime !== null)\n\t{\n\t\tvar sampleTime = Math.min(relativeCurrentTime, relativeEndTime);\n\t\tvar sample = this._motion.getTracks()[dofName].getDataAtTime(sampleTime, this._interpolatorSet.getInterpolator(dofName));\n\n\t\treturn sample;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n\nmodule.exports = SimpleMotionGenerator;\n"],"sourceRoot":"/source/"}