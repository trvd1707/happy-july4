{"version":3,"sources":["animation-animate/LinearTransitionBuilderImpl.js"],"names":[],"mappings":"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","file":"animation-animate/LinearTransitionBuilderImpl.js","sourcesContent":["/**\n * @author jg\n */\n\n\"use strict\";\n\nvar Motion = require(\"../ifr-motion/base/Motion\");\nvar MotionValidator = require(\"../ifr-motion/base/MotionValidator\");\nvar MotionTrack = require(\"../ifr-motion/base/MotionTrack\");\nvar TimestampedBuffer = require(\"../ifr-motion/base/TimestampedBuffer\");\nvar TransitionBuilder = require(\"./TransitionBuilder\");\n\n\n/**\n * Protected constructor for internal use only.\n *\n * LinearTransitionBuilders generate transition motions via simple linear blending.\n *\n * LinearTransitionBuilders can be created via the animation module's\n * [createLinearTransitionBuilder]{@link module:jibo/animate#createLinearTransitionBuilder} method.\n *\n * @param {RobotInfo} robotInfo - Protected constructor parameter.\n * @constructor\n * @extends TransitionBuilder\n * @protected\n */\nvar LinearTransitionBuilder = function (robotInfo){\n\tTransitionBuilder.call(this);\n\t/** @type {number} */\n\t/** @private */\n\tthis._transitionTime = 1;\n\n\t/** @type {number} */\n\t/** @private */\n\tthis._defaultMaxVelocity = null;\n\n\t/** @type {Object<string,number>} */\n\t/** @private */\n\tthis._maxVelocityByDOF = null;\n\n\t/** @type {RobotInfo} */\n\t/** @private */\n\tthis._robotInfo = robotInfo;\n};\n\nLinearTransitionBuilder.prototype = Object.create(TransitionBuilder.prototype);\nLinearTransitionBuilder.prototype.constructor = LinearTransitionBuilder;\n\n\n/**\n * Sets this transition to use a fixed duration transition regardless of joint positions.\n *\n * Overrides previous settings from setTransitionTime or setMaxVelocity.\n *\n * @param {number} time - Fixed transition time.\n */\nLinearTransitionBuilder.prototype.setTransitionTime = function(time){\n\tthis._transitionTime = time;\n\tthis._defaultMaxVelocity = null;\n\tthis._maxVelocityByDOF = null;\n};\n\n/**\n * Sets this transition to compute time based on the distance to travel and max velocity\n * of the joints.\n *\n * Overrides previous settings from setTransitionTime or setMaxVelocity.\n *\n * @param {number} defaultMaxVelocity - Use this velocity for all joints not in the map.\n * @param {Object<string,number>} maxVelocityByDOFMap - Override default for joints present in the map.\n */\nLinearTransitionBuilder.prototype.setMaxVelocity = function(defaultMaxVelocity, maxVelocityByDOFMap){\n\tthis._defaultMaxVelocity = defaultMaxVelocity;\n\tthis._maxVelocityByDOF = maxVelocityByDOFMap;\n\tthis._transitionTime = null;\n};\n\n/**\n *\n * @param {Pose} fromPose\n * @param {Motion} toMotion\n * @param {number} timeOffsetInTo\n * @param {string[]} onDOFs\n *\n * @return {Motion}\n * @override\n */\nLinearTransitionBuilder.prototype.generateTransition = function(fromPose, toMotion, timeOffsetInTo, onDOFs){\n\tvar dofName, valueFrom, valueTo, di;\n\n\t//check validity\n\tfor(di = 0; di < onDOFs.length; di++){\n\t\tdofName = onDOFs[di];\n\t\tif(!this._robotInfo.getDOFInfo(dofName)){\n\t\t\tthrow new Error(\"Error transitioning, no dofInfo found for \"+dofName);\n\t\t}\n\t\t//if(!toMotion.getTracks()[dofName]){\n\t\t//\tthrow new Error(\"Error transitioning, no TO value for \"+dofName);\n\t\t//}\n\t\tvar fromVar = fromPose.get(dofName, 0);\n\t\tif(fromVar == null || (Array.isArray(fromVar) && fromVar.length < 1)){ //null or undefined (eqnull)\n\t\t\tthrow new Error(\"Error transitioning, no FROM value for \"+dofName);\n\t\t}\n\t}\n\tMotionValidator.valuesExist(toMotion, onDOFs);\n\n\tvar interpolatorSet = this._robotInfo.getKinematicInfo().getInterpolatorSet();\n\n\tvar transition = new Motion(\"Transition:\"+toMotion.getName());\n\tvar duration = 0;\n\n\tvar toPose = toMotion.getPoseAtTime(timeOffsetInTo, interpolatorSet);\n\n\tvar dga = this._robotInfo.getKinematicInfo().getDOFGlobalAlignment();\n\tdga.refineToGloballyClosestTargetPose(fromPose, toPose, onDOFs);\n\n\tif(this._transitionTime !== null){\n\t\t//fixed time is selected\n\t\tduration = this._transitionTime;\n\t}else {\n\t\t//var slowestJoint;\n\t\t//var slowestJointDistance;\n\t\t//velocity mode is selected, generate time based on distance to travel and selected velocity\n\t\tfor (di = 0; di < onDOFs.length; di++) {\n\t\t\tdofName = onDOFs[di];\n\t\t\tif(this._robotInfo.getDOFInfo(dofName).isMetric()) { //non-metric cannot have a velocity\n\t\t\t\tvalueFrom = fromPose.get(dofName, 0);\n\t\t\t\tvalueTo = toPose.get(dofName, 0);\n\t\t\t\tvar velocity = this._defaultMaxVelocity;\n\t\t\t\tif (this._maxVelocityByDOF && this._maxVelocityByDOF[dofName]) {\n\t\t\t\t\t//this dof has a custom velocity selected\n\t\t\t\t\tvelocity = this._maxVelocityByDOF[dofName];\n\t\t\t\t}\n\t\t\t\tvar distance = Math.abs(valueTo - valueFrom);\n\t\t\t\tvar myTime = distance / velocity;\n\t\t\t\tif (myTime > duration) {\n\t\t\t\t\tduration = myTime;\n\t\t\t\t\t//slowestJoint = dofName;\n\t\t\t\t\t//slowestJointDistance = distance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//console.log(\"LinearTransitionBuilder: DOF:\"+slowestJoint+\" drove a transition time of \"+duration+\" for distance \"+slowestJointDistance);\n\t}\n\tfor (di = 0; di < onDOFs.length; di++) {\n\t\tdofName = onDOFs[di];\n\t\tvalueFrom = fromPose.get(dofName);\n\t\tvalueTo = toPose.get(dofName, 0);\n\t\tvar dataNew = new TimestampedBuffer();\n\t\tdataNew.append(0, valueFrom);\n\t\tdataNew.append(duration, valueTo);\n\t\ttransition.addTrack(new MotionTrack(dofName, dataNew, duration));\n\t}\n\treturn transition;\n};\n\n/**\n * @return {LinearTransitionBuilder}\n * @override\n */\nLinearTransitionBuilder.prototype.clone = function(){\n\tvar t = new LinearTransitionBuilder(this._robotInfo);\n\n\t//shallow copy all primary fields.\n\tvar keys = Object.keys(this);\n\tfor(var i = 0; i < keys.length; i++){\n\t\tt[keys[i]] = this[keys[i]];\n\t}\n\treturn t;\n};\n\nmodule.exports = LinearTransitionBuilder;\n"],"sourceRoot":"/source/"}