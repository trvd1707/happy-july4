{"version":3,"sources":["animation-animate/AccelerationTransitionBuilder.js"],"names":[],"mappings":"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","file":"animation-animate/AccelerationTransitionBuilder.js","sourcesContent":["/**\n * @author jg, mattb\n */\n\n\"use strict\";\n\nvar Motion = require(\"../ifr-motion/base/Motion\");\nvar MotionValidator = require(\"../ifr-motion/base/MotionValidator\");\nvar MotionTrack = require(\"../ifr-motion/base/MotionTrack\");\nvar TimestampedBuffer = require(\"../ifr-motion/base/TimestampedBuffer\");\nvar AccelPlanner = require(\"../ifr-motion/base/AccelPlanner\");\nvar TransitionBuilder = require(\"./TransitionBuilder\");\n\n\n/**\n * Protected constructor for internal use only.\n *\n * AccelerationTransitionBuilders generate transition motions using configurable\n * acceleration and velocity limits.\n *\n * AccelerationTransitionBuilders can be created via the animation module's\n * [createAccelerationTransitionBuilder]{@link module:jibo/animate#createAccelerationTransitionBuilder} method.\n *\n * @param {RobotInfo} robotInfo - Protected constructor parameter.\n * @param {number} defaultMaxVelocity - Protected constructor parameter.\n * @param {number} defaultMaxAcceleration - Protected constructor parameter.\n * @constructor\n * @protected\n * @extends TransitionBuilder\n */\nvar AccelerationTransitionBuilder = function(robotInfo, defaultMaxVelocity, defaultMaxAcceleration)\n{\n\tTransitionBuilder.call(this);\n\n\t/** @type {number} */\n\t/** @private */\n\tthis.minTransitionTime = null;\n\n\t/** @type {number} */\n\t/** @private */\n\tthis.defaultMaxVelocity = defaultMaxVelocity;\n\t/** @type {number} */\n\t/** @private */\n\tthis.defaultMaxAccel = defaultMaxAcceleration;\n\n\t/** @type {Object<string,number>} */\n\t/** @private */\n\tthis.maxVelocityByDOF = {};\n\t/** @type {Object<string,number>} */\n\t/** @private */\n\tthis.maxAccelByDOF = {};\n\n\t/** @type {RobotInfo} */\n\t/** @private */\n\tthis.robotInfo = robotInfo;\n\t/** @type {AccelPlanner} */\n\t/** @private */\n\tthis.planner = new AccelPlanner();\n};\n\nAccelerationTransitionBuilder.prototype = Object.create(TransitionBuilder.prototype);\nAccelerationTransitionBuilder.prototype.constructor = AccelerationTransitionBuilder;\n\n\n/**\n * Sets this transition to use the specified max velocity and acceleration by default; i.e. for\n * all joints that do not have their own custom settings.\n *\n * @param {number} defaultMaxVelocity - Max velocity to use by default.\n * @param {number} defaultMaxAcceleration - Max acceleration to use by default.\n */\nAccelerationTransitionBuilder.prototype.setDefaultLimits = function(defaultMaxVelocity, defaultMaxAcceleration)\n{\n\tthis.defaultMaxVelocity = defaultMaxVelocity;\n\tthis.defaultMaxAccel = defaultMaxAcceleration;\n};\n\n/**\n * Sets this transition to use the specified minimum duration regardless of joint positions.\n *\n * @param {number} time - Minimum transition time.\n */\nAccelerationTransitionBuilder.prototype.setMinTransitionTime = function(time)\n{\n\tthis.minTransitionTime = time;\n};\n\n/**\n * Sets this transition to use the specified max velocity and acceleration for the specified joints/DOFs.\n *\n * @param {string[]} dofNames - DOF names for which the specified limits should apply.\n * @param {number} maxVelocity - Max velocity to use for the specified DOFs.\n * @param {number} maxAcceleration - Max acceleration to use for the specified DOFs.\n */\nAccelerationTransitionBuilder.prototype.setLimits = function(dofNames, maxVelocity, maxAcceleration)\n{\n\tfor (var i=0; i<dofNames.length; i++)\n\t{\n\t\tthis.maxVelocityByDOF[dofNames[i]] = maxVelocity;\n\t\tthis.maxAccelByDOF[dofNames[i]] = maxAcceleration;\n\t}\n};\n\n/**\n *\n * @param {Pose} fromPose\n * @param {Motion} toMotion\n * @param {number} timeOffsetInTo\n * @param {string[]} onDOFs\n *\n * @return {Motion}\n * @override\n */\nAccelerationTransitionBuilder.prototype.generateTransition = function(fromPose, toMotion, timeOffsetInTo, onDOFs)\n{\n\tvar dofName, valueFrom, velocityFrom, valueTo, di;\n\tvar tickInterval = 1/30;\n\n\t//check validity\n\tfor (di = 0; di < onDOFs.length; di++)\n\t{\n\t\tdofName = onDOFs[di];\n\t\tif (!this.robotInfo.getDOFInfo(dofName))\n\t\t{\n\t\t\tthrow new Error(\"Error transitioning, no dofInfo found for \"+dofName);\n\t\t}\n\t\tvar fromVar = fromPose.get(dofName, 0);\n\t\tif (fromVar == null || (Array.isArray(fromVar) && fromVar.length < 1))\n\t\t{\n\t\t\tthrow new Error(\"Error transitioning, no FROM value for \"+dofName);\n\t\t}\n\t}\n\tMotionValidator.valuesExist(toMotion, onDOFs);\n\n\tvar interpolatorSet = this.robotInfo.getKinematicInfo().getInterpolatorSet();\n\n\tvar transition = new Motion(\"Transition:\"+toMotion.getName());\n\tvar duration = 0;\n\n\tvar toPose = toMotion.getPoseAtTime(timeOffsetInTo, interpolatorSet);\n\n\tvar dga = this.robotInfo.getKinematicInfo().getDOFGlobalAlignment();\n\tdga.refineToGloballyClosestTargetPose(fromPose, toPose, onDOFs);\n\n\t//var slowestJoint;\n\t//var slowestJointDistance;\n\tfor (di = 0; di < onDOFs.length; di++)\n\t{\n\t\tdofName = onDOFs[di];\n\t\tif (this.robotInfo.getDOFInfo(dofName).isMetric()) { //non-metric cannot have a velocity\n\t\t\tvalueFrom = fromPose.get(dofName, 0);\n\t\t\tvelocityFrom = fromPose.get(dofName, 1);\n\t\t\tif (velocityFrom === null)\n\t\t\t{\n\t\t\t\tvelocityFrom = 0;\n\t\t\t}\n\t\t\tvalueTo = toPose.get(dofName, 0);\n\t\t\tvar accel = this.defaultMaxAccel;\n\t\t\tif (this.maxAccelByDOF[dofName])\n\t\t\t{\n\t\t\t\t//this dof has a custom acceleration selected\n\t\t\t\taccel = this.maxAccelByDOF[dofName];\n\t\t\t}\n\n\t\t\tvar myTime = this.planner.computeWithFixedAccel(velocityFrom, 0, valueTo - valueFrom, accel)._totalTime;\n\t\t\tif (myTime > duration)\n\t\t\t{\n\t\t\t\tduration = myTime;\n\t\t\t\t//slowestJoint = dofName;\n\t\t\t\t//slowestJointDistance = Math.abs(valueTo - valueFrom);\n\t\t\t}\n\t\t}\n\t}\n\t//console.log(\"AccelerationTransitionBuilder: DOF:\"+slowestJoint+\" drove a transition time of \"+duration+\" for distance \"+slowestJointDistance);\n\n\tif (this.minTransitionTime && this.minTransitionTime > duration)\n\t{\n\t\tduration = this.minTransitionTime;\n\t}\n\n\t/** @type {Object<string,AccelPlan>} */\n\tvar accelPlans = {};\n\tfor (di = 0; di < onDOFs.length; di++)\n\t{\n\t\tdofName = onDOFs[di];\n\t\tif (this.robotInfo.getDOFInfo(dofName).isMetric()) { //non-metric cannot have a velocity\n\t\t\tvalueFrom = fromPose.get(dofName, 0);\n\t\t\tvelocityFrom = fromPose.get(dofName, 1);\n\t\t\tif (velocityFrom === null)\n\t\t\t{\n\t\t\t\tvelocityFrom = 0;\n\t\t\t}\n\t\t\tvalueTo = toPose.get(dofName, 0);\n\n\t\t\tif(duration > 0.0000000001){ //unstable to have fixed time very short plans, arbitrary accel.  (also, unnecessary)\n\t\t\t\taccelPlans[dofName] = this.planner.computeWithFixedTime(velocityFrom, 0, valueTo - valueFrom, duration);\n\t\t\t}else{\n\t\t\t\taccelPlans[dofName] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (di = 0; di < onDOFs.length; di++)\n\t{\n\t\tdofName = onDOFs[di];\n\t\tvalueFrom = fromPose.get(dofName, 0);\n\t\tvalueTo = toPose.get(dofName, 0);\n\t\tvar dataNew = new TimestampedBuffer();\n\t\tdataNew.append(0, valueFrom);\n\n\t\tvar plan = accelPlans[dofName];\n\t\tif (plan)\n\t\t{\n\t\t\tvar t = tickInterval;\n\t\t\twhile (t < duration)\n\t\t\t{\n\t\t\t\tvar planSample = valueFrom + plan.displacementAtTime(t);\n\t\t\t\tdataNew.append(t, planSample);\n\t\t\t\tt = t + tickInterval;\n\t\t\t}\n\t\t}\n\n\t\tdataNew.append(duration, valueTo);\n\t\ttransition.addTrack(new MotionTrack(dofName, dataNew, duration));\n\t}\n\n\treturn transition;\n};\n\n/**\n * @return {AccelerationTransitionBuilder}\n * @override\n */\nAccelerationTransitionBuilder.prototype.clone = function()\n{\n\tvar t = new AccelerationTransitionBuilder(this.robotInfo, this.defaultMaxVelocity, this.defaultMaxAccel);\n\n\tt.minTransitionTime = this.minTransitionTime;\n\n\tvar i;\n\tvar dofs = Object.keys(this.maxVelocityByDOF);\n\tfor (i=0; i<dofs.length; i++)\n\t{\n\t\tt.maxVelocityByDOF[dofs[i]] = this.maxVelocityByDOF[dofs[i]];\n\t}\n\n\tdofs = Object.keys(this.maxAccelByDOF);\n\tfor (i=0; i<dofs.length; i++)\n\t{\n\t\tt.maxAccelByDOF[dofs[i]] = this.maxAccelByDOF[dofs[i]];\n\t}\n\n\treturn t;\n};\n\n\nmodule.exports = AccelerationTransitionBuilder;\n"],"sourceRoot":"/source/"}