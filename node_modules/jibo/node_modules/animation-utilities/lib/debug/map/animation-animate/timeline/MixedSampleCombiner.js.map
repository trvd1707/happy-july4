{"version":3,"sources":["animation-animate/timeline/MixedSampleCombiner.js"],"names":[],"mappings":";;;;AAIA;;AAEA,IAAI,iBAAiB,QAAQ,kBAAR,CAAjB;;;;;;AAOJ,IAAI,sBAAsB,SAAtB,mBAAsB,GAC1B;AACC,iBAAe,IAAf,CAAoB,IAApB;;;AADD,MAIC,CAAK,YAAL,GAAoB,EAApB,CAJD;CAD0B;;AAQ1B,oBAAoB,SAApB,GAAgC,OAAO,MAAP,CAAc,eAAe,SAAf,CAA9C;AACA,oBAAoB,SAApB,CAA8B,WAA9B,GAA4C,mBAA5C;;;;;;;;AASA,oBAAoB,SAApB,CAA8B,WAA9B,GAA4C,UAAS,QAAT,EAAmB,QAAnB,EAC5C;AACC,OAAK,IAAI,IAAE,CAAF,EAAK,IAAE,SAAS,MAAT,EAAiB,GAAjC,EACA;AACC,SAAK,YAAL,CAAkB,SAAS,CAAT,CAAlB,IAAiC,QAAjC,CADD;GADA;CAF2C;;;;;;;;;;;;AAkB5C,oBAAoB,SAApB,CAA8B,cAA9B,GAA+C,UAAS,OAAT,EAAkB,UAAlB,EAA8B,SAA9B,EAAyC,UAAzC,EAC/C;AACC,MAAI,WAAW,KAAK,YAAL,CAAkB,OAAlB,CAAX,CADL;AAEC,MAAI,CAAC,QAAD,EACJ;AACC,UAAM,IAAI,KAAJ,CAAU,oCAAkC,OAAlC,CAAhB,CADD;GADA;AAIA,SAAO,SAAS,cAAT,CAAwB,OAAxB,EAAiC,UAAjC,EAA6C,SAA7C,EAAwD,UAAxD,CAAP,CAND;CAD+C;;AAW/C,OAAO,OAAP,GAAiB,mBAAjB","file":"animation-animate/timeline/MixedSampleCombiner.js","sourcesContent":["/**\n * @author mattb\n */\n\n\"use strict\";\n\nvar SampleCombiner = require(\"./SampleCombiner\");\n\n\n/**\n * @constructor\n * @extends SampleCombiner\n */\nvar MixedSampleCombiner = function()\n{\n\tSampleCombiner.call(this);\n\n\t/** @type {Object.<string, SampleCombiner>} */\n\tthis._combinerMap = {};\n};\n\nMixedSampleCombiner.prototype = Object.create(SampleCombiner.prototype);\nMixedSampleCombiner.prototype.constructor = MixedSampleCombiner;\n\n\n/**\n * Sets which combiner to use for the specified DOFs.\n *\n * @param {string[]} dofNames\n * @param {SampleCombiner} combiner\n */\nMixedSampleCombiner.prototype.addCombiner = function(dofNames, combiner)\n{\n\tfor (var i=0; i<dofNames.length; i++)\n\t{\n\t\tthis._combinerMap[dofNames[i]] = combiner;\n\t}\n};\n\n/**\n * Combines samples using whichever combiner is specified for the given DOF.\n *\n * @param {string} dofName\n * @param {number[]} samplePrev\n * @param {number[]} sampleNew\n * @param {Object.<string, string|number|boolean>} properties\n * @return {number[]}\n * @override\n */\nMixedSampleCombiner.prototype.combineSamples = function(dofName, samplePrev, sampleNew, properties)\n{\n\tvar combiner = this._combinerMap[dofName];\n\tif (!combiner)\n\t{\n\t\tthrow new Error(\"no combiner specified for DOF: \"+dofName);\n\t}\n\treturn combiner.combineSamples(dofName, samplePrev, sampleNew, properties);\n};\n\n\nmodule.exports = MixedSampleCombiner;\n"],"sourceRoot":"/source/"}