/**
 * @author mattb
 */

"use strict";

/**
 * @param {Clock} clock
 * @private
 * @constructor
 */

var RendererOutput = function RendererOutput(clock) {
	/** @type {Clock} */
	this.clock = clock;
	/** @type {JiboKinematicInfo} */
	this.kinematicInfo = null;
	/** @type {RobotRenderer[]} */
	this.renderers = [];
	/** @type {Time} */
	this.outputTime = null;
	/** @type {Pose} */
	this.outputPose = null;
};

/**
 * @param {JiboKinematicInfo} kinematicInfo
 */
RendererOutput.prototype.setKinematicInfo = function (kinematicInfo) {
	this.kinematicInfo = kinematicInfo;
};

/**
 * @param {RobotRenderer} renderer
 */
RendererOutput.prototype.addRenderer = function (renderer) {
	this.renderers.push(renderer);
};

/**
 * @param {RobotRenderer} renderer
 */
RendererOutput.prototype.removeRenderer = function (renderer) {
	var rendererIndex = this.renderers.indexOf(renderer);
	if (rendererIndex > -1) {
		this.renderers.splice(rendererIndex, 1);
	}
};

/**
 * @return {RobotRenderer[]}
 */
RendererOutput.prototype.getRenderers = function () {
	return this.renderers.slice(0);
};

/**
 * @param {Time} time
 * @param {Pose} pose
 */
RendererOutput.prototype.handleOutput = function (time, pose) {
	this.outputTime = time;
	this.outputPose = pose;
};

RendererOutput.prototype.update = function () {
	if (this.kinematicInfo !== null && this.outputPose !== null) {
		var pose = this.outputPose;

		var dofValues = {};
		var dofNames = pose.getDOFNames();
		for (var dofIndex = 0; dofIndex < dofNames.length; dofIndex++) {
			var dofValue = pose.get(dofNames[dofIndex], 0);
			dofValues[dofNames[dofIndex]] = dofValue;
		}

		for (var r = 0; r < this.renderers.length; r++) {
			this.renderers[r].display(dofValues);
		}
	}
};

RendererOutput.prototype.dispose = function () {
	for (var i = 0; i < this.renderers.length; i++) {
		this.renderers[i].dispose();
	}
	this.renderers = [];
	this.kinematicInfo = null;
	this.outputPose = null;
};

module.exports = RendererOutput;
//# sourceMappingURL=../map/animation-visualize/RendererOutput.js.map
