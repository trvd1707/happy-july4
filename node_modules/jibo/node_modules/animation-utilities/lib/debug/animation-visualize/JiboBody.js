/**
 * @author mattb
 */

"use strict";

var ArticulatedModelLoader = require("../ifr-geometry/loaders/ArticulatedModelLoader");
var KinematicsLoader = require("../ifr-motion/loaders/KinematicsLoader");
var TextureControl = require("../ifr-motion/dofs/TextureControl");
var THREE = require("three");

/**
 * @param {JiboConfig} jiboConfig
 * @private
 * @constructor
 */
var JiboBody = function JiboBody(jiboConfig) {
	/** @type {JiboConfig} */
	this._config = jiboConfig;

	/** @type {CachedImageLoader} */
	this._textureLoader = null;

	/** @type {THREE.Object3D} */
	this._modelRoot = null;
	/** @type {ModelControlGroup} */
	this._modelControlGroup = null;

	/** @type {!boolean} */
	this.loadSucceeded = false;
	/** @type {string} */
	this.loadMessage = "";
};

/**
 * @param {CachedImageLoader} textureLoader
 */
JiboBody.prototype.setTextureLoader = function (textureLoader) {
	this._textureLoader = textureLoader;
};

JiboBody.prototype.load = function (callback) {
	var self = this;

	var loader = new ArticulatedModelLoader();
	loader.modelLoader.defaultMaterial.side = THREE.DoubleSide;

	loader.load("body model", self._config.getBodyGeometryURL(), self._config.getBodySkeletonURL(), function () {
		var result = loader.getResult();
		if (result.success) {
			self._modelRoot = result.modelRoot;

			var kinematicsLoader = new KinematicsLoader();
			/** @type {TextureControl.Factory} */
			var textureFactory = kinematicsLoader.getModelControlFactory(TextureControl.Factory.prototype._controlType);
			if (self._textureLoader) {
				textureFactory.setSharedImageLoader(self._textureLoader);
			}

			kinematicsLoader.load(self._config.getBodyKinematicsURL(), function () {
				var kinematicsResult = kinematicsLoader.getResult();
				if (kinematicsResult.success) {
					self._modelControlGroup = kinematicsResult.modelControlGroup;
					self._modelControlGroup.attachToModel(self._modelRoot);

					self.loadSucceeded = true;
				} else {
					self.loadSucceeded = false;
					self.loadMessage = "kinematics load failed with message: " + kinematicsResult.message + ", URL = " + kinematicsResult.url;
				}
				if (callback) {
					callback();
				}
			});
		} else {
			self.loadSucceeded = false;
			self.loadMessage = "" + result.message + ", model URL = " + result.modelUrl + ", skeleton URL = " + result.skeletonUrl;
			if (callback) {
				callback();
			}
		}
	});
};

/**
 * @return {THREE.Object3D}
 */
JiboBody.prototype.getModelRoot = function () {
	return this._modelRoot;
};

/**
 * @return {ModelControlGroup}
 */
JiboBody.prototype.getModelControlGroup = function () {
	return this._modelControlGroup;
};

/**
 * @param {SceneInfo} sceneInfo
 * @return {THREE.WebGLRenderTarget}
 */
JiboBody.prototype.constructFaceScreenRenderTarget = function (sceneInfo) {
	var renderTexture = new THREE.WebGLRenderTarget(800, 450);
	renderTexture.minFilter = THREE.LinearFilter;

	var faceScreenMesh = this.getModelRoot().getObjectByName(sceneInfo.faceScreenMeshName, true);
	faceScreenMesh.material.map = renderTexture;

	return renderTexture;
};

module.exports = JiboBody;
//# sourceMappingURL=../map/animation-visualize/JiboBody.js.map
