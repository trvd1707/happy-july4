/**
 * @author mattb
 */

"use strict";

var BodyData = require("./BodyData");
var Clock = require("../ifr-core/Clock");

/**
 * @param {string} bodyServiceURL - base URL for the body service
 * @param {string} [sessionToken] - optional session security token
 * @constructor
 */
var LEDInterface = function LEDInterface(bodyServiceURL, sessionToken) {
	/** @type {LEDCommand} */
	this.command = new BodyData.LEDCommand();
	this.command.color = [0, 0, 0];
	this.command.setRateLimit(50);

	if (sessionToken) {
		this.commandSocket = new WebSocket(bodyServiceURL + "/led_command", sessionToken);
	} else {
		this.commandSocket = new WebSocket(bodyServiceURL + "/led_command");
	}
};

/**
 * @param {number[]} rgbValue - RGB color value array, values in percentage of maximum [0.0, 1.0]
 * @param {number} rateLimit - maximum rate of change of color values, in percent/second
 * @return {boolean} true if the command was set successfully
 */
LEDInterface.prototype.setCommand = function (rgbValue, rateLimit) {
	for (var i = 0; i < 3; i++) {
		this.command.color[i] = rgbValue[i];
	}
	this.command.setRateLimit(rateLimit);

	return true;
};

/**
 * @return {boolean} true if the command was sent successfully
 */
LEDInterface.prototype.sendCommand = function () {
	if (this.commandSocket.readyState === WebSocket.OPEN) {
		this.command.setTimestamp(Clock.currentTime());
		var cmd = JSON.stringify(this.command);
		this.commandSocket.send(cmd);
		return true;
	} else {
		return false;
	}
};

/**
 * @return {boolean} true if the LED interface is connected
 */
LEDInterface.prototype.isConnected = function () {
	return this.commandSocket.readyState === WebSocket.OPEN;
};

LEDInterface.prototype.close = function () {
	this.commandSocket.close();
};

module.exports = LEDInterface;
//# sourceMappingURL=../map/animation-body/LEDInterface.js.map
