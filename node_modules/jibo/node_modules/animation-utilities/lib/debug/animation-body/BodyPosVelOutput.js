/**
 * @author mattb
 */

"use strict";

var BodyData = require("./BodyData");
var BodyOutput = require("./BodyOutput");

/**
 * Timeline output connecting to the body service.
 * Communicates with the (remote) position-velocity control mode running on the body boards.
 * @param {Clock} clock - the timeline clock
 * @param {RobotInfo} robotInfo - robot info object
 * @param {string} bodyServiceURL - base URL for the body service
 * @param {boolean} [startEnabled] - optional, if true, start up with motors enabled (defaults to false)
 * @param {number} [updateIntervalMillis] - if specified and non-zero, auto-update at the given interval
 * @param {string} [sessionToken] - optional session security token
 * @constructor
 */
var BodyPosVelOutput = function BodyPosVelOutput(clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken) {
	BodyOutput.call(this, clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken);
	/** @type {Time} */
	this.startTime = null;
	/** @type {SingleAxisState[]} */
	this.initialStates = [];
};

BodyPosVelOutput.prototype = Object.create(BodyOutput.prototype);
BodyPosVelOutput.prototype.constructor = BodyOutput;

BodyPosVelOutput.prototype.update = function () {
	var i;
	/** @type {Time} */
	var currentTime = this.clock.currentTime();

	var targets = this.computeTargetsForTime(currentTime.add(this.reactionTime));

	if (targets !== null && this.motionInterface.isConnected()) {
		if (this.startTime === null) {
			//grab the initial states and start time after we are first connected for fade-in
			this.startTime = currentTime;
			for (i = 0; i < this.dofNames.length; i++) {
				this.initialStates.push(this.motionInterface.getState(this.dofNames[i]));
			}
		}

		var fadeAlpha = 1;
		var fadeSecondsMax = 8;
		if (currentTime.subtract(this.startTime) < fadeSecondsMax) {
			var maxDistance = 0;
			for (i = 0; i < this.dofNames.length; i++) {
				if (Math.abs(this.initialStates[i].pos) > maxDistance) {
					maxDistance = Math.abs(this.initialStates[i].pos);
				}
			}
			maxDistance = Math.max(0, Math.min(Math.PI, maxDistance));
			var fadeSeconds = fadeSecondsMax * (maxDistance / Math.PI);

			fadeAlpha = currentTime.subtract(this.startTime) / fadeSeconds;
			fadeAlpha = Math.max(0, Math.min(1, fadeAlpha));
		}

		for (i = 0; i < this.dofNames.length; i++) {
			var commandMode = this.enabledArray[i] ? BodyData.AxisCommandMode.POS_VEL : BodyData.AxisCommandMode.LIMP;
			var accelerationLimit = 50;
			var command;
			if (fadeAlpha < 1) {
				command = [targets[i].velocity * fadeAlpha, targets[i].position * fadeAlpha + this.initialStates[i].pos * (1 - fadeAlpha)];
			} else {
				command = [targets[i].velocity, targets[i].position];
			}

			//send only 1 value if we're in "limp" mode
			this.motionInterface.setCommand(this.dofNames[i], commandMode, commandMode === BodyData.AxisCommandMode.POS_VEL ? command : 0, null, accelerationLimit, null);

			if (this.infoListeners.length > 0) {
				var state = this.motionInterface.getState(this.dofNames[i]);
				var info = {
					dofName: this.dofNames[i],
					timestamp: currentTime,
					observedPosition: state.pos,
					targetPosition: command[1],
					observedVelocity: state.vel,
					commandVelocity: command[0],
					refVelocity: state.ref
				};
				for (var c = 0; c < this.infoListeners.length; c++) {
					this.infoListeners[c](info);
				}
			}
		}

		this.motionInterface.sendCommand();
	}
};

module.exports = BodyPosVelOutput;
//# sourceMappingURL=../map/animation-body/BodyPosVelOutput.js.map
