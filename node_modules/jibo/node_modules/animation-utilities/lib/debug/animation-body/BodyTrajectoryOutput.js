/**
 * @author mattb
 */

"use strict";

var BodyData = require("./BodyData");
var BodyOutput = require("./BodyOutput");

/**
 * Timeline output connecting to the body service.
 * Communicates with the (remote) trajectory control mode running on the body boards.
 * @param {Clock} clock - the timeline clock
 * @param {RobotInfo} robotInfo - robot info object
 * @param {string} bodyServiceURL - base URL for the body service
 * @param {boolean} [startEnabled] - optional, if true, start up with motors enabled (defaults to false)
 * @param {number} [updateIntervalMillis] - if specified and non-zero, auto-update at the given interval
 * @param {string} [sessionToken] - optional session security token
 * @constructor
 */
var BodyTrajectoryOutput = function BodyTrajectoryOutput(clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken) {
	BodyOutput.call(this, clock, robotInfo, bodyServiceURL, startEnabled, updateIntervalMillis, sessionToken);
};

BodyTrajectoryOutput.prototype = Object.create(BodyOutput.prototype);
BodyTrajectoryOutput.prototype.constructor = BodyOutput;

BodyTrajectoryOutput.prototype.update = function () {
	var currentTime = this.clock.currentTime();

	var targets = this.computeTargetsForTime(currentTime.add(this.reactionTime));

	if (targets !== null && this.motionInterface.isConnected()) {
		for (var i = 0; i < this.dofNames.length; i++) {
			var commandMode = this.enabledArray[i] ? BodyData.AxisCommandMode.TRAJECTORY : BodyData.AxisCommandMode.LIMP;
			var interceptTime = 0.3;
			var accelerationLimit = 30;
			var command = [targets[i].velocity, targets[i].position, interceptTime, 0];

			//send only 1 value if we're in "limp" mode
			this.motionInterface.setCommand(this.dofNames[i], commandMode, commandMode === BodyData.AxisCommandMode.TRAJECTORY ? command : 0, null, accelerationLimit, null);

			if (this.infoListeners.length > 0) {
				var state = this.motionInterface.getState(this.dofNames[i]);
				var info = {
					dofName: this.dofNames[i],
					timestamp: currentTime,
					observedPosition: state.pos,
					targetPosition: targets[i].position,
					observedVelocity: state.vel,
					commandVelocity: targets[i].velocity
				};
				for (var c = 0; c < this.infoListeners.length; c++) {
					this.infoListeners[c](info);
				}
			}
		}

		this.motionInterface.sendCommand();
	}
};

module.exports = BodyTrajectoryOutput;
//# sourceMappingURL=../map/animation-body/BodyTrajectoryOutput.js.map
