/**
 * @author jg
 */

"use strict";

var SampleCombiner = require("./SampleCombiner");

/**
 * Scale incoming samples by our samples.  Our samples will first be mapped
 * from their raw dof values, using linear interpolation, based on the 2 poses
 * provided the constructor.
 *
 * @param {Pose} unityScalePose - dof values to map to scale of 1 (defaults to 1's)
 * @param {Pose} zeroScalePose - dof values to map to scale of 0 (defaults to 0's)
 * @param {string[]} dofNames - used to initialize defaults.  should include at least all dofs that this combined will be combining
 * @constructor
 * @extends SampleCombiner
 */
var ScaleSampleCombiner = function ScaleSampleCombiner(unityScalePose, zeroScalePose, dofNames) {
	SampleCombiner.call(this);

	//init the interpolation mapping
	this._unityScales = {};
	this._zeroScales = {};
	for (var i = 0; i < dofNames.length; i++) {
		var dofName = dofNames[i];
		if (unityScalePose != null && unityScalePose.get(dofName) != null) {
			this._unityScales[dofName] = unityScalePose.get(dofName)[0];
		} else {
			this._unityScales[dofName] = 1;
		}
		if (zeroScalePose != null && zeroScalePose.get(dofName) != null) {
			this._zeroScales[dofName] = zeroScalePose.get(dofName)[0];
		} else {
			this._zeroScales[dofName] = 0;
		}
	}
};

ScaleSampleCombiner.prototype = Object.create(SampleCombiner.prototype);
ScaleSampleCombiner.prototype.constructor = ScaleSampleCombiner;

/**
 * Scales all components of samplePrev by sampleNew's 0th component
 * mapped to a scale using unityScale and zeroScale values.
 *
 * @param {string} dofName
 * @param {number[]} samplePrev
 * @param {number[]} sampleNew
 * @param {Object.<string, string|number|boolean>} properties
 * @return {number[]}
 * @override
 */
ScaleSampleCombiner.prototype.combineSamples = function (dofName, samplePrev, sampleNew, properties) {
	// eslint-disable-line no-unused-vars
	var r = [];
	var unityVal = this._unityScales[dofName];
	var zeroVal = this._zeroScales[dofName];
	var scale = (sampleNew[0] - zeroVal) / (unityVal - zeroVal) + zeroVal;
	if (isNaN(scale)) {
		scale = 0;
	}

	for (var i = 0; i < samplePrev.length; i++) {
		r.push(samplePrev[i] * scale);
	}
	return r;
	//return samplePrev;
};

module.exports = ScaleSampleCombiner;
//# sourceMappingURL=../../map/animation-animate/timeline/ScaleSampleCombiner.js.map
