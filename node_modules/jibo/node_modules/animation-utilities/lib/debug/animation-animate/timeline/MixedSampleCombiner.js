/**
 * @author mattb
 */

"use strict";

var SampleCombiner = require("./SampleCombiner");

/**
 * @constructor
 * @extends SampleCombiner
 */
var MixedSampleCombiner = function MixedSampleCombiner() {
  SampleCombiner.call(this);

  /** @type {Object.<string, SampleCombiner>} */
  this._combinerMap = {};
};

MixedSampleCombiner.prototype = Object.create(SampleCombiner.prototype);
MixedSampleCombiner.prototype.constructor = MixedSampleCombiner;

/**
 * Sets which combiner to use for the specified DOFs.
 *
 * @param {string[]} dofNames
 * @param {SampleCombiner} combiner
 */
MixedSampleCombiner.prototype.addCombiner = function (dofNames, combiner) {
  for (var i = 0; i < dofNames.length; i++) {
    this._combinerMap[dofNames[i]] = combiner;
  }
};

/**
 * Combines samples using whichever combiner is specified for the given DOF.
 *
 * @param {string} dofName
 * @param {number[]} samplePrev
 * @param {number[]} sampleNew
 * @param {Object.<string, string|number|boolean>} properties
 * @return {number[]}
 * @override
 */
MixedSampleCombiner.prototype.combineSamples = function (dofName, samplePrev, sampleNew, properties) {
  var combiner = this._combinerMap[dofName];
  if (!combiner) {
    throw new Error("no combiner specified for DOF: " + dofName);
  }
  return combiner.combineSamples(dofName, samplePrev, sampleNew, properties);
};

module.exports = MixedSampleCombiner;
//# sourceMappingURL=../../map/animation-animate/timeline/MixedSampleCombiner.js.map
