/**
 * @author mattb
 */

"use strict";

var LayerCombiner = require("./LayerCombiner");

/**
 * @constructor
 */
var SimpleLayerCombiner = function SimpleLayerCombiner() {
	LayerCombiner.call(this);

	/** @type {Object.<string, SampleCombiner>} */
	this.sampleCombiners = {};
};

SimpleLayerCombiner.prototype = Object.create(LayerCombiner.prototype);
SimpleLayerCombiner.prototype.constructor = SimpleLayerCombiner;

/**
 * @param {string} layerName
 * @param {SampleCombiner} sampleCombiner
 */
SimpleLayerCombiner.prototype.setSampleCombiner = function (layerName, sampleCombiner) {
	this.sampleCombiners[layerName] = sampleCombiner;
};

/**
 * @param {string[]} layerNames
 * @param {LayerState[]} layerStates
 * @returns {LayerState}
 */
SimpleLayerCombiner.prototype.combineLayers = function (layerNames, layerStates) {
	if (!layerNames) {
		return null;
	}

	var combinedState = layerStates[0].getCopy();
	for (var i = 1; i < layerNames.length; i++) {
		var dofNames = layerStates[i].getDOFNames();
		for (var d = 0; d < dofNames.length; d++) {
			this.incrementState(combinedState, layerNames[i], layerStates[i], dofNames[d]);
		}
	}

	return combinedState;
};

/**
 * @param {LayerState} combinedState
 * @param {string} layerName
 * @param {LayerState} layerState
 * @param {string} dofName
 * @abstract
 */
SimpleLayerCombiner.prototype.incrementState = function (combinedState, layerName, layerState, dofName) {
	var currentValue = combinedState.getPose().get(dofName);
	var layerValue = layerState.getPose().get(dofName);

	var combiner = this.sampleCombiners[layerName];

	if (!currentValue || !layerValue || !combiner) {
		// skip layer
	} else {
			var combinedValue = combiner.combineSamples(dofName, currentValue, layerValue, null);
			combinedState.getPose().set(dofName, combinedValue);
		}
};

module.exports = SimpleLayerCombiner;
//# sourceMappingURL=../../map/animation-animate/timeline/SimpleLayerCombiner.js.map
