/**
 * @author jg
 * Copyright 2015 IF Robots LLC
 */

"use strict";

var PointADOF = require("./PointADOF");
var LookatDOF = require("./LookatDOF");

/**
 *
 * @param {string} name
 * @param {string} controlledDOFName - should be a single translation dof
 * @param {string} centralTransformName - transform to use as anchor for angle computations
 * @param {THREE.Vector3} forwardDirection - forward from centralTransform
 * @param {THREE.Vector3} planeNormal - normal to restrict targets to plane (so motion is along single axis, e.g., left/right, up/down)
 * @param {number} internalDistance - distance behind (along -forward) centralTransform to be calculating angles from
 * @param {number} dofMin - value will be clamped to min, and max-min will be used for error ratio
 * @param {number} dofMax - value will be clamped to max, and max-min will be used for error ratio
 * @extends LookatDOF
 * @constructor
 */
var PlaneDisplacementLookatDOF = function PlaneDisplacementLookatDOF(name, controlledDOFName, centralTransformName, forwardDirection, planeNormal, internalDistance, dofMin, dofMax) {
	LookatDOF.call(this, name, controlledDOFName);

	/** @type {TranslationControl} */
	this._control = null;

	/**	@type {THREE.Vector3} */
	this._forwardDir = forwardDirection;

	/**	@type {string} */
	this._centralTransformName = centralTransformName;

	/**	@type number */
	this._internalDistance = internalDistance;

	/** @type {THREE.Object3D} */
	this._planeNormal = planeNormal;

	/** @type {THREE.Object3D} */
	this._controlledTransform = null;

	/** @type {THREE.Object3D} */
	this._centralTransform = null;

	/** @type {number} */
	this._dofMin = dofMin;

	/** @type {number} */
	this._dofMax = dofMax;
};

PlaneDisplacementLookatDOF.prototype = Object.create(LookatDOF.prototype);
PlaneDisplacementLookatDOF.prototype.constructor = PlaneDisplacementLookatDOF;

/**
 * @param {KinematicGroup} kinematicGroup group to use for kinematic math (assumed to be configured as desired before valToPointAtTarget calls)
 */
PlaneDisplacementLookatDOF.prototype.connectToGroup = function (kinematicGroup) {
	LookatDOF.prototype.connectToGroup.call(this, kinematicGroup);
	if (this._kinematicGroup) {
		this._control = this._kinematicGroup.getModelControlGroup().getControlForDOF(this._controlledDOFName);
		this._controlledTransform = this._kinematicGroup.getTransform(this._control.getTransformName());
		this._centralTransform = this._kinematicGroup.getTransform(this._centralTransformName);
	} else {
		this._control = null;
		this._controlledTransform = null;
		this._centralTransform = null;
	}
};

/**
 * Compute value is relative to current setup of the hierarchy that this._transform is part of.
 *
 * @param {THREE.Vector2} target
 * @param {PointReport} [pointReport] - inplace arg to return metadata about computation
 * @return {number} Value to cause this._control to point local this._forwardDir at the target
 * @override
 */
PlaneDisplacementLookatDOF.prototype.valToPointAtTarget = function (target, pointReport) {
	var val = PointADOF.planeIntersectFromRear(this._centralTransform, target, null, this._forwardDir, this._planeNormal, this._internalDistance, pointReport);
	return Math.max(Math.min(val, this._dofMax), this._dofMin);
};

/**
 * Provide the ratio that this error represents for the range of motion of this LookatDOF
 * @param errorAbsolute absolute error
 * @return {number} ratio that absoluteError represents of the total range of this LookatDOF
 * @override
 */
PlaneDisplacementLookatDOF.prototype.errorRatio = function (errorAbsolute) {
	return Math.abs(errorAbsolute / (this._dofMax - this._dofMin));
};

PlaneDisplacementLookatDOF.prototype.suggestForwardTarget = function (inplaceVec) {
	if (this._centralTransform == null) {
		return null;
	} else {
		inplaceVec.copy(this._forwardDir);
		inplaceVec.multiplyScalar(10);
		this._centralTransform.localToWorld(inplaceVec);
		return inplaceVec;
	}
};

module.exports = PlaneDisplacementLookatDOF;
//# sourceMappingURL=../../map/ifr-motion/lookat/PlaneDisplacementLookatDOF.js.map
