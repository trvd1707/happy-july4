/**
 * @author jg
 * Copyright 2015 IF Robots LLC
 */

"use strict";

/**
 *
 * @param {Pose} holdPose
 * @param {Pose} optimalPose
 * @param {Pose} filteredOutput
 * @constructor
 */

var LookatNodeDistanceReport = function LookatNodeDistanceReport() {

	/** @type{number} */
	this.highestDistanceHoldToFiltered = 0;

	/** @type{number} */
	this.highestDistanceHoldToOptimal = 0;

	/** @type{number} */
	this.highestDistanceOptimalToFiltered = 0;
};

LookatNodeDistanceReport.prototype.compute = function (holdPose, optimalPose, filteredOutput) {

	this.highestDistanceHoldToFiltered = 0;

	this.highestDistanceHoldToOptimal = 0;

	this.highestDistanceOptimalToFiltered = 0;

	var dofNames = holdPose.getDOFNames();
	for (var i = 0; i < dofNames.length; i++) {
		var dofName = dofNames[i];

		var distanceHoldToFiltered = Math.abs(holdPose.get(dofName, 0) - filteredOutput.get(dofName, 0));
		var distanceHoldToOptimal = Math.abs(holdPose.get(dofName, 0) - optimalPose.get(dofName, 0));
		var distanceOptimalToFiltered = Math.abs(optimalPose.get(dofName, 0) - filteredOutput.get(dofName, 0));

		if (distanceHoldToFiltered > this.highestDistanceHoldToFiltered) {
			this.highestDistanceHoldToFiltered = distanceHoldToFiltered;
		}
		if (distanceHoldToOptimal > this.highestDistanceHoldToOptimal) {
			this.highestDistanceHoldToOptimal = distanceHoldToOptimal;
		}
		if (distanceOptimalToFiltered > this.highestDistanceOptimalToFiltered) {
			this.highestDistanceOptimalToFiltered = distanceOptimalToFiltered;
		}
	}
};

module.exports = LookatNodeDistanceReport;
//# sourceMappingURL=../../map/ifr-motion/lookat/LookatNodeDistanceReport.js.map
