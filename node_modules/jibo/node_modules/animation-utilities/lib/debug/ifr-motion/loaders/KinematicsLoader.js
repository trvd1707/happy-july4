/**
 * @author mattb
 * Copyright 2014 IF Robots LLC
 */

"use strict";

var ModelControlGroup = require("../dofs/ModelControlGroup");
var RotationControl = require("../dofs/RotationControl");
var TranslationControl = require("../dofs/TranslationControl");
var TextureControl = require("../dofs/TextureControl");
var ColorControl = require("../dofs/ColorControl");
var FileTools = require("../../ifr-core/FileTools");

/**
 * @constructor
 */
var KinematicsLoadResult = function KinematicsLoadResult() {
	/** @type {string} */
	this.url = null;
	/** @type {!boolean} */
	this.success = false;
	/** @type {string} */
	this.message = "";

	/** @type {ModelControlGroup} */
	this.modelControlGroup = null;
};

/**
 * @constructor
 */
var KinematicsLoader = function KinematicsLoader() {
	/** @type {KinematicsLoadResult} */
	this._result = null;

	/** @type {Object.<string, ModelControlFactory>} */
	this._modelControlFactoryMap = {};

	// add default model controls
	this.addModelControlFactory(new RotationControl.Factory());
	this.addModelControlFactory(new TranslationControl.Factory());
	this.addModelControlFactory(new TextureControl.Factory());
	this.addModelControlFactory(new ColorControl.Factory());
};

/**
 * @param {ModelControlFactory} modelControlFactory
 */
KinematicsLoader.prototype.addModelControlFactory = function (modelControlFactory) {
	this._modelControlFactoryMap[modelControlFactory.getControlType()] = modelControlFactory;
};

/**
 * @param {string} controlType
 * @return {ModelControlFactory}
 */
KinematicsLoader.prototype.getModelControlFactory = function (controlType) {
	return this._modelControlFactoryMap[controlType];
};

/**
 * @return {KinematicsLoadResult}
 */
KinematicsLoader.prototype.getResult = function () {
	return this._result;
};

/**
 * @param {string} url
 * @param callback
 */
KinematicsLoader.prototype.load = function (url, callback) {
	var self = this;
	FileTools.loadJSON(url, function (error, data) {
		if (error === null) {
			self.parseData(data, url);
			if (callback) {
				callback();
			}
		} else {
			var result = new KinematicsLoadResult();
			result.url = url;
			result.success = false;
			result.message = error;
			self._result = result;
			if (callback) {
				callback();
			}
		}
	});
};

/**
 * @param {Object} jsonData
 * @param {string} dataUrl
 */
KinematicsLoader.prototype.parseData = function (jsonData, dataUrl) {
	this._result = new KinematicsLoadResult();
	this._result.url = dataUrl;

	if (jsonData.header.fileType !== "Kinematics") {
		this._result.success = false;
		this._result.message = "don't know how to handle file type: " + jsonData.header.fileType;
		return;
	}

	/** @type Array.<ModelControl> */
	var controlList = [];
	for (var controlIndex = 0; controlIndex < jsonData.content.controls.length; controlIndex++) {
		var controlData = jsonData.content.controls[controlIndex];

		if (!this._modelControlFactoryMap.hasOwnProperty(controlData.controlType)) {
			this._result.success = false;
			this._result.message = "no factory installed for control type: " + controlData.controlType + ", control name = " + controlData.controlName;
			return;
		} else {
			var factory = this._modelControlFactoryMap[controlData.controlType];
			var control = factory.constructFromJson(controlData);

			if (control === null) {
				this._result.success = false;
				this._result.message = "factory construction failed, control type = " + controlData.controlType + ", control name = " + controlData.controlName;
				return;
			} else {
				controlList.push(control);
			}
		}
	}

	var controlTypes = Object.keys(this._modelControlFactoryMap);
	for (var typeIndex = 0; typeIndex < controlTypes.length; typeIndex++) {
		controlList = this._modelControlFactoryMap[controlTypes[typeIndex]].postProcessControlList(controlList);
	}

	this._result.modelControlGroup = new ModelControlGroup();
	this._result.modelControlGroup.setControlList(controlList);
	this._result.success = true;
};

module.exports = KinematicsLoader;
//# sourceMappingURL=../../map/ifr-motion/loaders/KinematicsLoader.js.map
