/**
 * @author mattb
 * Copyright 2015 IF Robots LLC
 */

"use strict";

/**
 * Protected constructor for internal use only.
 *
 * @param {string} dofName - Protected constructor parameter.
 * @param {ModelControl} modelControl - Protected constructor parameter.
 * @constructor
 * @protected
 */

var DOFInfo = function DOFInfo(dofName, modelControl) {
	/** @type {string} */
	/** @private */
	this._dofName = dofName;

	/** @type {string} */
	/** @private */
	this._controlType = null;
	/** @type {boolean} */
	/** @private */
	this._isMetric = false;
	/** @type {boolean} */
	/** @private */
	this._isCyclic = false;
	/** @type {number} */
	/** @private */
	this._min = undefined;
	/** @type {number} */
	/** @private */
	this._max = undefined;

	/** @type {Object.<string, number>} */
	/** @private */
	this._limitData = {};

	this.setFromModelControl(modelControl);
};

/**
 * @param {ModelControl} modelControl
 * @private
 */
DOFInfo.prototype.setFromModelControl = function (modelControl) {
	this._controlType = modelControl.getControlType();
	this._isMetric = this._controlType !== "TEXTURE";
	this._isCyclic = this._controlType === "ROTATION" && modelControl.isCyclic();

	if (this._controlType === "ROTATION") {
		this._min = this._isCyclic ? -Math.PI : modelControl.getMin();
		this._max = this._isCyclic ? Math.PI : modelControl.getMax();
	} else if (this._controlType === "TRANSLATION") {
		var dofIndex = modelControl.getDOFNames().indexOf(this._dofName);
		if (dofIndex > -1) {
			this._min = modelControl._minList[dofIndex];
			this._max = modelControl._maxList[dofIndex];
		}
	} else if (this._controlType === "COLOR") {
		this._min = 0;
		this._max = 1;
	}
};

/**
 * @return {string}
 */
DOFInfo.prototype.getDOFName = function () {
	return this._dofName;
};

/**
 * Gets the control type associated with this DOF.
 * @return {string}
 */
DOFInfo.prototype.getControlType = function () {
	return this._controlType;
};

/**
 * Returns whether or not this DOF exists in a metric space, i.e.
 * with a meaningful distance function, a well-defined minimum and maximum, etc.
 * @return {boolean}
 */
DOFInfo.prototype.isMetric = function () {
	return this._isMetric;
};

/**
 * Returns whether or not this DOF is cyclical (for example, a continuous rotational joint).
 * @return {boolean}
 */
DOFInfo.prototype.isCyclic = function () {
	return this._isCyclic;
};

/**
 * Returns the minimum value for this DOF (may be undefined).
 * @return {number}
 */
DOFInfo.prototype.getMin = function () {
	return this._min;
};

/**
 * Returns the maximum value for this DOF (may be undefined).
 * @return {number}
 */
DOFInfo.prototype.getMax = function () {
	return this._max;
};

/**
 * Sets optional limit values.
 * @param {Object.<string, number>} limitData
 * @private
 */
DOFInfo.prototype.setLimitData = function (limitData) {
	var limitKeys = Object.keys(limitData);
	for (var i = 0; i < limitKeys.length; i++) {
		this._limitData[limitKeys[i]] = limitData[limitKeys[i]];
	}
};

/**
 * Returns the value for the specified limit (may be undefined).
 * @param {string} limitName - The requested limit (e.g. "velocity").
 * @return {number} - The limit value, or undefined if no limit is specified.
 */
DOFInfo.prototype.getLimit = function (limitName) {
	return this._limitData[limitName];
};

module.exports = DOFInfo;
//# sourceMappingURL=../../map/ifr-motion/dofs/DOFInfo.js.map
