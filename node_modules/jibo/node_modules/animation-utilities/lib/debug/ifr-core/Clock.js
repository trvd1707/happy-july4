/**
 * @author jg
 * Copyright 2015 IF Robots LLC
 */

"use strict";

var Time = require("./Time");
/**
 * A high-precision clock.  Uses the Performance API if available.
 *
 * @class
 */
var Clock = {};

/**
 * Gets the current time.
 *
 * Internally, time is calculated as time since epoch and is
 * represented as two integersâ€” seconds and fractions of a second in microseconds.
 *
 * @returns {Time}
 */
Clock.currentTime = function () {
	var sinceNavStart;
	var navStartMS;
	if (typeof window !== "undefined" && typeof window.performance !== "undefined") {
		sinceNavStart = window.performance.now();
		navStartMS = window.performance.timing.navigationStart;
	} else {
		sinceNavStart = 0;
		navStartMS = Date.now();
	}

	var sinceStartMSComponent = Math.floor(sinceNavStart);
	var sinceStartFractionalMSComponent = sinceNavStart - sinceStartMSComponent;
	//break off sub-ms part for later addition (don't want to lose precision)

	//our stamp is startTimeMS + elapsedMS
	var timeStampMSComponent = sinceStartMSComponent + navStartMS;

	//break off and remove whole seconds
	var timeStampSComponent = Math.floor(timeStampMSComponent / 1000);
	timeStampMSComponent -= timeStampSComponent * 1000;

	//add back in the sub-ms elapsed component
	var timeStampFractionalComponent = timeStampMSComponent + sinceStartFractionalMSComponent;

	//convert to us
	timeStampFractionalComponent = Math.round(timeStampFractionalComponent * 1000);

	//us rounded up and need to carry into s
	if (timeStampFractionalComponent === 1000000) {
		timeStampFractionalComponent = 0;
		timeStampSComponent = timeStampSComponent + 1;
	}

	return new Time(timeStampSComponent, timeStampFractionalComponent);
};

module.exports = Clock;
//# sourceMappingURL=../map/ifr-core/Clock.js.map
