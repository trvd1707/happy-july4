/**
 * @author mattb
 * Copyright 2015 IF Robots LLC
 */

"use strict";

var URI = require("urijs");

var FileTools = {};

/**
 * @callback FileLoadCallback
 * @param {string} error - error message, null if file load succeeded
 * @param {*} data - loaded file contents
 */

/**
 * Load text data from a URL.
 * @param {string} url
 * @param {FileLoadCallback} callback
 */
FileTools.loadText = function (url, callback) {
	var uri = new URI(url);
	// bypass the cache
	uri.addQuery("" + new Date().getTime());

	if (typeof XMLHttpRequest !== "undefined") {
		var xhr = new XMLHttpRequest();
		xhr.open("GET", uri.toString(), true);
		xhr.addEventListener("load", function (event) // eslint-disable-line no-unused-vars
		{
			if (callback) {
				if (xhr.status === 200 || xhr.status === 0) {
					callback(null, xhr.responseText);
				} else {
					callback("FileTools: XMLHttpRequest failed with status: " + xhr.statusText, null);
				}
			}
		}, false);
		xhr.addEventListener("error", function (event) // eslint-disable-line no-unused-vars
		{
			if (callback) {
				callback("FileTools: XMLHttpRequest error event with status: " + xhr.statusText, null);
			}
		}, false);
		xhr.send(null);
	} else if (uri.protocol() === "http") {
		var http = "http";
		http = require(http);

		var options = {
			host: uri.hostname(),
			port: uri.port() ? parseInt(uri.port()) : 80,
			path: uri.resource(),
			method: "GET"
		};

		var request = http.request(options, function (result) {
			if (result.statusCode === 200) {
				result.setEncoding("utf8");
				result.on("data", function (chunk) {
					if (callback) {
						callback(null, chunk);
					}
				});
			} else {
				if (callback) {
					callback("FileTools: http request failed with status code: " + result.statusCode, null);
				}
			}
		});

		request.on("error", function (e) {
			if (callback) {
				callback(e.message, null);
			}
		});

		request.end();
	} else if (uri.protocol() === "file" || uri.protocol() === "") {
		var fs = "fs";
		fs = require(fs);
		fs.readFile(uri.path(), "utf8", callback);
	} else {
		// unsupported protocol
		if (callback) {
			callback("FileTools: no XMLHttpRequest available, and no fallback support for protocol: " + uri.protocol(), null);
		}
	}
};

/**
 * Load JSON data from a URL.
 * @param {string} url
 * @param {FileLoadCallback} callback
 */
FileTools.loadJSON = function (url, callback) {
	FileTools.loadText(url, function (error, data) {
		if (callback) {
			if (error) {
				callback(error, null);
			} else {
				var jsonData = null;
				var parseError = false;
				var parseErrorMessage = "";

				try {
					jsonData = JSON.parse(data);
				} catch (e) {
					parseError = true;
					parseErrorMessage = e;
				}

				if (!parseError) {
					callback(null, jsonData);
				} else {
					callback("FileTools: JSON parse error: " + parseErrorMessage, null);
				}
			}
		}
	});
};

module.exports = FileTools;
//# sourceMappingURL=../map/ifr-core/FileTools.js.map
