/**
 * @author mattb
 * Copyright 2016 IF Robots LLC
 */

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var FileTools = require("./FileTools");
var slog = require("./SLog");

/**
 * Implementation of the Bakery that provides data from a serialized JSON object.
 *
 * @param {object|string} bakeryData - Bakery data object or URL to load for data.
 * @constructor
 */
var JSONBaker = function JSONBaker(bakeryData) {
	var initData = null;
	var url = null;
	if (typeof bakeryData === "string") {
		url = bakeryData;
	} else {
		initData = bakeryData;
	}

	this._dataRoot = {};
	this._defaultScopeName = "default";

	if (initData) {
		this._dataRoot = initData;
	}
	if (url) {
		var self = this;
		FileTools.loadJSON(url, function (error, data) {
			if (error) {
				slog.error("JSONBaker: failed to load data, url: " + url + " error: " + error);
			} else {
				self._dataRoot = data;
			}
		});
	}
};

JSONBaker.prototype._getScope = function (tabName) {
	if (!tabName) {
		tabName = this._defaultScopeName;
	}
	if (tabName instanceof Array) {
		var scope = this._dataRoot;
		for (var i = 0; i < tabName.length; i++) {
			if (_typeof(scope[tabName[i]]) !== "object") {
				scope[tabName[i]] = {};
			}
			scope = scope[tabName[i]];
		}
		return scope;
	} else {
		if (_typeof(this._dataRoot[tabName]) !== "object") {
			this._dataRoot[tabName] = {};
		}
		return this._dataRoot[tabName];
	}
};

JSONBaker.prototype.getFloat = function (name, min, max, initial, tabName) {
	var scope = this._getScope(tabName);
	var value = scope[name];
	if (value === undefined || value === null) {
		value = initial;
		scope[name] = value;
	}
	return value;
};

JSONBaker.prototype.getBoolean = function (name, initial, tabName) {
	var scope = this._getScope(tabName);
	var value = scope[name];
	if (value === undefined || value === null) {
		value = initial;
		scope[name] = value;
	}
	return value;
};

JSONBaker.prototype.makeButton = function (name, callback, tabName) // eslint-disable-line no-unused-vars
{};

JSONBaker.prototype.showText = function (name, text, tabName) // eslint-disable-line no-unused-vars
{};

JSONBaker.prototype.getData = function () {
	return this._dataRoot;
};

module.exports = JSONBaker;
//# sourceMappingURL=../map/ifr-core/JSONBaker.js.map
