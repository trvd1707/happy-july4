"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * All meta data related to a jibo .keys file. This is passed to the keyframes.runtime functions
to make it aware of specific layers and their properties/info.



var _semver = require("semver");

var _semver2 = _interopRequireDefault(_semver);

var _BodyLayer = require("./layers/BodyLayer");

var _BodyLayer2 = _interopRequireDefault(_BodyLayer);

var _EyeLayer = require("./layers/EyeLayer");

var _EyeLayer2 = _interopRequireDefault(_EyeLayer);

var _OverlayLayer = require("./layers/OverlayLayer");

var _OverlayLayer2 = _interopRequireDefault(_OverlayLayer);

var _EyeTextureLayer = require("./layers/EyeTextureLayer");

var _EyeTextureLayer2 = _interopRequireDefault(_EyeTextureLayer);

var _OverlayTextureLayer = require("./layers/OverlayTextureLayer");

var _OverlayTextureLayer2 = _interopRequireDefault(_OverlayTextureLayer);

var _BackgroundTextureLayer = require("./layers/BackgroundTextureLayer");

var _BackgroundTextureLayer2 = _interopRequireDefault(_BackgroundTextureLayer);

var _LEDLayer = require("./layers/LEDLayer");

var _LEDLayer2 = _interopRequireDefault(_LEDLayer);

var _PixiLayer = require("./layers/PixiLayer");

var _PixiLayer2 = _interopRequireDefault(_PixiLayer);

var _EventLayer = require("./layers/EventLayer");

var _EventLayer2 = _interopRequireDefault(_EventLayer);

var _AudioLayer = require("./layers/AudioLayer");

var _AudioLayer2 = _interopRequireDefault(_AudioLayer);

var _IDUtils = require("./utils/IDUtils");

var _IDUtils2 = _interopRequireDefault(_IDUtils);

var _Conversion = require("./utils/Conversion");

var _Conversion2 = _interopRequireDefault(_Conversion);

var _Colors = require("./utils/Colors");

var _Colors2 = _interopRequireDefault(_Colors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JiboKeyframeInfo = function () {
    function JiboKeyframeInfo() {
        _classCallCheck(this, JiboKeyframeInfo);
    }

    _createClass(JiboKeyframeInfo, null, [{
        key: "onLoad",

        /**
         * Implement this to do any backward compatibility related touchups to old files
         */
        value: function onLoad(keyframes) {
            // TODO: Figure out why the version isn't always in files
            keyframes.version = keyframes.version || "0.3.0";

            // Layers didn't have an id at 0.2.0, add some for old files
            if (keyframes.version === "0.2.0") {
                keyframes.layers.forEach(function (layer) {
                    layer.id = _IDUtils2.default.create();
                });
            }

            // 0.4.0 changed the coordinate system of the eye/overlay from
            // meters to pixel coordinates
            if (_semver2.default.lt(keyframes.version, "0.4.0")) {

                // Find each eye and overlay layer and then convert each property
                // that represents a translation from meters to pixel coordinates
                keyframes.layers.forEach(function (layer) {
                    if (layer.type === "Eye" || layer.type === "Overlay") {
                        layer.keyframes.forEach(function (key) {
                            for (var prop in key.value) {
                                // Everything but Scale and Rotate are x/y pairs
                                // representing 2D translations
                                if (prop !== "Scale" && prop !== "Rotate") {

                                    key.value[prop].x = _Conversion2.default.toPixelsX(key.value[prop].x);
                                    key.value[prop].y = _Conversion2.default.toPixelsY(key.value[prop].y);
                                }
                            }
                        });
                    }
                });
            }
            if (_semver2.default.lte(keyframes.version, '0.4.0')) {
                keyframes.layers.forEach(function (layer) {
                    layer.keyframes.forEach(function (key) {
                        for (var prop in key.value) {
                            if (prop === "Tween" && key.value.Tween.value === 'body') {
                                key.value.Tween = {
                                    display: 'cubic in out',
                                    label: 'Cubic Ease In Out',
                                    value: 'cubicInOut'
                                };
                            }
                        }
                    });
                });
            }

            // 0.5.0 changed colors to use rgb instead of hsv for blending and internal representation
            if (_semver2.default.lt(keyframes.version, "0.5.0")) {
                keyframes.layers.forEach(function (layer) {
                    if (layer.type === "Background Texture" || layer.type === "Eye Texture" || layer.type === "Overlay Texture" || layer.type === "LED") {

                        // Find each Color property and convert it from hsv space to rgb
                        layer.keyframes.forEach(function (key) {
                            key.value.Color = _Colors2.default.hsvToRgb(key.value.Color.h, key.value.Color.s, key.value.Color.v);
                        });
                    }
                });
            }

            // 0.6.0 eye and overlay coordinates were off vertically causing squishing. This was
            // because the conversion between vertical meters and pixels was off. We fixed the conversion
            // and now we have to touch up coordinates from old files so that animations created that
            // compensated for the squish would be broken by this fix
            if (_semver2.default.lt(keyframes.version, "0.6.0")) {
                keyframes.layers.forEach(function (layer) {
                    if (layer.type === "Overlay" || layer.type === "Eye") {

                        // Find each Color property and convert it from hsv space to rgb
                        layer.keyframes.forEach(function (key) {

                            for (var field in key.value) {
                                if (field !== 'Scale' && typeof key.value[field].y !== 'undefined') {
                                    key.value[field].y = key.value[field].y * 0.06922346 / 0.073142126;
                                }
                            }
                        });
                    }
                });
            }

            if (_semver2.default.lt(keyframes.version, "0.7.0")) {
                keyframes.layers.forEach(function (layer) {
                    if (layer.type === "Overlay" || layer.type === "Eye") {
                        // Find each Color property and convert it from hsv space to rgb
                        layer.keyframes.forEach(function (key) {
                            key.value.Alpha = 1.0;
                            key.value.Visible = true;
                        });
                    } else if (layer.type === "Pixi") {
                        layer.keyframes.forEach(function (key) {
                            console.log("Upgrade to attach and effect");
                            key.value["Attach To Eye"] = false;
                            key.value["Apply Eye Lighting"] = false;
                        });
                    }
                });
            }

            // Make version is set to the latest
            keyframes.version = JiboKeyframeInfo.defaults.version;
        }
    }]);

    return JiboKeyframeInfo;
}();

// Layer types that jibo supports. For efficient access, layerTypes indexes
// each Layer Types constructor by it's name (ie. "Body": Body)


JiboKeyframeInfo.layerTypes = {
    Body: _BodyLayer2.default,
    Eye: _EyeLayer2.default,
    "Eye Texture": _EyeTextureLayer2.default,
    Overlay: _OverlayLayer2.default,
    "Overlay Texture": _OverlayTextureLayer2.default,
    "Background Texture": _BackgroundTextureLayer2.default,
    LED: _LEDLayer2.default,
    Event: _EventLayer2.default,
    "Audio Event": _AudioLayer2.default
};

JiboKeyframeInfo.layerTypes.Pixi = _PixiLayer2.default;

JiboKeyframeInfo.defaults = {
    version: "0.7.0",
    framerate: 30,
    duration: 30,
    scale: 1,
    // Layers that newly created Jibo Keyframe files have
    layers: [{
        name: "Eye",
        type: "Eye"
    }, {
        name: "Eye Texture",
        type: "Eye Texture"
    }, {
        name: "Body",
        type: "Body"
    }]
};

exports.default = JiboKeyframeInfo;
//# sourceMappingURL=map/JiboKeyframeInfo.js.map
