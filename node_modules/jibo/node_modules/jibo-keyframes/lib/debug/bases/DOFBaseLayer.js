"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseLayer2 = require("./BaseLayer");

var _BaseLayer3 = _interopRequireDefault(_BaseLayer2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DOFBaseLayer = function (_BaseLayer) {
    _inherits(DOFBaseLayer, _BaseLayer);

    function DOFBaseLayer() {
        _classCallCheck(this, DOFBaseLayer);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(DOFBaseLayer).apply(this, arguments));
    }

    _createClass(DOFBaseLayer, null, [{
        key: "generateDofs",

        /**
         * Given a set of properties that a layer supports return the dof values that
         * that this layer generates. The properties will have already been interpolated
         * from the keyframes of the layer and blended with other layers. Only generation
         * logic needs to be implemented.
         *
         * @param props {Object}   An object with each field having the name of each layer
         *                         property and it's interpolated/blended value
         *
         * @returns {Object}    An object with each field having the name of each generated
         *                      dof and it's value. These will then be handed to final blending
         *                      logic that blends all dofs generated from all layer types
         *                      according to their blend operation.
         */
        value: function generateDofs() /*props*/{
            throw "Implement static Layer.generateDofs()";
        }
    }, {
        key: "isEvent",
        value: function isEvent() {
            return false;
        }
    }]);

    return DOFBaseLayer;
}(_BaseLayer3.default);

exports.default = DOFBaseLayer;
//# sourceMappingURL=../map/bases/DOFBaseLayer.js.map
