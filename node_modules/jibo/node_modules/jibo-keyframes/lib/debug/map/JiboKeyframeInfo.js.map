{"version":3,"sources":["JiboKeyframeInfo.js"],"names":[],"mappings":"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","file":"JiboKeyframeInfo.js","sourcesContent":["/**\n * All meta data related to a jibo .keys file. This is passed to the keyframes.runtime functions\n * to make it aware of specific layers and their properties/info.\n */\nimport semver from \"semver\";\n\nimport Body from \"./layers/BodyLayer\";\nimport Eye from \"./layers/EyeLayer\";\nimport Overlay from \"./layers/OverlayLayer\";\nimport EyeTexture from \"./layers/EyeTextureLayer\";\nimport OverlayTexture from \"./layers/OverlayTextureLayer\";\nimport BackgroundTexture from \"./layers/BackgroundTextureLayer\";\nimport LED from \"./layers/LEDLayer\";\nimport Pixi from './layers/PixiLayer';\nimport Event from './layers/EventLayer';\nimport Audio from './layers/AudioLayer';\n\nimport IDUtils from \"./utils/IDUtils\";\nimport Conversion from './utils/Conversion';\nimport Colors from './utils/Colors';\n\nclass JiboKeyframeInfo {\n    /**\n     * Implement this to do any backward compatibility related touchups to old files\n     */\n    static onLoad(keyframes){\n        // TODO: Figure out why the version isn't always in files\n        keyframes.version = keyframes.version || \"0.3.0\";\n\n        // Layers didn't have an id at 0.2.0, add some for old files\n        if(keyframes.version === \"0.2.0\"){\n            keyframes.layers.forEach( (layer) => {\n                layer.id = IDUtils.create();\n            });\n\n        }\n\n        // 0.4.0 changed the coordinate system of the eye/overlay from\n        // meters to pixel coordinates\n        if(semver.lt(keyframes.version, \"0.4.0\") ){\n\n            // Find each eye and overlay layer and then convert each property\n            // that represents a translation from meters to pixel coordinates\n            keyframes.layers.forEach( (layer) => {\n                if( layer.type === \"Eye\" || layer.type === \"Overlay\" ){\n                    layer.keyframes.forEach( (key) => {\n                        for(let prop in key.value){\n                            // Everything but Scale and Rotate are x/y pairs\n                            // representing 2D translations\n                            if( prop !== \"Scale\" &&\n                                prop !== \"Rotate\" ){\n\n                                key.value[prop].x = Conversion.toPixelsX(key.value[prop].x);\n                                key.value[prop].y = Conversion.toPixelsY(key.value[prop].y);\n                            }\n\n                        }\n                    });\n                }\n            });\n        }\n        if(semver.lte(keyframes.version, '0.4.0')) {\n            keyframes.layers.forEach( (layer) => {\n                layer.keyframes.forEach( (key) => {\n                    for(let prop in key.value){\n                        if(prop === \"Tween\" && key.value.Tween.value === 'body') {\n                            key.value.Tween = {\n                                display: 'cubic in out',\n                                label: 'Cubic Ease In Out',\n                                value: 'cubicInOut'\n                            };\n                        }\n                    }\n                });\n            });\n        }\n\n        // 0.5.0 changed colors to use rgb instead of hsv for blending and internal representation\n        if( semver.lt(keyframes.version, \"0.5.0\") ){\n            keyframes.layers.forEach( (layer) => {\n                if( layer.type === \"Background Texture\" || layer.type === \"Eye Texture\" ||\n                    layer.type === \"Overlay Texture\" || layer.type === \"LED\" ){\n\n                    // Find each Color property and convert it from hsv space to rgb\n                    layer.keyframes.forEach( (key) => {\n                        key.value.Color = Colors.hsvToRgb(key.value.Color.h, key.value.Color.s, key.value.Color.v );\n                    });\n                }\n            });\n        }\n\n        // 0.6.0 eye and overlay coordinates were off vertically causing squishing. This was\n        // because the conversion between vertical meters and pixels was off. We fixed the conversion\n        // and now we have to touch up coordinates from old files so that animations created that\n        // compensated for the squish would be broken by this fix\n        if( semver.lt(keyframes.version, \"0.6.0\") ){\n            keyframes.layers.forEach( (layer) => {\n                if( layer.type === \"Overlay\" || layer.type === \"Eye\" ){\n\n                    // Find each Color property and convert it from hsv space to rgb\n                    layer.keyframes.forEach( (key) => {\n\n                        for(let field in key.value){\n                            if( field !== 'Scale' &&\n                                typeof key.value[field].y !== 'undefined' ) {\n                                key.value[field].y = key.value[field].y * 0.06922346 / 0.073142126;\n                            }\n                        }\n                    });\n                }\n            });\n        }\n\n        if( semver.lt(keyframes.version, \"0.7.0\") ){\n            keyframes.layers.forEach( (layer) => {\n                if( layer.type === \"Overlay\" || layer.type === \"Eye\" ){\n                    // Find each Color property and convert it from hsv space to rgb\n                    layer.keyframes.forEach( (key) => {\n                        key.value.Alpha = 1.0;\n                        key.value.Visible = true;\n                    });\n                }\n                else if (layer.type === \"Pixi\") {\n                    layer.keyframes.forEach( (key) => {\n                        console.log(\"Upgrade to attach and effect\");\n                        key.value[\"Attach To Eye\"] = false;\n                        key.value[\"Apply Eye Lighting\"] = false;\n                    });\n                }\n            });\n        }\n\n        // Make version is set to the latest\n        keyframes.version = JiboKeyframeInfo.defaults.version;\n    }\n}\n\n// Layer types that jibo supports. For efficient access, layerTypes indexes\n// each Layer Types constructor by it's name (ie. \"Body\": Body)\nJiboKeyframeInfo.layerTypes = {\n    Body,\n    Eye: Eye,\n    \"Eye Texture\": EyeTexture,\n    Overlay: Overlay,\n    \"Overlay Texture\": OverlayTexture,\n    \"Background Texture\": BackgroundTexture,\n    LED,\n    Event,\n    \"Audio Event\": Audio\n};\n\nJiboKeyframeInfo.layerTypes.Pixi = Pixi;\n\nJiboKeyframeInfo.defaults = {\n    version: \"0.7.0\",\n    framerate: 30,\n    duration: 30,\n    scale: 1,\n    // Layers that newly created Jibo Keyframe files have\n    layers: [\n        {\n            name: \"Eye\",\n            type: \"Eye\"\n        },\n        {\n            name: \"Eye Texture\",\n            type: \"Eye Texture\"\n        },\n        {\n            name: \"Body\",\n            type: \"Body\"\n        }\n    ]\n};\n\nexport default JiboKeyframeInfo;\n"],"sourceRoot":"/source/"}