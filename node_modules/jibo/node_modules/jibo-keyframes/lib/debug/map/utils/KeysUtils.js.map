{"version":3,"sources":["utils/KeysUtils.js"],"names":[],"mappings":"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","file":"utils/KeysUtils.js","sourcesContent":["// Initialize the data with a default set of values for the necessary channels to have jibo animating his top, middle, and bottom body rotations.\n// This includes some eye and overlay texture related default values in order to make sure Jibo's eye is showing centered on his screen\n\nimport fs from \"fs\";\nimport path from 'path';\nimport JiboKeyframeInfo from \"../JiboKeyframeInfo\";\nimport Channels from \"./Channels\";\nimport Runtime from \"../Runtime\";\n\nvar animData = {\n    \"header\": {\n        \"fileType\":\"Animation\",\n        \"version\":\"0.001\",\n        \"creationTime\":1418336756906\n    },\n    \"content\":{\n        \"name\":\"AnythingElse_01.dae\",\n        \"channels\":[],\n        \"events\":[]\n    }\n};\n\nexport default class KeysUtils {\n    static keysToAnimObjectAsync(keysPath, cb) {\n        // Load .keys file asynchronously\n        fs.readFile(keysPath, 'utf8', (err, data) => {\n            if (err) {\n                console.log(\"\\nError parsing \\\"\" + keysPath + \"\\\". \" + err + \"\\n\");\n                process.exit(1);\n            }\n            else {\n                let keysData = JSON.parse(data);\n                JiboKeyframeInfo.onLoad(keysData);\n                // use the base name of the uri for the anim data \"name\"\n                let baseName = path.basename(keysPath);\n\n                let animObj = KeysUtils.keysObjToAnimObject(keysData, baseName);\n                cb(animObj);\n            }\n        });\n    }\n\n    static keysToAnim(keysPath, animPath) {\n\n        console.log(keysPath);\n        let animData = KeysUtils.keysToAnimObject(keysPath);\n\n        try{\n            fs.writeFileSync(animPath, JSON.stringify(animData, null, '    '), 'utf8');\n        } catch(error) {\n            console.log(\"\\nERROROROROROR\\n\");\n            process.exit(1);\n        }\n\n}\n\n    static keysToAnimObject(keysPath) {\n        let keysData;\n        try{\n            // Load .keys file\n            keysData = JSON.parse(fs.readFileSync(keysPath, 'utf8'));\n            JiboKeyframeInfo.onLoad(keysData);\n        } catch(error) {\n            console.log(\"\\nError parsing \\\"\" + keysPath + \"\\\". \" + error + \"\\n\");\n            process.exit(1);\n        }\n\n        // use the base name of the uri for the anim data \"name\"\n        let baseName = path.basename(keysPath);\n        return KeysUtils.keysObjToAnimObject(keysData, baseName);\n    }\n\n\n    static keysObjToAnimObject(keysData, name) {\n        /*\n         * Fill out \"header\" fields that need to be changed. Should look like so\n         *\n         *\t\"header\": {\n         *     \"fileType\": \"DOFAnimation\",\n         *      \"version\": \"0.001\",\n         *      \"creationTime\": 1418336756906\n         *  },\n         */\n        animData.header.creationTime = (new Date()).getTime();\n        animData.header.version = keysData.version;\n        /*\n         * Fill out \"content\" fields that need to be changed. Should look like so\n         *\n         *\t\"content\": {\n         *      \"name\": \"example.keys\",\n     *          \"channels\": [\n                    {\n                        \"name\": \"Top\",\n                        \"type\": \"number\",\n                        \"keyframes\": [\n                            {\n                                \"time\": 0,\n                                \"rotation\": 0\n                            },\n                            ...\n                        ]\n                    },\n                    ...\n                ],\n                \"events\": [\n                    {\n                        \"time\": 0,\n                        \"payload\": {object}\n                    },\n                    ...\n                ]\n         *  },\n         */\n\n        // reset data!\n        animData.content.name = name;\n        animData.content.channels = [];\n        animData.content.events = [];\n\n        let animChannels = {};\n\n        // For each frame calculate all dof and event values and save them to file\n        for(let frame = 0; frame<keysData.duration; frame++){\n            let timeInSeconds = Channels.framesToSeconds(frame, keysData.framerate);\n            let dofs = Runtime.evaluateAllDOFLayers(keysData, JiboKeyframeInfo, timeInSeconds);\n            let events = Runtime.evaluateAllEventLayers(keysData, JiboKeyframeInfo, timeInSeconds);\n\n            for(let dofName in dofs){\n                if( typeof animChannels[dofName] === \"undefined\") {\n                    animChannels[dofName] = {\n                        dofName: dofName,\n                        length: keysData.duration/keysData.framerate,\n                        times: [timeInSeconds],\n                        values: [ dofs[dofName] ]\n                    };\n\n                    animData.content.channels.push(animChannels[dofName]);\n                } else {\n                    animChannels[dofName].times.push(timeInSeconds);\n                    animChannels[dofName].values.push(dofs[dofName]);\n                }\n            }\n\n            for(let i = 0; i < events.length; i++) {\n\n                let animEvent = {\n                    time: timeInSeconds,\n                    eventName: events[i].name,\n                    payload: events[i].payload\n                };\n\n                animData.content.events.push(animEvent);\n            }\n        }\n        return animData;\n    }\n}\n"],"sourceRoot":"/source/"}