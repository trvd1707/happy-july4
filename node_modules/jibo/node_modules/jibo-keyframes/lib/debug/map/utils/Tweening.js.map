{"version":3,"sources":["utils/Tweening.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;AACA;;;;;;;;;;;;AAMA,IAAI,SAAS,iBAAE,KAAF,iBAAT;;;;;AAKJ,OAAO,IAAP,GAAc;WAAM;CAAN;;IAEO;;;;;;;;;;;;;;;sCAQI,oBAAmB;AACpC,gBAAG,OAAO,kBAAP,KAA8B,UAA9B,EAAyC;AACxC,uBAAO,kBAAP,CADwC;aAA5C,MAEO;AACH,uBAAO,OAAO,kBAAP,CAAP,CADG;aAFP;;;;;;;;;;;;8BAaS,OAAO,KAAK,MAAM,QAAQ;AACnC,gBAAI,IAAI,SAAS,aAAT,CAAuB,MAAvB,EAA+B,IAA/B,CAAJ,CAD+B;AAEnC,mBAAO,SAAO,IAAE,CAAF,CAAP,GAAc,MAAI,CAAJ,CAFc;;;;;;;;;;;;gCAWxB,OAAO,KAAK,MAAM,QAAQ;AACrC,gBAAI,IAAI,SAAS,aAAT,CAAuB,MAAvB,EAA+B,IAA/B,CAAJ,CADiC;AAErC,mBAAO;AACH,mBAAG,MAAM,CAAN,IAAS,IAAE,CAAF,CAAT,GAAgB,IAAI,CAAJ,GAAM,CAAN;AACnB,mBAAG,MAAM,CAAN,IAAS,IAAE,CAAF,CAAT,GAAgB,IAAI,CAAJ,GAAM,CAAN;aAFvB,CAFqC;;;;;;;;;;;;4BAc9B,OAAO,KAAK,MAAM,QAAQ;AACjC,gBAAI,IAAI,SAAS,aAAT,CAAuB,MAAvB,EAA+B,IAA/B,CAAJ,CAD6B;AAEjC,mBAAO;AACH,mBAAG,MAAM,CAAN,IAAS,IAAE,CAAF,CAAT,GAAgB,IAAI,CAAJ,GAAM,CAAN;AACnB,mBAAG,MAAM,CAAN,IAAS,IAAE,CAAF,CAAT,GAAgB,IAAI,CAAJ,GAAM,CAAN;AACnB,mBAAG,MAAM,CAAN,IAAS,IAAE,CAAF,CAAT,GAAgB,IAAI,CAAJ,GAAM,CAAN;aAHvB,CAFiC;;;;;;;;;;;;8BAexB,OAAO,KAAK,mBAAkB;AACvC,gBAAI,IAAI,SAAS,aAAT,CAAuB,QAAvB,EAAiC,IAAjC,CAAJ,CADmC;AAEvC,mBAAO,SAAO,IAAE,CAAF,CAAP,GAAc,MAAI,CAAJ,CAFkB;;;;gCAK5B,+BAA8B;AACzC,mBAAO,KAAP,CADyC;;;;8BAIhC,+BAA8B;AACvC,mBAAO,KAAP,CADuC;;;;6BAI/B,OAAO;AACf,mBAAO,KAAP,CADe;;;;8BAIP,+BAA8B;AACtC,mBAAO,KAAP,CADsC;;;;6BAI9B,OAAO;AACf,mBAAO,KAAP,CADe;;;;WAnFF","file":"utils/Tweening.js","sourcesContent":["/**\n * A set of functions for blending between a start and end keyframe for a\n * variety of value types. The name of the function matches the value type\n * it knows how to blend\n */\n\n/**\n * These are the set of easing functions our animation system supports. They\n * are used by the animation system to create variations of speed, acceleration,\n * overshooting, and undershooting of blending values.\n *\n * The `t` variable passed to each easing function has the value range: [0,1]. The\n * functions each return a float that should be used to create the usual weighted\n * blend of two values to be tweened. Example\n *\n * tweenFloats(start, end, t) {\n *   let f = easing.linear(t);\n *   return start*(1-f) + end*f;\n * }\n */\n\nimport _ from 'lodash';\nimport easesFunctions from 'eases';\n\n/**\n * For now we support all of the easing functions in 'eases' module.\n * There's some good stuff here: http://www.rich-harris.co.uk/ramjet/\n */\nlet easing = _.clone(easesFunctions);\n\n/**\n * \"snap\" always returns a weight fully weighted to the last keyframe\n */\neasing.snap = () => 0;\n\nexport default class Tweening {\n    \n    /**\n     * getEasingFunc - Resolve which easing function is desired\n     *\n     * @param  {function|string} easingFuncOrString function or name of a built-in easing function that calculates the blending weights\n     * @return {function} the resolved easing function\n     */\n    static getEasingFunc(easingFuncOrString){\n        if(typeof easingFuncOrString === \"function\"){\n            return easingFuncOrString;\n        } else {\n            return easing[easingFuncOrString];\n        }\n    }\n\n    /**\n     * @param {number} start - Start value\n     * @param {number} end - End Value\n     * @param {number} time - time between [0,1] indicating where in a blend we are\n     * @param {function|string} easing function or name of a built-in easing function that calculates the blending weights\n     */\n    static float(start, end, time, easing) {\n        let f = Tweening.getEasingFunc(easing)(time);\n        return start*(1-f) + end*f;\n    }\n\n    /**\n     * @param {object} start - Start value\n     * @param {object} end - End Value\n     * @param {number} time - time between [0,1] indicating where in a blend we are\n     * @param {function|string} easing function or name of a built-in easing function that calculates the blending weights\n     */\n    static vector2(start, end, time, easing) {\n        let f = Tweening.getEasingFunc(easing)(time);\n        return {\n            x: start.x*(1-f) + end.x*f,\n            y: start.y*(1-f) + end.y*f\n        };\n    }\n\n    /**\n     * @param {object} start - Start value\n     * @param {object} end - End Value\n     * @param {number} time - time between [0,1] indicating where in a blend we are\n     * @param {function|string} easing function or name of a built-in easing function that calculates the blending weights\n     */\n    static rgb(start, end, time, easing) {\n        let f = Tweening.getEasingFunc(easing)(time);\n        return {\n            r: start.r*(1-f) + end.r*f,\n            g: start.g*(1-f) + end.g*f,\n            b: start.b*(1-f) + end.b*f\n        };\n    }\n\n    /**\n     * @param {number} start - Start value\n     * @param {number} end - End Value\n     * @param {number} time - time between [0,1] indicating where in a blend we are\n     * @param {function|string} easing function or name of a built-in easing function that calculates the blending weights\n     */\n    static color(start, end, time/*, easing*/) {\n        let f = Tweening.getEasingFunc(\"linear\")(time);\n        return start*(1-f) + end*f;\n    }\n\n    static texture(start/*, end, time, easing*/) {\n        return start;\n    }\n\n    static video(start/*, end, time, easing*/) {\n        return start;\n    }\n\n    static bool(start) {\n        return start;\n    }\n\n    static enum(start/*, end, time, easing*/) {\n        return start;\n    }\n\n    static pixi(start) {\n        return start;\n    }\n}"],"sourceRoot":"/source/"}