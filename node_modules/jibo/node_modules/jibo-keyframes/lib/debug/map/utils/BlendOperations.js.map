{"version":3,"sources":["utils/BlendOperations.js"],"names":[],"mappings":"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","file":"utils/BlendOperations.js","sourcesContent":["/**\n * Operations per property type for blending layers of properties together\n */\n\nlet operations = {\n    lastOneWins: {\n        texture(accumulated, newValue) {\n            return newValue;\n        },\n        bool(accumulated, newValue) {\n            return newValue; \n        }\n    },\n\n    add: {\n        float(accumulated, newValue, defaultValue) {\n            return accumulated+(newValue-defaultValue);\n        },\n        vector2(accumulated, newValue, defaultValue) {\n            return {\n                x: accumulated.x+(newValue.x-defaultValue.x),\n                y: accumulated.y+(newValue.y-defaultValue.y)\n            };\n        },\n        rgb(accumulated, newValue, defaultValue) {\n            return {\n                r: accumulated.h+(newValue.r-defaultValue.r),\n                g: accumulated.s+(newValue.g-defaultValue.g),\n                b: accumulated.v+(newValue.b-defaultValue.b)\n            };\n        }\n    },\n    multiply: {\n        float(accumulated, newValue) {\n            return accumulated*newValue;\n        },\n        vector2(accumulated, newValue) {\n            return {\n                x: accumulated.x*newValue.x,\n                y: accumulated.y*newValue.y\n            };\n        },\n        rgb(accumulated, newValue) {\n            return {\n                r: accumulated.r*newValue.r,\n                g: accumulated.g*newValue.g,\n                b: accumulated.b*newValue.b\n            };\n        }\n    },\n    singleton: {\n        video(accumulated, newValue) {\n            return newValue;\n        }\n    },\n    inverse: {\n        lastOneWins: {\n            texture(accumulated) {\n                return accumulated;\n            },\n            bool(accumulated) {\n                return accumulated;\n            }\n        },\n        singleton: {\n            video(accumulated) {\n                return accumulated;\n            }\n        },\n        add: {\n            float(accumulated, newValue, defaultValue) {\n                return (newValue+defaultValue)-accumulated;\n            },\n            vector2(accumulated, newValue, defaultValue) {\n                return {\n                    x: (newValue.x+defaultValue.x)-accumulated.x,\n                    y: (newValue.y+defaultValue.y)-accumulated.y\n                };\n            },\n            rgb(accumulated, newValue, defaultValue) {\n                return {\n                    r: (newValue.r+defaultValue.r)-accumulated.r,\n                    g: (newValue.g+defaultValue.g)-accumulated.g,\n                    b: (newValue.b+defaultValue.b)-accumulated.b\n                };\n            }\n        },\n        multiply: {\n            float(accumulated, newValue) {\n                return accumulated/newValue;\n            },\n            vector2(accumulated, newValue) {\n                return {\n                    x: newValue.x/accumulated.x,\n                    y: newValue.y/accumulated.y\n                };\n            },\n            rgb(accumulated, newValue) {\n                return {\n                    r: newValue.h/accumulated.r,\n                    g: newValue.s/accumulated.g,\n                    b: newValue.v/accumulated.b\n                };\n            }\n        }\n    }\n};\n\nexport default class BlendOperations {\n    static inverse(operation, type) {\n        return operations.inverse[operation][type];\n    }\n    static normal(operation, type) {\n        return operations[operation][type];\n    }\n}\n"],"sourceRoot":"/source/"}