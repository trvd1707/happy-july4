{"version":3,"sources":["layers/EyeAndOverlayLayer.js"],"names":[],"mappings":"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","file":"layers/EyeAndOverlayLayer.js","sourcesContent":["import _ from 'lodash';\nimport DOFBaseLayer from '../bases/DOFBaseLayer';\nimport Conversion from '../utils/Conversion';\n\n// Eye/Overlays\nlet centerX = 0;\nlet centerY = 0;\nlet eyeRadiusX = 300;\nlet eyeRadiusY = 300;\n\nlet values = [\n    {\n        display: 'linear',\n        label: 'Linear Tween',\n        value: 'linear'\n    },\n    {\n        display: 'sine in',\n        label: 'Sine Ease In',\n        value: 'sineIn'\n    },\n    {\n        display: 'sine out',\n        label: 'Sine Ease Out',\n        value: 'sineOut'\n    },\n    {\n        display: 'sine in out',\n        label: 'Sine Ease In Out',\n        value: 'sineInOut'\n    },\n    {\n        display: 'cubic in',\n        label: 'Cubic Ease In',\n        value: 'cubicIn'\n    },\n    {\n        display: 'cubic out',\n        label: 'Cubic Ease Out',\n        value: 'cubicOut'\n    },\n    {\n        display: 'cubic in out',\n        label: 'Cubic Ease In Out',\n        value: 'cubicInOut'\n    }\n];\n\nlet Tween = {\n    type: {\n        name: 'enum',\n        values\n    },\n    defaultValue: values[3],\n    blendOperation: 'none'\n};\n\nlet VertexType = (xRelativeToCenter, yRelativeToCenter) => {\n    return {\n        type: \"vector2\",\n        defaultValue: {\n            x: xRelativeToCenter,\n            y: yRelativeToCenter\n        },\n        blendOperation: \"add\"\n    };\n};\n\nlet Info = {\n    properties: {\n        Rotate: {\n            type: \"float\",\n            defaultValue: 0.0,\n            blendOperation: \"add\"\n        },\n        Scale: {\n            type: \"vector2\",\n            defaultValue: {\n                x: 1,\n                y: 1\n            },\n            blendOperation: \"multiply\"\n        },\n        Translate: {\n            type: \"vector2\",\n            defaultValue: {\n                x: centerX,\n                y: centerY\n            },\n            blendOperation: \"add\"\n        },\n        Visible: {\n            type: \"bool\",\n            defaultValue: true,\n            blendOperation: \"lastOneWins\"\n        },\n        Alpha: {\n            type: \"float\",\n            defaultValue: 1.0,\n            blendOperation: \"multiply\"\n        },\n        Tween,\n        \"Vertex 1\": VertexType(-eyeRadiusX, -eyeRadiusY),\n        \"Vertex 2\": VertexType(0, -eyeRadiusY),\n        \"Vertex 3\": VertexType(eyeRadiusX, -eyeRadiusY),\n        \"Vertex 4\": VertexType(-eyeRadiusX, 0),\n        \"Vertex 5\": VertexType(0, 0),\n        \"Vertex 6\": VertexType(eyeRadiusX, 0),\n        \"Vertex 7\": VertexType(-eyeRadiusX, eyeRadiusY),\n        \"Vertex 8\": VertexType(0, eyeRadiusY),\n        \"Vertex 9\": VertexType(eyeRadiusX, eyeRadiusY)\n    }\n};\n\nexport default class EyeAndOverlayLayer extends DOFBaseLayer {\n    static _generateDofs(props, nameStem) {\n        return {\n            [nameStem + \"vertexJoint1_t\"]: Conversion.toMetersX(props['Vertex 1'].x) * props.Scale.x,\n            [nameStem + \"vertexJoint1_t_2\"]: Conversion.toMetersY(props['Vertex 1'].y) * props.Scale.y,\n            [nameStem + \"vertexJoint2_t\"]: Conversion.toMetersX(props['Vertex 2'].x) * props.Scale.x,\n            [nameStem + \"vertexJoint2_t_2\"]: Conversion.toMetersY(props['Vertex 2'].y) * props.Scale.y,\n            [nameStem + \"vertexJoint3_t\"]: Conversion.toMetersX(props['Vertex 3'].x) * props.Scale.x,\n            [nameStem + \"vertexJoint3_t_2\"]: Conversion.toMetersY(props['Vertex 3'].y) * props.Scale.y,\n            //\n            [nameStem + \"vertexJoint4_t\"]: Conversion.toMetersX(props['Vertex 4'].x) * props.Scale.x,\n            [nameStem + \"vertexJoint4_t_2\"]: Conversion.toMetersY(props['Vertex 4'].y) * props.Scale.y,\n            [nameStem + \"vertexJoint5_t\"]: Conversion.toMetersX(props['Vertex 5'].x) * props.Scale.x,\n            [nameStem + \"vertexJoint5_t_2\"]: Conversion.toMetersY(props['Vertex 5'].y) * props.Scale.y,\n            [nameStem + \"vertexJoint6_t\"]: Conversion.toMetersX(props['Vertex 6'].x) * props.Scale.x,\n            [nameStem + \"vertexJoint6_t_2\"]: Conversion.toMetersY(props['Vertex 6'].y) * props.Scale.y,\n            //\n            [nameStem + \"vertexJoint7_t\"]: Conversion.toMetersX(props['Vertex 7'].x) * props.Scale.x,\n            [nameStem + \"vertexJoint7_t_2\"]: Conversion.toMetersY(props['Vertex 7'].y) * props.Scale.y,\n            [nameStem + \"vertexJoint8_t\"]: Conversion.toMetersX(props['Vertex 8'].x) * props.Scale.x,\n            [nameStem + \"vertexJoint8_t_2\"]: Conversion.toMetersY(props['Vertex 8'].y) * props.Scale.y,\n            [nameStem + \"vertexJoint9_t\"]: Conversion.toMetersX(props['Vertex 9'].x) * props.Scale.x,\n            [nameStem + \"vertexJoint9_t_2\"]: Conversion.toMetersY(props['Vertex 9'].y) * props.Scale.y\n        };\n    }\n\n    static extend(input) {\n        return _.extend({}, Info, input);\n    }\n}"],"sourceRoot":"/source/"}