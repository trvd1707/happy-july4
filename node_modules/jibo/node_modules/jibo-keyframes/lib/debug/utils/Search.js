"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * keyframes entry point.
 */

/**
 * This assumes that some higher level logic has already determined that the keyframeTime is between
 * the first and last keyframe's times
 */

var Search = function () {
    function Search() {
        _classCallCheck(this, Search);
    }

    _createClass(Search, null, [{
        key: "keyframeSearch",
        value: function keyframeSearch(keyframes, keyframeTime) {
            var lo = 0,
                hi = keyframes.length - 2,
                mid = void 0 /*,
                             steps = 0*/;
            while (lo <= hi) {
                mid = Math.floor((lo + hi) / 2);

                //steps++;
                //console.log(`mid: ${mid}, lo: ${lo}, hi: ${hi} start: ${keyframes[mid].time}, end: ${keyframes[mid+1].time}`)
                if (keyframeTime >= keyframes[mid + 1].time) {
                    //console.log('moving up');
                    lo = mid + 1;
                } else if (keyframeTime < keyframes[mid].time) {
                    //console.log('moving down');
                    hi = mid - 1;
                } else {
                    //console.log(`steps: ${steps}`);
                    return {
                        start: mid,
                        end: mid + 1
                    };
                }
            }
        }
    }, {
        key: "keyframeSearchAbsolute",
        value: function keyframeSearchAbsolute(keyframes, keyframeTime) {
            if (keyframes.length === 0) {
                return undefined;
            }

            var lo = 0;
            var hi = keyframes.length - 1;
            var mid = void 0;

            while (lo <= hi) {
                mid = Math.floor((lo + hi) / 2);

                var midTime = keyframes[mid].time;

                if (keyframeTime === midTime) {
                    return mid; // found it
                } else if (keyframeTime > midTime) {
                        // if our time is greater, then move up
                        lo = mid + 1;
                    } else /*if (keyframeTime < midTime)*/{
                            // if our time is less, then move down
                            hi = mid - 1;
                        }
            }

            // not found
            return undefined;
        }
    }]);

    return Search;
}();

exports.default = Search;
//# sourceMappingURL=../map/utils/Search.js.map
