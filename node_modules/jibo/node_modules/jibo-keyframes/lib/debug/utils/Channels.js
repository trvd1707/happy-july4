"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * This file implements meta data associated with .keys and .anim files and conversions between them
 *  - mapping the internal animationutilities channel names to more user friendly
 *    names for display in the jibo animation tool and for developers who
 *    will be manipulating animation tool files themselves
 *  - information about converting between values in each file format. For example
 *    converting between radians and degrees for rotation angles
 */

// Animation robot DOFs and info (currently only includes layer type and display name;
// keeping as object in case we want other data here.
var dofInfo = {
    // BODY
    "topSection_r": {
        type: "Body",
        name: "Head"
    },
    "middleSection_r": {
        type: "Body",
        name: "Torso"
    },
    "bottomSection_r": {
        type: "Body",
        name: "Pelvis"
    },
    // EYE
    "eyeSubRootBn_r": {
        type: "Eye",
        name: "Rotate"
    },
    "eyeSubRootBn_t": {
        type: "Eye",
        name: "Translate"
    },
    "eyeSubRootBn_t_2": {
        type: "Eye",
        name: "Translate"
    },
    "vertexJoint1_t": {
        type: "Eye"
    },
    "vertexJoint1_t_2": {
        type: "Eye"
    },
    "vertexJoint2_t": {
        type: "Eye"
    },
    "vertexJoint2_t_2": {
        type: "Eye"
    },
    "vertexJoint3_t": {
        type: "Eye"
    },
    "vertexJoint3_t_2": {
        type: "Eye"
    },
    "vertexJoint4_t": {
        type: "Eye"
    },
    "vertexJoint4_t_2`": {
        type: "Eye"
    },
    "vertexJoint5_t": {
        type: "Eye"
    },
    "vertexJoint5_t_2": {
        type: "Eye"
    },
    "vertexJoint6_t": {
        type: "Eye"
    },
    "vertexJoint6_t_2": {
        type: "Eye"
    },
    "vertexJoint7_t": {
        type: "Eye"
    },
    "vertexJoint7_t_2": {
        type: "Eye"
    },
    "vertexJoint8_t": {
        type: "Eye"
    },
    "vertexJoint8_t_2": {
        type: "Eye"
    },
    "vertexJoint9_t": {
        type: "Eye"
    },
    "vertexJoint9_t_2": {
        type: "Eye"
    },
    // EYE TEXTURE
    "eyeTextureInfixBn_r": {
        type: "Eye Texture"
    },
    "eye_redChannelBn_r": {
        type: "Eye Texture"
    },
    "eye_greenChannelBn_r": {
        type: "Eye Texture"
    },
    "eye_blueChannelBn_r": {
        type: "Eye Texture"
    },
    // OVERLAY
    "overlay_textureSubRootBn_r": {
        type: "Overlay",
        name: "Rotate"
    },
    "overlay_textureSubRootBn_t": {
        type: "Overlay",
        name: "Translate"
    },
    "overlay_textureSubRootBn_t_2": {
        type: "Overlay",
        name: "Translate"
    },
    "overlay_vertexJoint1_t": {
        type: "Overlay"
    },
    "overlay_vertexJoint1_t_2": {
        type: "Overlay"
    },
    "overlay_vertexJoint2_t": {
        type: "Overlay"
    },
    "overlay_vertexJoint2_t_2": {
        type: "Overlay"
    },
    "overlay_vertexJoint3_t": {
        type: "Overlay"
    },
    "overlay_vertexJoint3_t_2": {
        type: "Overlay"
    },
    "overlay_vertexJoint4_t": {
        type: "Overlay"
    },
    "overlay_vertexJoint4_t_2": {
        type: "Overlay"
    },
    "overlay_vertexJoint5_t": {
        type: "Overlay"
    },
    "overlay_vertexJoint5_t_2": {
        type: "Overlay"
    },
    "overlay_vertexJoint6_t": {
        type: "Overlay"
    },
    "overlay_vertexJoint6_t_2": {
        type: "Overlay"
    },
    "overlay_vertexJoint7_t": {
        type: "Overlay"
    },
    "overlay_vertexJoint7_t_2": {
        type: "Overlay"
    },
    "overlay_vertexJoint8_t": {
        type: "Overlay"
    },
    "overlay_vertexJoint8_t_2": {
        type: "Overlay"
    },
    "overlay_vertexJoint9_t": {
        type: "Overlay"
    },
    "overlay_vertexJoint9_t_2": {
        type: "Overlay"
    },
    // OVERLAY TEXURE
    "overlayTextureInfixBn_r": {
        type: "Overlay Texture"
    },
    "overlay_redChannelBn_r": {
        type: "Overlay Texture"
    },
    overlay_greenChannelBn_r: {
        type: "Overlay Texture"
    },
    "overlay_blueChannelBn_r": {
        type: "Overlay Texture"
    },
    // BACKGROUND TEXTURE
    "screenBGTextureInfixBn_r": {
        type: "Background Texture"
    },
    "screenBG_redChannelBn_r": {
        type: "Background Texture"
    },
    "screenBG_greenChannelBn_r": {
        type: "Background Texture"
    },
    "screenBG_blueChannelBn_r": {
        type: "Background Texture"
    },
    // LED
    "lightring_redChannelBn_r": {
        type: "LED"
    },
    "lightring_greenChannelBn_r": {
        type: "LED"
    },
    "lightring_blueChannelBn_r": {
        type: "LED"
    }
};

var Channels = function () {
    function Channels() {
        _classCallCheck(this, Channels);
    }

    _createClass(Channels, null, [{
        key: "dofNameToDisplayType",
        value: function dofNameToDisplayType(dofName) {
            return dofInfo[dofName].type;
        }
    }, {
        key: "dofNameToDisplayName",
        value: function dofNameToDisplayName(dofName) {
            var displayName = dofInfo[dofName].name;

            return displayName !== undefined ? displayName : Channels.dofNameToDisplayType(dofName);
        }
    }, {
        key: "displayNameToDof",
        value: function displayNameToDof(displayName) {
            for (var dofName in dofInfo) {
                if (dofInfo[dofName].name === displayName) {
                    return dofName;
                }
            }
            return;
        }
    }, {
        key: "radiansToDegrees",
        value: function radiansToDegrees(radians) {
            return radians / Math.PI * 180;
        }
    }, {
        key: "degreesToRadians",
        value: function degreesToRadians(degree) {
            return degree / 180 * Math.PI;
        }
    }, {
        key: "framesToSeconds",
        value: function framesToSeconds(frame, frameRate) {
            return frame / frameRate;
        }
    }, {
        key: "secondsToFrames",
        value: function secondsToFrames(timeInSeconds, totalTimeInSeconds, totalFrames) {
            return Math.round(timeInSeconds / totalTimeInSeconds * totalFrames);
        }
    }, {
        key: "toTextureURL",
        value: function toTextureURL(jiboConfig, displayValue) {
            return this.baseTextureURL + this.getPaddedValueString(displayValue) + ".png";
        }
    }, {
        key: "toBGTextureURL",
        value: function toBGTextureURL(jiboConfig, displayValue) {
            return this.baseBGURL + this.getPaddedValueString(displayValue) + ".png";
        }
    }]);

    return Channels;
}();

exports.default = Channels;
//# sourceMappingURL=../map/utils/Channels.js.map
