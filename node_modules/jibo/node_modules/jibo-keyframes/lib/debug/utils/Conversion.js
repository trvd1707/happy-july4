"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var
// These numbers come from here:
// https://github.jibo.com/sdk/geometry-config/blob/9206df71556c925876362abbd3c382a1e2923fea/P1.0/jibo.jscene#L10-L11
// They are computed based on the CAD model that we have in Maya and is used for exporting our 3D visualizers
// meshes
WIDTH_METERS = 0.13002148,
    HEIGHT_METERS = 0.073142126,
    WIDTH_PIXELS = 1280,
    HEIGHT_PIXELS = 720;

var Conversion = function () {
    function Conversion() {
        _classCallCheck(this, Conversion);
    }

    _createClass(Conversion, null, [{
        key: "toMetersX",
        value: function toMetersX(xInPixels) {
            return xInPixels / WIDTH_PIXELS * WIDTH_METERS;
        }
    }, {
        key: "toMetersY",
        value: function toMetersY(yInPixels) {
            return yInPixels / HEIGHT_PIXELS * HEIGHT_METERS * -1;
        }
    }, {
        key: "toPixelsX",
        value: function toPixelsX(xInMeters) {
            return xInMeters / WIDTH_METERS * WIDTH_PIXELS;
        }
    }, {
        key: "toPixelsY",
        value: function toPixelsY(yInMeters) {
            return yInMeters / HEIGHT_METERS * HEIGHT_PIXELS * -1;
        }
    }]);

    return Conversion;
}();

exports.default = Conversion;
//# sourceMappingURL=../map/utils/Conversion.js.map
