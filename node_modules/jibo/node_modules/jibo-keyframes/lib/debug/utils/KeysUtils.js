"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Initialize the data with a default set of values for the necessary channels to have jibo animating his top, middle, and bottom body rotations.
// This includes some eye and overlay texture related default values in order to make sure Jibo's eye is showing centered on his screen

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _JiboKeyframeInfo = require("../JiboKeyframeInfo");

var _JiboKeyframeInfo2 = _interopRequireDefault(_JiboKeyframeInfo);

var _Channels = require("./Channels");

var _Channels2 = _interopRequireDefault(_Channels);

var _Runtime = require("../Runtime");

var _Runtime2 = _interopRequireDefault(_Runtime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var animData = {
    "header": {
        "fileType": "Animation",
        "version": "0.001",
        "creationTime": 1418336756906
    },
    "content": {
        "name": "AnythingElse_01.dae",
        "channels": [],
        "events": []
    }
};

var KeysUtils = function () {
    function KeysUtils() {
        _classCallCheck(this, KeysUtils);
    }

    _createClass(KeysUtils, null, [{
        key: "keysToAnimObjectAsync",
        value: function keysToAnimObjectAsync(keysPath, cb) {
            // Load .keys file asynchronously
            _fs2.default.readFile(keysPath, 'utf8', function (err, data) {
                if (err) {
                    console.log("\nError parsing \"" + keysPath + "\". " + err + "\n");
                    process.exit(1);
                } else {
                    var keysData = JSON.parse(data);
                    _JiboKeyframeInfo2.default.onLoad(keysData);
                    // use the base name of the uri for the anim data "name"
                    var baseName = _path2.default.basename(keysPath);

                    var animObj = KeysUtils.keysObjToAnimObject(keysData, baseName);
                    cb(animObj);
                }
            });
        }
    }, {
        key: "keysToAnim",
        value: function keysToAnim(keysPath, animPath) {

            console.log(keysPath);
            var animData = KeysUtils.keysToAnimObject(keysPath);

            try {
                _fs2.default.writeFileSync(animPath, JSON.stringify(animData, null, '    '), 'utf8');
            } catch (error) {
                console.log("\nERROROROROROR\n");
                process.exit(1);
            }
        }
    }, {
        key: "keysToAnimObject",
        value: function keysToAnimObject(keysPath) {
            var keysData = void 0;
            try {
                // Load .keys file
                keysData = JSON.parse(_fs2.default.readFileSync(keysPath, 'utf8'));
                _JiboKeyframeInfo2.default.onLoad(keysData);
            } catch (error) {
                console.log("\nError parsing \"" + keysPath + "\". " + error + "\n");
                process.exit(1);
            }

            // use the base name of the uri for the anim data "name"
            var baseName = _path2.default.basename(keysPath);
            return KeysUtils.keysObjToAnimObject(keysData, baseName);
        }
    }, {
        key: "keysObjToAnimObject",
        value: function keysObjToAnimObject(keysData, name) {
            /*
             * Fill out "header" fields that need to be changed. Should look like so
             *
             *	"header": {
             *     "fileType": "DOFAnimation",
             *      "version": "0.001",
             *      "creationTime": 1418336756906
             *  },
             */
            animData.header.creationTime = new Date().getTime();
            animData.header.version = keysData.version;
            /*
             * Fill out "content" fields that need to be changed. Should look like so
             *
             *	"content": {
             *      "name": "example.keys",
            *          "channels": [
                        {
                            "name": "Top",
                            "type": "number",
                            "keyframes": [
                                {
                                    "time": 0,
                                    "rotation": 0
                                },
                                ...
                            ]
                        },
                        ...
                    ],
                    "events": [
                        {
                            "time": 0,
                            "payload": {object}
                        },
                        ...
                    ]
             *  },
             */

            // reset data!
            animData.content.name = name;
            animData.content.channels = [];
            animData.content.events = [];

            var animChannels = {};

            // For each frame calculate all dof and event values and save them to file
            for (var frame = 0; frame < keysData.duration; frame++) {
                var timeInSeconds = _Channels2.default.framesToSeconds(frame, keysData.framerate);
                var dofs = _Runtime2.default.evaluateAllDOFLayers(keysData, _JiboKeyframeInfo2.default, timeInSeconds);
                var events = _Runtime2.default.evaluateAllEventLayers(keysData, _JiboKeyframeInfo2.default, timeInSeconds);

                for (var dofName in dofs) {
                    if (typeof animChannels[dofName] === "undefined") {
                        animChannels[dofName] = {
                            dofName: dofName,
                            length: keysData.duration / keysData.framerate,
                            times: [timeInSeconds],
                            values: [dofs[dofName]]
                        };

                        animData.content.channels.push(animChannels[dofName]);
                    } else {
                        animChannels[dofName].times.push(timeInSeconds);
                        animChannels[dofName].values.push(dofs[dofName]);
                    }
                }

                for (var i = 0; i < events.length; i++) {

                    var animEvent = {
                        time: timeInSeconds,
                        eventName: events[i].name,
                        payload: events[i].payload
                    };

                    animData.content.events.push(animEvent);
                }
            }
            return animData;
        }
    }]);

    return KeysUtils;
}();

exports.default = KeysUtils;
//# sourceMappingURL=../map/utils/KeysUtils.js.map
