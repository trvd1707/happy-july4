'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
set of functions for blending between a start and end keyframe for a
variety of value types. The name of the function matches the value type
it knows how to blend


/**
 * These are the set of easing functions our animation system supports. They
 * are used by the animation system to create variations of speed, acceleration,
 * overshooting, and undershooting of blending values.
 *
 * The `t` variable passed to each easing function has the value range: [0,1]. The
 * functions each return a float that should be used to create the usual weighted
 * blend of two values to be tweened. Example
 *
 * tweenFloats(start, end, t) {
 *   let f = easing.linear(t);
 *   return start*(1-f) + end*f;
 * }
 */

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _eases = require('eases');

var _eases2 = _interopRequireDefault(_eases);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * For now we support all of the easing functions in 'eases' module.
 * There's some good stuff here: http://www.rich-harris.co.uk/ramjet/
 */
var easing = _lodash2.default.clone(_eases2.default);

/**
 * "snap" always returns a weight fully weighted to the last keyframe
 */
easing.snap = function () {
    return 0;
};

var Tweening = function () {
    function Tweening() {
        _classCallCheck(this, Tweening);
    }

    _createClass(Tweening, null, [{
        key: 'getEasingFunc',


        /**
         * getEasingFunc - Resolve which easing function is desired
         *
         * @param  {function|string} easingFuncOrString function or name of a built-in easing function that calculates the blending weights
         * @return {function} the resolved easing function
         */
        value: function getEasingFunc(easingFuncOrString) {
            if (typeof easingFuncOrString === "function") {
                return easingFuncOrString;
            } else {
                return easing[easingFuncOrString];
            }
        }

        /**
         * @param {number} start - Start value
         * @param {number} end - End Value
         * @param {number} time - time between [0,1] indicating where in a blend we are
         * @param {function|string} easing function or name of a built-in easing function that calculates the blending weights
         */

    }, {
        key: 'float',
        value: function float(start, end, time, easing) {
            var f = Tweening.getEasingFunc(easing)(time);
            return start * (1 - f) + end * f;
        }

        /**
         * @param {object} start - Start value
         * @param {object} end - End Value
         * @param {number} time - time between [0,1] indicating where in a blend we are
         * @param {function|string} easing function or name of a built-in easing function that calculates the blending weights
         */

    }, {
        key: 'vector2',
        value: function vector2(start, end, time, easing) {
            var f = Tweening.getEasingFunc(easing)(time);
            return {
                x: start.x * (1 - f) + end.x * f,
                y: start.y * (1 - f) + end.y * f
            };
        }

        /**
         * @param {object} start - Start value
         * @param {object} end - End Value
         * @param {number} time - time between [0,1] indicating where in a blend we are
         * @param {function|string} easing function or name of a built-in easing function that calculates the blending weights
         */

    }, {
        key: 'rgb',
        value: function rgb(start, end, time, easing) {
            var f = Tweening.getEasingFunc(easing)(time);
            return {
                r: start.r * (1 - f) + end.r * f,
                g: start.g * (1 - f) + end.g * f,
                b: start.b * (1 - f) + end.b * f
            };
        }

        /**
         * @param {number} start - Start value
         * @param {number} end - End Value
         * @param {number} time - time between [0,1] indicating where in a blend we are
         * @param {function|string} easing function or name of a built-in easing function that calculates the blending weights
         */

    }, {
        key: 'color',
        value: function color(start, end, time /*, easing*/) {
            var f = Tweening.getEasingFunc("linear")(time);
            return start * (1 - f) + end * f;
        }
    }, {
        key: 'texture',
        value: function texture(start /*, end, time, easing*/) {
            return start;
        }
    }, {
        key: 'video',
        value: function video(start /*, end, time, easing*/) {
            return start;
        }
    }, {
        key: 'bool',
        value: function bool(start) {
            return start;
        }
    }, {
        key: 'enum',
        value: function _enum(start /*, end, time, easing*/) {
            return start;
        }
    }, {
        key: 'pixi',
        value: function pixi(start) {
            return start;
        }
    }]);

    return Tweening;
}();

exports.default = Tweening;
//# sourceMappingURL=../map/utils/Tweening.js.map
