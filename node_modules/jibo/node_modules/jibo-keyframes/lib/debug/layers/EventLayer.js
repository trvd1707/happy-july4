"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _EventBaseLayer2 = require("../bases/EventBaseLayer");

var _EventBaseLayer3 = _interopRequireDefault(_EventBaseLayer2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventInfo = {
    layerType: "Event",
    properties: {
        Event: {
            type: "event",
            defaultValue: {
                name: "",
                payload: ""
            }
        }
    }
};

/*
* Generic event layer with arbitrary payload data.
* */

var EventLayer = function (_EventBaseLayer) {
    _inherits(EventLayer, _EventBaseLayer);

    _createClass(EventLayer, null, [{
        key: "getInfo",
        value: function getInfo() {
            return EventInfo;
        }
    }]);

    function EventLayer() {
        _classCallCheck(this, EventLayer);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(EventLayer).call(this));
    }

    _createClass(EventLayer, null, [{
        key: "generateEvent",
        value: function generateEvent(props) {

            var event = {
                name: props.Event.name.length === 0 ? "" : props.Event.name,
                payload: {}
            };

            // if it's a valid JSON, return the parsed object; otherwise, return
            // whatever the payload was
            if (props.Event.payload.length > 0) {

                try {
                    event.payload = JSON.parse(props.Event.payload);
                } catch (error) {

                    event.payload = props.Event.payload;
                }
            }

            return event;
        }
    }, {
        key: "isValid",
        value: function isValid(generatedEvent) {
            // only need valid name
            return generatedEvent.name.length !== 0;
        }
    }]);

    return EventLayer;
}(_EventBaseLayer3.default);

exports.default = EventLayer;
//# sourceMappingURL=../map/layers/EventLayer.js.map
