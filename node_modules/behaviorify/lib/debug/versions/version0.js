'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (rawTree, cli) {

    /**
     * Get the schemas from the current working directory
     * to help process old versions of behavior files
     * @method folderSchema
     */
    function folderSchema(dir) {
        var result = {};

        // Combine all the schemes into a single file
        var schemas = {};
        var regex = dir + '/schema?(s)/' + "*.json";
        var files = cache[regex] || _glob2.default.sync(regex);
        if (!cache[regex]) {
            cache[regex] = files;
        }
        if (!files.length) return result;

        files.forEach(function (file) {
            var schema = cache[file] || require(file);

            // Upgrade the scheme to version 1!
            // each schema entry should have an array of options
            // and not meta/args fields
            if (schema.meta === undefined) {
                for (var name in schema) {
                    var definition = schema[name];
                    var options = [];
                    if (definition.meta) {
                        definition.meta.forEach(function (field, i) {
                            field.type = definition.args[i];
                            options.push(field);
                        });
                        delete definition.meta;
                        delete definition.args;
                    }
                    definition.options = options;
                }
                schema.meta = { version: 1 };
            }

            if (!cache[file]) {
                cache[file] = schema;
            }
            Object.assign(schemas, schema);
        });

        // Look through the schemas and map the class name
        // with the list of arguments
        for (var id in schemas) {
            if (id == 'meta') continue; // ignore meta
            var definition = schemas[id];
            if (definition.options) {
                var args = [];
                definition.options.forEach(function (key) {
                    args.push(key.field);
                });
                result[id] = args;
            }
        }
        return result;
    }

    // Collection of behaviors by namespace
    var Definitions = {
        core: _core2.default,
        project: folderSchema(process.cwd())
    };

    /**
     * Search through the node modules and find any asset packs
     * @method findAssetPacks
     */
    function findAssetPacks() {
        var result = {};
        var regex = process.cwd() + '/node_modules/*/package.json';
        var files = cache[regex] || _glob2.default.sync(regex);
        if (!cache[regex]) {
            cache[regex] = files;
        }
        if (!files.length) return result;
        files.forEach(function (file) {
            var data = require(file);
            if (data.jibo) {
                // is asset-pack
                var dir = _path2.default.dirname(file);
                Object.assign(Definitions.project, folderSchema(dir));
            }
        });
    }

    /**
     * Utility to convert arguments array into an object
     * @param {array} values Collection of argument values
     * @param {array<string>} fields Names of fields
     * @return {object}
     */
    function toObject(values, fields) {
        var obj = {};
        for (var i = 0; i < values.length; i++) {
            obj[fields[i]] = values[i];
        }
        return obj;
    }

    // Add the asset packs into the definitions
    findAssetPacks();

    for (var id in rawTree) {
        if (id == "meta") continue;
        var node = rawTree[id];

        // Handle the core modules
        if (Definitions.core[node.class]) {
            node.options = toObject(node.args, Definitions.core[node.class]);
        }
        // Handle current project and asset packs
        else if (Definitions.project[node.class]) {
                node.options = toObject(node.args, Definitions.project[node.class]);
            } else {
                const message = "Warning: Cannot upgrade arguments in class '%s'. Please update Schema and resave .bt file.";
                console.error(cli ? message.yellow : "behaviorify -> " + message, node.class);
                node.options = {};
            }

        delete node.args;
    }
    return rawTree;
};

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _core = require('../core');

var _core2 = _interopRequireDefault(_core);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cache = {};

// The arguments were converted from an array to an object map
//# sourceMappingURL=../map/versions/version0.js.map
