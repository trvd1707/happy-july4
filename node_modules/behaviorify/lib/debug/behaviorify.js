'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = behaviorify;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _escodegen = require('escodegen');

var _escodegen2 = _interopRequireDefault(_escodegen);

var _esprima = require('esprima');

var _esprima2 = _interopRequireDefault(_esprima);

var _findRoot = require('find-root');

var _findRoot2 = _interopRequireDefault(_findRoot);

var _ArrayExpression = require('./expressions/ArrayExpression');

var _ArrayExpression2 = _interopRequireDefault(_ArrayExpression);

var _ObjectExpression = require('./expressions/ObjectExpression');

var _ObjectExpression2 = _interopRequireDefault(_ObjectExpression);

var _CallExpression = require('./expressions/CallExpression');

var _CallExpression2 = _interopRequireDefault(_CallExpression);

var _LiteralExpression = require('./expressions/LiteralExpression');

var _LiteralExpression2 = _interopRequireDefault(_LiteralExpression);

var _versions = require('./versions');

var _versions2 = _interopRequireDefault(_versions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Current version of the behavior tree format
// External dependencies
const CURRENT_VERSION = 1;

// Polyfill for Electron 0.29.2, doesn't have Object.assign
if (!Object.assign) Object.assign = require('object-assign');

// Get the root path of the project
const rootPath = (0, _findRoot2.default)(__dirname);

// Utility function
function readFile(file) {
    return _fs2.default.readFileSync(_path2.default.resolve(rootPath, file), 'utf8');
}

// Start the behaviorify function
function behaviorify(rawTree, options) {
    options = Object.assign({
        babel: true,
        updateOnly: false,
        cli: false
    }, options || {});

    // Get the version of the meta field, add backward compatibility
    // for bt files that were created before versioning
    rawTree.meta = rawTree.meta || { version: 0 };

    // Massage the JSON tree to provide forward compatibility
    while (rawTree.meta.version < CURRENT_VERSION) {
        _versions2.default["version" + rawTree.meta.version](rawTree, options.cli);
        rawTree.meta.version++;
    }

    // If we're converting
    if (options.updateOnly) {
        return rawTree;
    }

    // Create a new template everytime
    var tree = _esprima2.default.parse(readFile('templates/tree.js'));
    var treeObject = new _ObjectExpression2.default(tree.body[tree.body.length - 1].expression.right.body.body[0].argument.properties);

    var arrayExpression, optionsExpression, k, value;
    var ids = Object.keys(rawTree);

    for (var i = 0; i < ids.length; i++) {

        var id = ids[i];

        // Ignore the meta information
        if (id == "meta") continue;

        var nodeDef = rawTree[id];
        var hasFunction = false;

        var objectExpression = new _ObjectExpression2.default();
        objectExpression.addKeyValue('id', (0, _LiteralExpression2.default)(id));

        if (nodeDef.name) {
            objectExpression.addKeyValue('name', (0, _LiteralExpression2.default)(nodeDef.name));
        }

        if (nodeDef.parent) {
            objectExpression.addKeyValue('parent', (0, _LiteralExpression2.default)(nodeDef.parent));
        }

        if (nodeDef['asset-pack']) {
            objectExpression.addKeyValue('asset-pack', (0, _LiteralExpression2.default)(nodeDef['asset-pack']));
        }

        objectExpression.addKeyValue('class', (0, _LiteralExpression2.default)(nodeDef.class));
        if (nodeDef.children) {
            arrayExpression = new _ArrayExpression2.default();
            for (k = 0; k < nodeDef.children.length; k++) {
                arrayExpression.push((0, _LiteralExpression2.default)(nodeDef.children[k]));
            }
            objectExpression.addKeyValue('children', arrayExpression.expression);
        }

        if (nodeDef.skipped) {
            objectExpression.addKeyValue('skipped', (0, _LiteralExpression2.default)(nodeDef.skipped));
        }

        if (nodeDef.decorators) {
            arrayExpression = new _ArrayExpression2.default();
            for (k = 0; k < nodeDef.decorators.length; k++) {
                arrayExpression.push((0, _LiteralExpression2.default)(nodeDef.decorators[k]));
            }
            objectExpression.addKeyValue('decorators', arrayExpression.expression);
        }

        if (nodeDef.options) {
            optionsExpression = new _ObjectExpression2.default();
            for (k in nodeDef.options) {
                value = nodeDef.options[k];
                if (Array.isArray(value)) {
                    value = nodeDef.options[k] = value.join("\n");
                }
                if (typeof value === 'string' && (value.indexOf('function') === 0 || value.indexOf('=>') >= 0)) {
                    hasFunction = true;
                    try {
                        var code = value;
                        if (!options.babel) {
                            code = "function f" + code.replace(/\s?\=\>/, "");
                        }
                        var parsed = _esprima2.default.parse(code);
                        if (parsed.body[0].type === 'ExpressionStatement') {
                            parsed = parsed.body[0].expression;
                        } else {
                            parsed = parsed.body[0];
                        }
                        optionsExpression.addKeyValue(k, parsed);
                    } catch (e) {
                        const message = 'Syntax error in behavior id %s. See below:';
                        console.error(options.cli ? message.red : message, id);
                        console.error(options.cli ? value.gray : value);
                    }
                } else {
                    optionsExpression.addKeyValue(k, (0, _LiteralExpression2.default)(value));
                }
            }
            objectExpression.addKeyValue('options', optionsExpression.expression);
        }

        if (hasFunction) {
            treeObject.addKeyValue(id, (0, _CallExpression2.default)(objectExpression.expression));
        } else {
            treeObject.addKeyValue(id, objectExpression.expression);
        }
    }
    var result = _escodegen2.default.generate(tree);

    if (options.babel) {
        var babel = require('babel-core');
        result = babel.transform(result).code;
    }
    return result;
}
//# sourceMappingURL=map/behaviorify.js.map
