{"version":3,"sources":["command.js"],"names":[],"mappings":"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","file":"command.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport behaviorify from './behaviorify';\nimport minimist from 'minimist';\nimport mkdirp from 'mkdirp';\nimport glob from 'glob';\n\nexport default function command() {\n\n    const args = minimist(process.argv.slice(2), {\n        string: ['input', 'output'],\n        boolean: ['verbose', 'update'],\n        alias: {\n            v: 'verbose',\n            u: 'update',\n            i: 'input',\n            o: 'output'\n        },\n        default: {\n            verbose: false,\n            update: false\n        }\n    });\n\n    let files = args._;\n\n    if (args.input) {\n        files = glob.sync(path.join(args.input, '**/*.bt'));\n    }\n\n    if (!files.length) {\n        console.error(\"Must provide files to process\".red);\n        process.exit(0);\n    }\n\n    // Convert a file\n    if (args.update && files.length > 1) {\n        files.forEach(function(filename){\n            const uri = path.resolve(filename);\n            const content = fs.readFileSync(uri, 'utf8');\n            const tree = JSON.parse(content);\n            behaviorify(tree, {updateOnly: true, cli: true});\n            fs.writeFileSync(uri, JSON.stringify(tree, null, \"  \"));\n            if (args.verbose) {\n                console.log(\" -> Updated %s\".green, filename);\n            }\n        });\n        process.exit(0);\n    }\n\n    // Convert a file\n    else if (files.length) {\n\n        // Make directory in case\n        if (args.output) {\n            mkdirp.sync(path.resolve(args.output));\n        }\n\n        files.forEach(function(filename){\n\n            if (!/\\.bt$/.test(filename)) {\n                console.error(\"Invalid *.bt file: %s\".red, filename);\n                return;\n            }\n            const uri = path.resolve(filename);\n\n            // Make sure the file is valid\n            try {\n                fs.statSync(uri);\n            }\n            catch (e) {\n                console.error(\"File does not exist '%s'\".red, filename);\n                return;\n            }\n            const content = fs.readFileSync(uri, 'utf8');\n            const tree = JSON.parse(content);\n            const compiled = behaviorify(tree, {cli: true});\n\n            if (args.output) {\n                let outputName;\n\n                // Rebase to the input folder\n                if (args.input) {\n                    outputName = filename.replace(/\\.bt$/, '.js')\n                        .replace(args.input + '/', '');\n                }\n                else {\n                    outputName = path.basename(filename, '.bt') + '.js';\n                }\n                const outputFile = path.resolve(args.output, outputName);\n                const outputDir = path.dirname(outputFile);\n\n                // Make the output directory\n                mkdirp.sync(outputDir);\n\n                fs.writeFileSync(outputFile, compiled);\n                if (args.verbose) {\n                    console.log(\"Saved '%s' to '%s'\".green, filename, outputName);\n                }\n            } \n            else {\n                console.log(compiled);\n            }\n        });\n        process.exit(0);\n    }\n\n    console.error(\"Invalid command.\".red);\n    process.exit(1);\n}"],"sourceRoot":"/source/"}