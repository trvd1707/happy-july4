{"version":3,"sources":["behaviorify.js"],"names":[],"mappings":"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","file":"behaviorify.js","sourcesContent":["// External dependencies\nimport path from 'path';\nimport fs from 'fs';\nimport escodegen from 'escodegen';\nimport esprima from 'esprima';\nimport findRoot from 'find-root';\nimport ArrayExpression from './expressions/ArrayExpression';\nimport ObjectExpression from './expressions/ObjectExpression';\nimport CallExpression from './expressions/CallExpression';\nimport LiteralExpression from './expressions/LiteralExpression';\nimport versions from './versions';\n\n// Current version of the behavior tree format\nconst CURRENT_VERSION = 1;\n\n// Polyfill for Electron 0.29.2, doesn't have Object.assign\nif (!Object.assign) Object.assign = require('object-assign');\n\n// Get the root path of the project\nconst rootPath = findRoot(__dirname);\n\n// Utility function\nfunction readFile(file) {\n    return fs.readFileSync(path.resolve(rootPath, file), 'utf8');\n}\n\n// Start the behaviorify function\nexport default function behaviorify(rawTree, options) {\n    options = Object.assign({\n        babel: true, \n        updateOnly: false,\n        cli: false\n    }, options || {});\n    \n    // Get the version of the meta field, add backward compatibility\n    // for bt files that were created before versioning\n    rawTree.meta = rawTree.meta || { version: 0 };\n\n    // Massage the JSON tree to provide forward compatibility\n    while(rawTree.meta.version < CURRENT_VERSION) {\n        versions[\"version\" + rawTree.meta.version](rawTree, options.cli);\n        rawTree.meta.version++;\n    }\n\n    // If we're converting\n    if (options.updateOnly) {\n        return rawTree;\n    }\n\n    // Create a new template everytime\n    var tree = esprima.parse(readFile('templates/tree.js'));\n    var treeObject = new ObjectExpression(\n        tree.body[tree.body.length - 1]\n            .expression\n            .right\n            .body\n            .body[0]\n            .argument\n            .properties\n        );\n\n    var arrayExpression, optionsExpression, k, value;\n    var ids = Object.keys(rawTree);\n\n    for(var i = 0; i < ids.length; i++) {\n\n        var id = ids[i];\n\n        // Ignore the meta information\n        if (id == \"meta\") continue;\n\n        var nodeDef = rawTree[id];\n        var hasFunction = false;\n\n        var objectExpression = new ObjectExpression();\n        objectExpression.addKeyValue('id', LiteralExpression(id));\n\n        if (nodeDef.name) {\n            objectExpression.addKeyValue('name', LiteralExpression(nodeDef.name));\n        }\n\n        if (nodeDef.parent) {\n            objectExpression.addKeyValue('parent', LiteralExpression(nodeDef.parent));\n        }\n\n        if (nodeDef['asset-pack']) {\n            objectExpression.addKeyValue('asset-pack', LiteralExpression(nodeDef['asset-pack']));\n        }\n\n        objectExpression.addKeyValue('class', LiteralExpression(nodeDef.class));\n        if (nodeDef.children) {\n            arrayExpression = new ArrayExpression();\n            for(k = 0; k < nodeDef.children.length; k++) {\n                arrayExpression.push(LiteralExpression(nodeDef.children[k]));\n            }\n            objectExpression.addKeyValue('children', arrayExpression.expression);\n        }\n\n        if (nodeDef.skipped) {\n            objectExpression.addKeyValue('skipped', LiteralExpression(nodeDef.skipped));\n        }\n\n        if (nodeDef.decorators) {\n            arrayExpression = new ArrayExpression();\n            for(k = 0; k < nodeDef.decorators.length; k++) {\n                arrayExpression.push(LiteralExpression(nodeDef.decorators[k]));\n            }\n            objectExpression.addKeyValue('decorators', arrayExpression.expression);\n        }\n\n        if (nodeDef.options) {\n            optionsExpression = new ObjectExpression();\n            for (k in nodeDef.options) {\n                value = nodeDef.options[k];\n                if(Array.isArray(value)) {\n                    value = nodeDef.options[k] = value.join(\"\\n\");\n                }\n                if(typeof value === 'string' && (value.indexOf('function') === 0 || value.indexOf('=>') >= 0)) {\n                    hasFunction = true;\n                    try {\n                        var code = value;\n                        if (!options.babel) {\n                            code = \"function f\" + code.replace(/\\s?\\=\\>/, \"\");\n                        }\n                        var parsed = esprima.parse(code);\n                        if(parsed.body[0].type === 'ExpressionStatement') {\n                            parsed = parsed.body[0].expression;\n                        }\n                        else {\n                            parsed = parsed.body[0];\n                        }\n                        optionsExpression.addKeyValue(k, parsed);\n                    }\n                    catch(e) {\n                        const message = 'Syntax error in behavior id %s. See below:';\n                        console.error(options.cli ? message.red : message, id);\n                        console.error(options.cli ? value.gray : value);\n                    }\n                }\n                else {\n                    optionsExpression.addKeyValue(k, LiteralExpression(value));\n                }\n            }\n            objectExpression.addKeyValue('options', optionsExpression.expression);\n        }\n\n        if (hasFunction) {\n            treeObject.addKeyValue(id, CallExpression(objectExpression.expression));\n        } else {\n            treeObject.addKeyValue(id, objectExpression.expression);\n        }\n    }\n    var result = escodegen.generate(tree);\n\n    if (options.babel) {\n        var babel = require('babel-core');\n        result = babel.transform(result).code;\n    }\n    return result;\n}"],"sourceRoot":"/source/"}