{"version":3,"sources":["versions/version0.js"],"names":[],"mappings":"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","file":"versions/version0.js","sourcesContent":["import glob from 'glob';\nimport path from 'path';\nimport core from '../core';\n\nvar cache = {};\n\n// The arguments were converted from an array to an object map\nexport default function(rawTree, cli) {\n\n    /**\n     * Get the schemas from the current working directory\n     * to help process old versions of behavior files\n     * @method folderSchema\n     */\n    function folderSchema(dir) {\n        var result = {};\n\n        // Combine all the schemes into a single file\n        var schemas = {};\n        var regex = dir + '/schema?(s)/' + \"*.json\";\n        var files = cache[regex] || glob.sync(regex);\n        if (!cache[regex]) {\n            cache[regex] = files;\n        }\n        if (!files.length) return result;\n        \n        files.forEach(function(file){\n            var schema = cache[file] || require(file);\n            \n            // Upgrade the scheme to version 1!\n            // each schema entry should have an array of options\n            // and not meta/args fields\n            if (schema.meta === undefined) {\n                for (var name in schema) {\n                    var definition = schema[name];\n                    var options = [];\n                    if (definition.meta) {\n                        definition.meta.forEach(function(field, i) {\n                            field.type = definition.args[i];\n                            options.push(field);\n                        });\n                        delete definition.meta;\n                        delete definition.args;\n                    }\n                    definition.options = options;\n                }\n                schema.meta = {version: 1};\n            }\n\n            if (!cache[file]) {\n                cache[file] = schema;\n            }\n            Object.assign(schemas, schema);\n        });\n\n        // Look through the schemas and map the class name\n        // with the list of arguments\n        for (var id in schemas) {\n            if (id == 'meta') continue; // ignore meta\n            var definition = schemas[id];\n            if (definition.options) {\n                var args = [];\n                definition.options.forEach(function(key) {\n                    args.push(key.field);\n                });\n                result[id] = args;\n            }\n        }\n        return result;\n    }\n\n    // Collection of behaviors by namespace\n    var Definitions = {\n        core: core,\n        project: folderSchema(process.cwd())\n    };\n\n    /**\n     * Search through the node modules and find any asset packs\n     * @method findAssetPacks\n     */\n    function findAssetPacks() {\n        var result = {};\n        var regex = process.cwd() + '/node_modules/*/package.json';\n        var files = cache[regex] || glob.sync(regex);\n        if (!cache[regex]) {\n            cache[regex] = files;\n        }\n        if (!files.length) return result;\n        files.forEach(function(file){\n            var data = require(file);\n            if (data.jibo) { // is asset-pack\n                var dir = path.dirname(file);\n                Object.assign(Definitions.project, folderSchema(dir));\n            }\n        });\n    }\n\n    /**\n     * Utility to convert arguments array into an object\n     * @param {array} values Collection of argument values\n     * @param {array<string>} fields Names of fields\n     * @return {object}\n     */\n    function toObject(values, fields) {\n        var obj = {};\n        for (var i = 0; i < values.length; i++) {\n            obj[fields[i]] = values[i];\n        }\n        return obj;\n    }\n\n    // Add the asset packs into the definitions\n    findAssetPacks();\n\n    for (var id in rawTree) {\n        if (id == \"meta\") continue;\n        var node = rawTree[id];\n\n        // Handle the core modules\n        if (Definitions.core[node.class]) {\n            node.options = toObject(node.args, Definitions.core[node.class]);\n        }\n        // Handle current project and asset packs\n        else if (Definitions.project[node.class]) {\n            node.options = toObject(node.args, Definitions.project[node.class]);\n        }\n        else {\n            const message = \"Warning: Cannot upgrade arguments in class '%s'. Please update Schema and resave .bt file.\";\n            console.error(cli ? message.yellow : \"behaviorify -> \" + message, node.class);\n            node.options = {};\n        }\n\n        delete node.args;\n    }\n    return rawTree;\n}"],"sourceRoot":"/source/"}