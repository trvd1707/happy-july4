'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = command;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _behaviorify = require('./behaviorify');

var _behaviorify2 = _interopRequireDefault(_behaviorify);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function command() {

    const args = (0, _minimist2.default)(process.argv.slice(2), {
        string: ['input', 'output'],
        boolean: ['verbose', 'update'],
        alias: {
            v: 'verbose',
            u: 'update',
            i: 'input',
            o: 'output'
        },
        default: {
            verbose: false,
            update: false
        }
    });

    let files = args._;

    if (args.input) {
        files = _glob2.default.sync(_path2.default.join(args.input, '**/*.bt'));
    }

    if (!files.length) {
        console.error("Must provide files to process".red);
        process.exit(0);
    }

    // Convert a file
    if (args.update && files.length > 1) {
        files.forEach(function (filename) {
            const uri = _path2.default.resolve(filename);
            const content = _fs2.default.readFileSync(uri, 'utf8');
            const tree = JSON.parse(content);
            (0, _behaviorify2.default)(tree, { updateOnly: true, cli: true });
            _fs2.default.writeFileSync(uri, JSON.stringify(tree, null, "  "));
            if (args.verbose) {
                console.log(" -> Updated %s".green, filename);
            }
        });
        process.exit(0);
    }

    // Convert a file
    else if (files.length) {

            // Make directory in case
            if (args.output) {
                _mkdirp2.default.sync(_path2.default.resolve(args.output));
            }

            files.forEach(function (filename) {

                if (!/\.bt$/.test(filename)) {
                    console.error("Invalid *.bt file: %s".red, filename);
                    return;
                }
                const uri = _path2.default.resolve(filename);

                // Make sure the file is valid
                try {
                    _fs2.default.statSync(uri);
                } catch (e) {
                    console.error("File does not exist '%s'".red, filename);
                    return;
                }
                const content = _fs2.default.readFileSync(uri, 'utf8');
                const tree = JSON.parse(content);
                const compiled = (0, _behaviorify2.default)(tree, { cli: true });

                if (args.output) {
                    let outputName;

                    // Rebase to the input folder
                    if (args.input) {
                        outputName = filename.replace(/\.bt$/, '.js').replace(args.input + '/', '');
                    } else {
                        outputName = _path2.default.basename(filename, '.bt') + '.js';
                    }
                    const outputFile = _path2.default.resolve(args.output, outputName);
                    const outputDir = _path2.default.dirname(outputFile);

                    // Make the output directory
                    _mkdirp2.default.sync(outputDir);

                    _fs2.default.writeFileSync(outputFile, compiled);
                    if (args.verbose) {
                        console.log("Saved '%s' to '%s'".green, filename, outputName);
                    }
                } else {
                    console.log(compiled);
                }
            });
            process.exit(0);
        }

    console.error("Invalid command.".red);
    process.exit(1);
}
//# sourceMappingURL=map/command.js.map
